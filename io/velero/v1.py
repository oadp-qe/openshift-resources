# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field

from ..k8s.apimachinery.pkg.apis.meta import v1


class Hooks(BaseModel):
    resources: Optional[Any] = Field(
        None,
        description='Resources are hooks that should be executed when backing up individual instances of a resource.',
    )


class Metadata(BaseModel):
    labels: Optional[Dict[str, str]] = None


class Spec(BaseModel):
    csiSnapshotTimeout: Optional[str] = Field(
        None,
        description='CSISnapshotTimeout specifies the time used to wait for CSI VolumeSnapshot status turns to ReadyToUse during creation, before returning error as timeout. The default value is 10 minute.',
    )
    defaultVolumesToRestic: Optional[bool] = Field(
        None,
        description='DefaultVolumesToRestic specifies whether restic should be used to take a backup of all pod volumes by default.',
    )
    excludedNamespaces: Optional[Any] = Field(
        None,
        description='ExcludedNamespaces contains a list of namespaces that are not included in the backup.',
    )
    excludedResources: Optional[Any] = Field(
        None,
        description='ExcludedResources is a slice of resource names that are not included in the backup.',
    )
    hooks: Optional[Hooks] = Field(
        None,
        description='Hooks represent custom behaviors that should be executed at different phases of the backup.',
    )
    includeClusterResources: Optional[Any] = Field(
        None,
        description='IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.',
    )
    includedNamespaces: Optional[Any] = Field(
        None,
        description='IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.',
    )
    includedResources: Optional[Any] = Field(
        None,
        description='IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.',
    )
    labelSelector: Optional[Any] = Field(
        None,
        description='LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.',
    )
    metadata: Optional[Metadata] = None
    orLabelSelectors: Optional[Any] = Field(
        None,
        description='OrLabelSelectors is list of metav1.LabelSelector to filter with when adding individual objects to the backup. If multiple provided they will be joined by the OR operator. LabelSelector as well as OrLabelSelectors cannot co-exist in backup request, only one of them can be used.',
    )
    orderedResources: Optional[Any] = Field(
        None,
        description='OrderedResources specifies the backup order of resources of specific Kind. The map key is the Kind name and value is a list of resource names separated by commas. Each resource name has format "namespace/resourcename".  For cluster resources, simply use "resourcename".',
    )
    snapshotVolumes: Optional[Any] = Field(
        None,
        description="SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.",
    )
    storageLocation: Optional[str] = Field(
        None,
        description='StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.',
    )
    ttl: Optional[str] = Field(
        None,
        description='TTL is a time.Duration-parseable string describing how long the Backup should be retained for.',
    )
    volumeSnapshotLocations: Optional[List[str]] = Field(
        None,
        description='VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.',
    )


class Phase(Enum):
    New = 'New'
    FailedValidation = 'FailedValidation'
    InProgress = 'InProgress'
    Completed = 'Completed'
    PartiallyFailed = 'PartiallyFailed'
    Failed = 'Failed'
    Deleting = 'Deleting'


class Status(BaseModel):
    completionTimestamp: Optional[Any] = Field(
        None,
        description="CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps",
    )
    csiVolumeSnapshotsAttempted: Optional[int] = Field(
        None,
        description='CSIVolumeSnapshotsAttempted is the total number of attempted CSI VolumeSnapshots for this backup.',
    )
    csiVolumeSnapshotsCompleted: Optional[int] = Field(
        None,
        description='CSIVolumeSnapshotsCompleted is the total number of successfully completed CSI VolumeSnapshots for this backup.',
    )
    errors: Optional[int] = Field(
        None,
        description="Errors is a count of all error messages that were generated during execution of the backup.  The actual errors are in the backup's log file in object storage.",
    )
    expiration: Optional[Any] = Field(
        None,
        description='Expiration is when this Backup is eligible for garbage-collection.',
    )
    failureReason: Optional[str] = Field(
        None,
        description='FailureReason is an error that caused the entire backup to fail.',
    )
    formatVersion: Optional[str] = Field(
        None,
        description='FormatVersion is the backup format version, including major, minor, and patch version.',
    )
    phase: Optional[Phase] = Field(
        None, description='Phase is the current state of the Backup.'
    )
    progress: Optional[Any] = Field(
        None,
        description="Progress contains information about the backup's execution progress. Note that this information is best-effort only -- if Velero fails to update it during a backup for any reason, it may be inaccurate/stale.",
    )
    startTimestamp: Optional[Any] = Field(
        None,
        description="StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps",
    )
    validationErrors: Optional[Any] = Field(
        None,
        description='ValidationErrors is a slice of all validation errors (if applicable).',
    )
    version: Optional[int] = Field(
        None,
        description='Version is the backup format major version. Deprecated: Please see FormatVersion',
    )
    volumeSnapshotsAttempted: Optional[int] = Field(
        None,
        description='VolumeSnapshotsAttempted is the total number of attempted volume snapshots for this backup.',
    )
    volumeSnapshotsCompleted: Optional[int] = Field(
        None,
        description='VolumeSnapshotsCompleted is the total number of successfully completed volume snapshots for this backup.',
    )
    warnings: Optional[int] = Field(
        None,
        description="Warnings is a count of all warning messages that were generated during execution of the backup. The actual warnings are in the backup's log file in object storage.",
    )


class AccessMode(Enum):
    ReadOnly = 'ReadOnly'
    ReadWrite = 'ReadWrite'


class Credential(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ObjectStorage(BaseModel):
    bucket: str = Field(
        ..., description='Bucket is the bucket to use for object storage.'
    )
    caCert: Optional[str] = Field(
        None,
        description='CACert defines a CA bundle to use when verifying TLS connections to the provider.',
    )
    prefix: Optional[str] = Field(
        None,
        description='Prefix is the path inside a bucket to use for Velero storage. Optional.',
    )


class SpecModel(BaseModel):
    accessMode: Optional[AccessMode] = Field(
        None,
        description='AccessMode defines the permissions for the backup storage location.',
    )
    backupSyncPeriod: Optional[Any] = Field(
        None,
        description='BackupSyncPeriod defines how frequently to sync backup API objects from object storage. A value of 0 disables sync.',
    )
    config: Optional[Dict[str, str]] = Field(
        None, description='Config is for provider-specific configuration fields.'
    )
    credential: Optional[Credential] = Field(
        None,
        description='Credential contains the credential information intended to be used with this location',
    )
    default: Optional[bool] = Field(
        None,
        description='Default indicates this location is the default backup storage location.',
    )
    objectStorage: ObjectStorage = Field(
        ...,
        description="ObjectStorageLocation specifies the settings necessary to connect to a provider's object storage.",
    )
    provider: str = Field(
        ..., description='Provider is the provider of the backup storage.'
    )
    validationFrequency: Optional[Any] = Field(
        None,
        description='ValidationFrequency defines how frequently to validate the corresponding object storage. A value of 0 disables validation.',
    )


class AccessModeModel(Enum):
    ReadOnly = 'ReadOnly'
    ReadWrite = 'ReadWrite'


class PhaseModel(Enum):
    Available = 'Available'
    Unavailable = 'Unavailable'


class StatusModel(BaseModel):
    accessMode: Optional[AccessModeModel] = Field(
        None,
        description='AccessMode is an unused field. \n Deprecated: there is now an AccessMode field on the Spec and this field will be removed entirely as of v2.0.',
    )
    lastSyncedRevision: Optional[str] = Field(
        None,
        description="LastSyncedRevision is the value of the `metadata/revision` file in the backup storage location the last time the BSL's contents were synced into the cluster. \n Deprecated: this field is no longer updated or used for detecting changes to the location's contents and will be removed entirely in v2.0.",
    )
    lastSyncedTime: Optional[Any] = Field(
        None,
        description='LastSyncedTime is the last time the contents of the location were synced into the cluster.',
    )
    lastValidationTime: Optional[Any] = Field(
        None,
        description='LastValidationTime is the last time the backup store location was validated the cluster.',
    )
    message: Optional[str] = Field(
        None,
        description="Message is a message about the backup storage location's status.",
    )
    phase: Optional[PhaseModel] = Field(
        None, description='Phase is the current state of the BackupStorageLocation.'
    )


class SpecModel1(BaseModel):
    backupName: str


class PhaseModel1(Enum):
    New = 'New'
    InProgress = 'InProgress'
    Processed = 'Processed'


class StatusModel1(BaseModel):
    errors: Optional[Any] = Field(
        None,
        description='Errors contains any errors that were encountered during the deletion process.',
    )
    phase: Optional[PhaseModel1] = Field(
        None, description='Phase is the current state of the DeleteBackupRequest.'
    )


class Kind(Enum):
    BackupLog = 'BackupLog'
    BackupContents = 'BackupContents'
    BackupVolumeSnapshots = 'BackupVolumeSnapshots'
    BackupItemSnapshots = 'BackupItemSnapshots'
    BackupResourceList = 'BackupResourceList'
    RestoreLog = 'RestoreLog'
    RestoreResults = 'RestoreResults'
    CSIBackupVolumeSnapshots = 'CSIBackupVolumeSnapshots'
    CSIBackupVolumeSnapshotContents = 'CSIBackupVolumeSnapshotContents'


class Target(BaseModel):
    kind: Kind = Field(..., description='Kind is the type of file to download.')
    name: str = Field(
        ...,
        description='Name is the name of the kubernetes resource with which the file is associated.',
    )


class SpecModel2(BaseModel):
    target: Target = Field(
        ..., description='Target is what to download (e.g. logs for a backup).'
    )


class PhaseModel2(Enum):
    New = 'New'
    Processed = 'Processed'


class StatusModel2(BaseModel):
    downloadURL: Optional[str] = Field(
        None, description='DownloadURL contains the pre-signed URL for the target file.'
    )
    expiration: Optional[Any] = Field(
        None,
        description='Expiration is when this DownloadRequest expires and can be deleted by the system.',
    )
    phase: Optional[PhaseModel2] = Field(
        None, description='Phase is the current state of the DownloadRequest.'
    )


class Pod(BaseModel):
    apiVersion: Optional[str] = Field(None, description='API version of the referent.')
    fieldPath: Optional[str] = Field(
        None,
        description='If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )
    resourceVersion: Optional[str] = Field(
        None,
        description='Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
    )
    uid: Optional[str] = Field(
        None,
        description='UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids',
    )


class SpecModel3(BaseModel):
    backupStorageLocation: str = Field(
        ...,
        description='BackupStorageLocation is the name of the backup storage location where the restic repository is stored.',
    )
    node: str = Field(
        ..., description='Node is the name of the node that the Pod is running on.'
    )
    pod: Pod = Field(
        ...,
        description='Pod is a reference to the pod containing the volume to be backed up.',
    )
    repoIdentifier: str = Field(
        ..., description='RepoIdentifier is the restic repository identifier.'
    )
    tags: Optional[Dict[str, str]] = Field(
        None,
        description='Tags are a map of key-value pairs that should be applied to the volume backup as tags.',
    )
    volume: str = Field(
        ...,
        description='Volume is the name of the volume within the Pod to be backed up.',
    )


class PhaseModel3(Enum):
    New = 'New'
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'


class Progress(BaseModel):
    bytesDone: Optional[int] = None
    totalBytes: Optional[int] = None


class StatusModel3(BaseModel):
    completionTimestamp: Optional[Any] = Field(
        None,
        description="CompletionTimestamp records the time a backup was completed. Completion time is recorded even on failed backups. Completion time is recorded before uploading the backup object. The server's time is used for CompletionTimestamps",
    )
    message: Optional[str] = Field(
        None, description="Message is a message about the pod volume backup's status."
    )
    path: Optional[str] = Field(
        None,
        description='Path is the full path within the controller pod being backed up.',
    )
    phase: Optional[PhaseModel3] = Field(
        None, description='Phase is the current state of the PodVolumeBackup.'
    )
    progress: Optional[Progress] = Field(
        None,
        description='Progress holds the total number of bytes of the volume and the current number of backed up bytes. This can be used to display progress information about the backup operation.',
    )
    snapshotID: Optional[str] = Field(
        None,
        description='SnapshotID is the identifier for the snapshot of the pod volume.',
    )
    startTimestamp: Optional[Any] = Field(
        None,
        description="StartTimestamp records the time a backup was started. Separate from CreationTimestamp, since that value changes on restores. The server's time is used for StartTimestamps",
    )


class PodModel(BaseModel):
    apiVersion: Optional[str] = Field(None, description='API version of the referent.')
    fieldPath: Optional[str] = Field(
        None,
        description='If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )
    resourceVersion: Optional[str] = Field(
        None,
        description='Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
    )
    uid: Optional[str] = Field(
        None,
        description='UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids',
    )


class SpecModel4(BaseModel):
    backupStorageLocation: str = Field(
        ...,
        description='BackupStorageLocation is the name of the backup storage location where the restic repository is stored.',
    )
    pod: PodModel = Field(
        ...,
        description='Pod is a reference to the pod containing the volume to be restored.',
    )
    repoIdentifier: str = Field(
        ..., description='RepoIdentifier is the restic repository identifier.'
    )
    snapshotID: str = Field(
        ..., description='SnapshotID is the ID of the volume snapshot to be restored.'
    )
    volume: str = Field(
        ...,
        description='Volume is the name of the volume within the Pod to be restored.',
    )


class PhaseModel4(Enum):
    New = 'New'
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'


class ProgressModel(BaseModel):
    bytesDone: Optional[int] = None
    totalBytes: Optional[int] = None


class StatusModel4(BaseModel):
    completionTimestamp: Optional[Any] = Field(
        None,
        description="CompletionTimestamp records the time a restore was completed. Completion time is recorded even on failed restores. The server's time is used for CompletionTimestamps",
    )
    message: Optional[str] = Field(
        None, description="Message is a message about the pod volume restore's status."
    )
    phase: Optional[PhaseModel4] = Field(
        None, description='Phase is the current state of the PodVolumeRestore.'
    )
    progress: Optional[ProgressModel] = Field(
        None,
        description='Progress holds the total number of bytes of the snapshot and the current number of restored bytes. This can be used to display progress information about the restore operation.',
    )
    startTimestamp: Optional[Any] = Field(
        None,
        description="StartTimestamp records the time a restore was started. The server's time is used for StartTimestamps",
    )


class SpecModel5(BaseModel):
    backupStorageLocation: str = Field(
        ...,
        description='BackupStorageLocation is the name of the BackupStorageLocation that should contain this repository.',
    )
    maintenanceFrequency: str = Field(
        ..., description='MaintenanceFrequency is how often maintenance should be run.'
    )
    resticIdentifier: str = Field(
        ...,
        description='ResticIdentifier is the full restic-compatible string for identifying this repository.',
    )
    volumeNamespace: str = Field(
        ...,
        description='VolumeNamespace is the namespace this restic repository contains pod volume backups for.',
    )


class PhaseModel5(Enum):
    New = 'New'
    Ready = 'Ready'
    NotReady = 'NotReady'


class StatusModel5(BaseModel):
    lastMaintenanceTime: Optional[Any] = Field(
        None, description='LastMaintenanceTime is the last time maintenance was run.'
    )
    message: Optional[str] = Field(
        None,
        description='Message is a message about the current status of the ResticRepository.',
    )
    phase: Optional[PhaseModel5] = Field(
        None, description='Phase is the current state of the ResticRepository.'
    )


class OnError(Enum):
    Continue = 'Continue'
    Fail = 'Fail'


class Exec(BaseModel):
    command: List[str] = Field(
        ...,
        description='Command is the command and arguments to execute from within a container after a pod has been restored.',
        min_items=1,
    )
    container: Optional[str] = Field(
        None,
        description="Container is the container in the pod where the command should be executed. If not specified, the pod's first container is used.",
    )
    execTimeout: Optional[str] = Field(
        None,
        description='ExecTimeout defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.',
    )
    onError: Optional[OnError] = Field(
        None,
        description='OnError specifies how Velero should behave if it encounters an error executing this hook.',
    )
    waitTimeout: Optional[str] = Field(
        None,
        description='WaitTimeout defines the maximum amount of time Velero should wait for the container to be Ready before attempting to run the command.',
    )


class ConfigMapKeyRef(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class FieldRef(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRef(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class SecretKeyRef(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ValueFrom(BaseModel):
    configMapKeyRef: Optional[ConfigMapKeyRef] = Field(
        None, description='Selects a key of a ConfigMap.'
    )
    fieldRef: Optional[FieldRef] = Field(
        None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItem(BaseModel):
    name: str = Field(
        ..., description='Name of the environment variable. Must be a C_IDENTIFIER.'
    )
    value: Optional[str] = Field(
        None,
        description='Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
    )
    valueFrom: Optional[ValueFrom] = Field(
        None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class ConfigMapRef(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap must be defined'
    )


class SecretRef(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret must be defined'
    )


class EnvFromItem(BaseModel):
    configMapRef: Optional[ConfigMapRef] = Field(
        None, description='The ConfigMap to select from'
    )
    prefix: Optional[str] = Field(
        None,
        description='An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
    )
    secretRef: Optional[SecretRef] = Field(
        None, description='The Secret to select from'
    )


class ExecModel(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeader(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGet(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeader]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocket(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PostStart(BaseModel):
    exec: Optional[ExecModel] = Field(
        None,
        description='One and only one of the following should be specified. Exec specifies the action to take.',
    )
    httpGet: Optional[HttpGet] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocket] = Field(
        None,
        description='TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook',
    )


class ExecModel1(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PreStop(BaseModel):
    exec: Optional[ExecModel1] = Field(
        None,
        description='One and only one of the following should be specified. Exec specifies the action to take.',
    )
    httpGet: Optional[HttpGetModel] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel] = Field(
        None,
        description='TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook',
    )


class Lifecycle(BaseModel):
    postStart: Optional[PostStart] = Field(
        None,
        description='PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks',
    )
    preStop: Optional[PreStop] = Field(
        None,
        description="PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    )


class ExecModel2(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel1(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel1(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel1]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel1(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class LivenessProbe(BaseModel):
    exec: Optional[ExecModel2] = Field(
        None,
        description='One and only one of the following should be specified. Exec specifies the action to take.',
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    httpGet: Optional[HttpGetModel1] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel1] = Field(
        None,
        description='TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook',
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class Port(BaseModel):
    containerPort: int = Field(
        ...,
        description="Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
    )
    hostIP: Optional[str] = Field(
        None, description='What host IP to bind the external port to.'
    )
    hostPort: Optional[int] = Field(
        None,
        description='Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
    )
    name: Optional[str] = Field(
        None,
        description='If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
    )
    protocol: str = Field(
        ...,
        description='Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".',
    )


class ExecModel3(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel2(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel2(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel2]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel2(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class ReadinessProbe(BaseModel):
    exec: Optional[ExecModel3] = Field(
        None,
        description='One and only one of the following should be specified. Exec specifies the action to take.',
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    httpGet: Optional[HttpGetModel2] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel2] = Field(
        None,
        description='TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook',
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class Resources(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class Capabilities(BaseModel):
    add: Optional[List[str]] = Field(None, description='Added capabilities')
    drop: Optional[List[str]] = Field(None, description='Removed capabilities')


class SeLinuxOptions(BaseModel):
    level: Optional[str] = Field(
        None, description='Level is SELinux level label that applies to the container.'
    )
    role: Optional[str] = Field(
        None, description='Role is a SELinux role label that applies to the container.'
    )
    type: Optional[str] = Field(
        None, description='Type is a SELinux type label that applies to the container.'
    )
    user: Optional[str] = Field(
        None, description='User is a SELinux user label that applies to the container.'
    )


class SeccompProfile(BaseModel):
    localhostProfile: Optional[str] = Field(
        None,
        description='localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet\'s configured seccomp profile location. Must only be set if type is "Localhost".',
    )
    type: str = Field(
        ...,
        description='type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.',
    )


class WindowsOptions(BaseModel):
    gmsaCredentialSpec: Optional[str] = Field(
        None,
        description='GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
    )
    gmsaCredentialSpecName: Optional[str] = Field(
        None,
        description='GMSACredentialSpecName is the name of the GMSA credential spec to use.',
    )
    hostProcess: Optional[bool] = Field(
        None,
        description="HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
    )
    runAsUserName: Optional[str] = Field(
        None,
        description='The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )


class SecurityContext(BaseModel):
    allowPrivilegeEscalation: Optional[bool] = Field(
        None,
        description='AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN',
    )
    capabilities: Optional[Capabilities] = Field(
        None,
        description='The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.',
    )
    privileged: Optional[bool] = Field(
        None,
        description='Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.',
    )
    procMount: Optional[str] = Field(
        None,
        description='procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.',
    )
    readOnlyRootFilesystem: Optional[bool] = Field(
        None,
        description='Whether this container has a read-only root filesystem. Default is false.',
    )
    runAsGroup: Optional[int] = Field(
        None,
        description='The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    runAsNonRoot: Optional[bool] = Field(
        None,
        description='Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    runAsUser: Optional[int] = Field(
        None,
        description='The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    seLinuxOptions: Optional[SeLinuxOptions] = Field(
        None,
        description='The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    seccompProfile: Optional[SeccompProfile] = Field(
        None,
        description='The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.',
    )
    windowsOptions: Optional[WindowsOptions] = Field(
        None,
        description='The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )


class ExecModel4(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel3(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel3(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel3]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel3(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class StartupProbe(BaseModel):
    exec: Optional[ExecModel4] = Field(
        None,
        description='One and only one of the following should be specified. Exec specifies the action to take.',
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    httpGet: Optional[HttpGetModel3] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel3] = Field(
        None,
        description='TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook',
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class VolumeDevice(BaseModel):
    devicePath: str = Field(
        ...,
        description='devicePath is the path inside of the container that the device will be mapped to.',
    )
    name: str = Field(
        ...,
        description='name must match the name of a persistentVolumeClaim in the pod',
    )


class VolumeMount(BaseModel):
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted.  Must not contain ':'.",
    )
    mountPropagation: Optional[str] = Field(
        None,
        description='mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
    )
    name: str = Field(..., description='This must match the Name of a Volume.')
    readOnly: Optional[bool] = Field(
        None,
        description='Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
    )
    subPath: Optional[str] = Field(
        None,
        description='Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
    )
    subPathExpr: Optional[str] = Field(
        None,
        description='Expanded path within the volume from which the container\'s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container\'s environment. Defaults to "" (volume\'s root). SubPathExpr and SubPath are mutually exclusive.',
    )


class InitContainer(BaseModel):
    args: Optional[List[str]] = Field(
        None,
        description='Arguments to the entrypoint. The docker image\'s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    command: Optional[List[str]] = Field(
        None,
        description='Entrypoint array. Not executed within a shell. The docker image\'s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    env: Optional[List[EnvItem]] = Field(
        None,
        description='List of environment variables to set in the container. Cannot be updated.',
    )
    envFrom: Optional[List[EnvFromItem]] = Field(
        None,
        description='List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
    )
    image: Optional[str] = Field(
        None,
        description='Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
    )
    imagePullPolicy: Optional[str] = Field(
        None,
        description='Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
    )
    lifecycle: Optional[Lifecycle] = Field(
        None,
        description='Actions that the management system should take in response to container lifecycle events. Cannot be updated.',
    )
    livenessProbe: Optional[LivenessProbe] = Field(
        None,
        description='Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    name: str = Field(
        ...,
        description='Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
    )
    ports: Optional[List[Port]] = Field(
        None,
        description='List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
    )
    readinessProbe: Optional[ReadinessProbe] = Field(
        None,
        description='Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    resources: Optional[Resources] = Field(
        None,
        description='Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    securityContext: Optional[SecurityContext] = Field(
        None,
        description='SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/',
    )
    startupProbe: Optional[StartupProbe] = Field(
        None,
        description="StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    stdin: Optional[bool] = Field(
        None,
        description='Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
    )
    stdinOnce: Optional[bool] = Field(
        None,
        description='Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
    )
    terminationMessagePath: Optional[str] = Field(
        None,
        description="Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
    )
    terminationMessagePolicy: Optional[str] = Field(
        None,
        description='Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
    )
    tty: Optional[bool] = Field(
        None,
        description="Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
    )
    volumeDevices: Optional[List[VolumeDevice]] = Field(
        None,
        description='volumeDevices is the list of block devices to be used by the container.',
    )
    volumeMounts: Optional[List[VolumeMount]] = Field(
        None,
        description="Pod volumes to mount into the container's filesystem. Cannot be updated.",
    )
    workingDir: Optional[str] = Field(
        None,
        description="Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
    )


class Init(BaseModel):
    initContainers: Optional[List[InitContainer]] = Field(
        None,
        description='InitContainers is list of init containers to be added to a pod during its restore.',
    )
    timeout: Optional[str] = Field(
        None,
        description='Timeout defines the maximum amount of time Velero should wait for the initContainers to complete.',
    )


class PostHook(BaseModel):
    exec: Optional[Exec] = Field(None, description='Exec defines an exec restore hook.')
    init: Optional[Init] = Field(None, description='Init defines an init restore hook.')


class Resource(BaseModel):
    excludedNamespaces: Optional[Any] = Field(
        None,
        description='ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.',
    )
    excludedResources: Optional[Any] = Field(
        None,
        description='ExcludedResources specifies the resources to which this hook spec does not apply.',
    )
    includedNamespaces: Optional[Any] = Field(
        None,
        description='IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies to all namespaces.',
    )
    includedResources: Optional[Any] = Field(
        None,
        description='IncludedResources specifies the resources to which this hook spec applies. If empty, it applies to all resources.',
    )
    labelSelector: Optional[Any] = Field(
        None,
        description='LabelSelector, if specified, filters the resources to which this hook spec applies.',
    )
    name: str = Field(..., description='Name is the name of this hook.')
    postHooks: Optional[List[PostHook]] = Field(
        None,
        description='PostHooks is a list of RestoreResourceHooks to execute during and after restoring a resource.',
    )


class HooksModel(BaseModel):
    resources: Optional[List[Resource]] = None


class SpecModel6(BaseModel):
    backupName: str = Field(
        ...,
        description='BackupName is the unique name of the Velero backup to restore from.',
    )
    excludedNamespaces: Optional[Any] = Field(
        None,
        description='ExcludedNamespaces contains a list of namespaces that are not included in the restore.',
    )
    excludedResources: Optional[Any] = Field(
        None,
        description='ExcludedResources is a slice of resource names that are not included in the restore.',
    )
    existingResourcePolicy: Optional[Any] = Field(
        None,
        description='ExistingResourcePolicy specifies the restore behaviour for the kubernetes resource to be restored',
    )
    hooks: Optional[HooksModel] = Field(
        None,
        description='Hooks represent custom behaviors that should be executed during or post restore.',
    )
    includeClusterResources: Optional[Any] = Field(
        None,
        description='IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the restore. If null, defaults to true.',
    )
    includedNamespaces: Optional[Any] = Field(
        None,
        description='IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.',
    )
    includedResources: Optional[Any] = Field(
        None,
        description='IncludedResources is a slice of resource names to include in the restore. If empty, all resources in the backup are included.',
    )
    labelSelector: Optional[Any] = Field(
        None,
        description='LabelSelector is a metav1.LabelSelector to filter with when restoring individual objects from the backup. If empty or nil, all objects are included. Optional.',
    )
    namespaceMapping: Optional[Dict[str, str]] = Field(
        None,
        description='NamespaceMapping is a map of source namespace names to target namespace names to restore into. Any source namespaces not included in the map will be restored into namespaces of the same name.',
    )
    orLabelSelectors: Optional[Any] = Field(
        None,
        description='OrLabelSelectors is list of metav1.LabelSelector to filter with when restoring individual objects from the backup. If multiple provided they will be joined by the OR operator. LabelSelector as well as OrLabelSelectors cannot co-exist in restore request, only one of them can be used',
    )
    preserveNodePorts: Optional[Any] = Field(
        None,
        description='PreserveNodePorts specifies whether to restore old nodePorts from backup.',
    )
    restorePVs: Optional[Any] = Field(
        None,
        description='RestorePVs specifies whether to restore all included PVs from snapshot (via the cloudprovider).',
    )
    restoreStatus: Optional[Any] = Field(
        None,
        description='RestoreStatus specifies which resources we should restore the status field. If nil, no objects are included. Optional.',
    )
    scheduleName: Optional[str] = Field(
        None,
        description='ScheduleName is the unique name of the Velero schedule to restore from. If specified, and BackupName is empty, Velero will restore from the most recent successful backup created from this schedule.',
    )


class PhaseModel6(Enum):
    New = 'New'
    FailedValidation = 'FailedValidation'
    InProgress = 'InProgress'
    Completed = 'Completed'
    PartiallyFailed = 'PartiallyFailed'
    Failed = 'Failed'


class StatusModel6(BaseModel):
    completionTimestamp: Optional[Any] = Field(
        None,
        description="CompletionTimestamp records the time the restore operation was completed. Completion time is recorded even on failed restore. The server's time is used for StartTimestamps",
    )
    errors: Optional[int] = Field(
        None,
        description='Errors is a count of all error messages that were generated during execution of the restore. The actual errors are stored in object storage.',
    )
    failureReason: Optional[str] = Field(
        None,
        description='FailureReason is an error that caused the entire restore to fail.',
    )
    phase: Optional[PhaseModel6] = Field(
        None, description='Phase is the current state of the Restore'
    )
    progress: Optional[Any] = Field(
        None,
        description="Progress contains information about the restore's execution progress. Note that this information is best-effort only -- if Velero fails to update it during a restore for any reason, it may be inaccurate/stale.",
    )
    startTimestamp: Optional[Any] = Field(
        None,
        description="StartTimestamp records the time the restore operation was started. The server's time is used for StartTimestamps",
    )
    validationErrors: Optional[Any] = Field(
        None,
        description='ValidationErrors is a slice of all validation errors (if applicable)',
    )
    warnings: Optional[int] = Field(
        None,
        description='Warnings is a count of all warning messages that were generated during execution of the restore. The actual warnings are stored in object storage.',
    )


class HooksModel1(BaseModel):
    resources: Optional[Any] = Field(
        None,
        description='Resources are hooks that should be executed when backing up individual instances of a resource.',
    )


class MetadataModel(BaseModel):
    labels: Optional[Dict[str, str]] = None


class Template(BaseModel):
    csiSnapshotTimeout: Optional[str] = Field(
        None,
        description='CSISnapshotTimeout specifies the time used to wait for CSI VolumeSnapshot status turns to ReadyToUse during creation, before returning error as timeout. The default value is 10 minute.',
    )
    defaultVolumesToRestic: Optional[bool] = Field(
        None,
        description='DefaultVolumesToRestic specifies whether restic should be used to take a backup of all pod volumes by default.',
    )
    excludedNamespaces: Optional[Any] = Field(
        None,
        description='ExcludedNamespaces contains a list of namespaces that are not included in the backup.',
    )
    excludedResources: Optional[Any] = Field(
        None,
        description='ExcludedResources is a slice of resource names that are not included in the backup.',
    )
    hooks: Optional[HooksModel1] = Field(
        None,
        description='Hooks represent custom behaviors that should be executed at different phases of the backup.',
    )
    includeClusterResources: Optional[Any] = Field(
        None,
        description='IncludeClusterResources specifies whether cluster-scoped resources should be included for consideration in the backup.',
    )
    includedNamespaces: Optional[Any] = Field(
        None,
        description='IncludedNamespaces is a slice of namespace names to include objects from. If empty, all namespaces are included.',
    )
    includedResources: Optional[Any] = Field(
        None,
        description='IncludedResources is a slice of resource names to include in the backup. If empty, all resources are included.',
    )
    labelSelector: Optional[Any] = Field(
        None,
        description='LabelSelector is a metav1.LabelSelector to filter with when adding individual objects to the backup. If empty or nil, all objects are included. Optional.',
    )
    metadata: Optional[MetadataModel] = None
    orLabelSelectors: Optional[Any] = Field(
        None,
        description='OrLabelSelectors is list of metav1.LabelSelector to filter with when adding individual objects to the backup. If multiple provided they will be joined by the OR operator. LabelSelector as well as OrLabelSelectors cannot co-exist in backup request, only one of them can be used.',
    )
    orderedResources: Optional[Any] = Field(
        None,
        description='OrderedResources specifies the backup order of resources of specific Kind. The map key is the Kind name and value is a list of resource names separated by commas. Each resource name has format "namespace/resourcename".  For cluster resources, simply use "resourcename".',
    )
    snapshotVolumes: Optional[Any] = Field(
        None,
        description="SnapshotVolumes specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.",
    )
    storageLocation: Optional[str] = Field(
        None,
        description='StorageLocation is a string containing the name of a BackupStorageLocation where the backup should be stored.',
    )
    ttl: Optional[str] = Field(
        None,
        description='TTL is a time.Duration-parseable string describing how long the Backup should be retained for.',
    )
    volumeSnapshotLocations: Optional[List[str]] = Field(
        None,
        description='VolumeSnapshotLocations is a list containing names of VolumeSnapshotLocations associated with this backup.',
    )


class SpecModel7(BaseModel):
    schedule: str = Field(
        ...,
        description='Schedule is a Cron expression defining when to run the Backup.',
    )
    template: Template = Field(
        ...,
        description='Template is the definition of the Backup to be run on the provided schedule',
    )
    useOwnerReferencesInBackup: Optional[Any] = Field(
        None,
        description='UseOwnerReferencesBackup specifies whether to use OwnerReferences on backups created by this Schedule.',
    )


class PhaseModel7(Enum):
    New = 'New'
    Enabled = 'Enabled'
    FailedValidation = 'FailedValidation'


class StatusModel7(BaseModel):
    lastBackup: Optional[Any] = Field(
        None,
        description='LastBackup is the last time a Backup was run for this Schedule schedule',
    )
    phase: Optional[PhaseModel7] = Field(
        None, description='Phase is the current phase of the Schedule'
    )
    validationErrors: Optional[List[str]] = Field(
        None,
        description='ValidationErrors is a slice of all validation errors (if applicable)',
    )


class PhaseModel8(Enum):
    New = 'New'
    Processed = 'Processed'


class StatusModel8(BaseModel):
    phase: Optional[PhaseModel8] = Field(
        None,
        description='Phase is the current lifecycle phase of the ServerStatusRequest.',
    )
    plugins: Optional[Any] = Field(
        None,
        description='Plugins list information about the plugins running on the Velero server',
    )
    processedTimestamp: Optional[Any] = Field(
        None,
        description='ProcessedTimestamp is when the ServerStatusRequest was processed by the ServerStatusRequestController.',
    )
    serverVersion: Optional[str] = Field(
        None, description='ServerVersion is the Velero server version.'
    )


class SpecModel8(BaseModel):
    config: Optional[Dict[str, str]] = Field(
        None, description='Config is for provider-specific configuration fields.'
    )
    provider: str = Field(
        ..., description='Provider is the provider of the volume storage.'
    )


class PhaseModel9(Enum):
    Available = 'Available'
    Unavailable = 'Unavailable'


class StatusModel9(BaseModel):
    phase: Optional[PhaseModel9] = Field(
        None,
        description='VolumeSnapshotLocationPhase is the lifecycle phase of a Velero VolumeSnapshotLocation.',
    )


class Backup(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[Spec] = Field(
        None, description='BackupSpec defines the specification for a Velero backup.'
    )
    status: Optional[Status] = Field(
        None, description='BackupStatus captures the current status of a Velero backup.'
    )


class BackupList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Backup] = Field(
        ...,
        description='List of backups. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class BackupStorageLocation(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel] = Field(
        None,
        description='BackupStorageLocationSpec defines the desired state of a Velero BackupStorageLocation',
    )
    status: Optional[StatusModel] = Field(
        None,
        description='BackupStorageLocationStatus defines the observed state of BackupStorageLocation',
    )


class BackupStorageLocationList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[BackupStorageLocation] = Field(
        ...,
        description='List of backupstoragelocations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class DeleteBackupRequest(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel1] = Field(
        None,
        description='DeleteBackupRequestSpec is the specification for which backups to delete.',
    )
    status: Optional[StatusModel1] = Field(
        None,
        description='DeleteBackupRequestStatus is the current status of a DeleteBackupRequest.',
    )


class DeleteBackupRequestList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[DeleteBackupRequest] = Field(
        ...,
        description='List of deletebackuprequests. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class DownloadRequest(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel2] = Field(
        None,
        description='DownloadRequestSpec is the specification for a download request.',
    )
    status: Optional[StatusModel2] = Field(
        None,
        description='DownloadRequestStatus is the current status of a DownloadRequest.',
    )


class DownloadRequestList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[DownloadRequest] = Field(
        ...,
        description='List of downloadrequests. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class PodVolumeBackup(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel3] = Field(
        None,
        description='PodVolumeBackupSpec is the specification for a PodVolumeBackup.',
    )
    status: Optional[StatusModel3] = Field(
        None,
        description='PodVolumeBackupStatus is the current status of a PodVolumeBackup.',
    )


class PodVolumeBackupList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[PodVolumeBackup] = Field(
        ...,
        description='List of podvolumebackups. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class PodVolumeRestore(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel4] = Field(
        None,
        description='PodVolumeRestoreSpec is the specification for a PodVolumeRestore.',
    )
    status: Optional[StatusModel4] = Field(
        None,
        description='PodVolumeRestoreStatus is the current status of a PodVolumeRestore.',
    )


class PodVolumeRestoreList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[PodVolumeRestore] = Field(
        ...,
        description='List of podvolumerestores. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class ResticRepository(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel5] = Field(
        None,
        description='ResticRepositorySpec is the specification for a ResticRepository.',
    )
    status: Optional[StatusModel5] = Field(
        None,
        description='ResticRepositoryStatus is the current status of a ResticRepository.',
    )


class ResticRepositoryList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ResticRepository] = Field(
        ...,
        description='List of resticrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Restore(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel6] = Field(
        None, description='RestoreSpec defines the specification for a Velero restore.'
    )
    status: Optional[StatusModel6] = Field(
        None,
        description='RestoreStatus captures the current status of a Velero restore',
    )


class RestoreList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Restore] = Field(
        ...,
        description='List of restores. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Schedule(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel7] = Field(
        None, description='ScheduleSpec defines the specification for a Velero schedule'
    )
    status: Optional[StatusModel7] = Field(
        None,
        description='ScheduleStatus captures the current state of a Velero schedule',
    )


class ScheduleList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Schedule] = Field(
        ...,
        description='List of schedules. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class ServerStatusRequest(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[Dict[str, Any]] = Field(
        None,
        description='ServerStatusRequestSpec is the specification for a ServerStatusRequest.',
    )
    status: Optional[StatusModel8] = Field(
        None,
        description='ServerStatusRequestStatus is the current status of a ServerStatusRequest.',
    )


class ServerStatusRequestList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ServerStatusRequest] = Field(
        ...,
        description='List of serverstatusrequests. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class VolumeSnapshotLocation(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel8] = Field(
        None,
        description='VolumeSnapshotLocationSpec defines the specification for a Velero VolumeSnapshotLocation.',
    )
    status: Optional[StatusModel9] = Field(
        None,
        description='VolumeSnapshotLocationStatus describes the current status of a Velero VolumeSnapshotLocation.',
    )


class VolumeSnapshotLocationList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[VolumeSnapshotLocation] = Field(
        ...,
        description='List of volumesnapshotlocations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
