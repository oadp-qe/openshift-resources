# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, conint, constr

from ...k8s.apimachinery.pkg.apis.meta import v1


class Spec(BaseModel):
    numberOfUsersToReport: Optional[conint(ge=0, le=100)] = Field(
        None,
        description='numberOfUsersToReport is the number of users to include in the report. If unspecified or zero, the default is ten.  This is default is subject to change.',
    )


class Status(Enum):
    True_ = 'True'
    False_ = 'False'
    Unknown = 'Unknown'


class Condition(BaseModel):
    lastTransitionTime: datetime = Field(
        ...,
        description='lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.',
    )
    message: constr(max_length=32768) = Field(
        ...,
        description='message is a human readable message indicating details about the transition. This may be an empty string.',
    )
    observedGeneration: Optional[conint(ge=0)] = Field(
        None,
        description='observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.',
    )
    reason: constr(
        regex=r'^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$', min_length=1, max_length=1024
    ) = Field(
        ...,
        description="reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
    )
    status: Status = Field(
        ..., description='status of the condition, one of True, False, Unknown.'
    )
    type: constr(
        regex=r'^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
        max_length=316,
    ) = Field(
        ...,
        description='type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)',
    )


class ByVerbItem(BaseModel):
    requestCount: Optional[conint(ge=0)] = Field(
        None, description='requestCount of requests for verb.'
    )
    verb: Optional[constr(max_length=20)] = Field(
        None, description='verb of API request (get, list, create, etc...)'
    )


class ByUserItem(BaseModel):
    byVerb: Optional[List[ByVerbItem]] = Field(
        None, description='byVerb details by verb.', max_items=10
    )
    requestCount: Optional[conint(ge=0)] = Field(
        None, description='requestCount of requests by the user across all verbs.'
    )
    userAgent: Optional[constr(max_length=1024)] = Field(
        None,
        description="userAgent that made the request. The same user often has multiple binaries which connect (pods with many containers).  The different binaries will have different userAgents, but the same user.  In addition, we have userAgents with version information embedded and the userName isn't likely to change.",
    )
    username: Optional[constr(max_length=512)] = Field(
        None, description='userName that made the request.'
    )


class ByNodeItem(BaseModel):
    byUser: Optional[List[ByUserItem]] = Field(
        None,
        description='byUser contains request details by top .spec.numberOfUsersToReport users. Note that because in the case of an apiserver, restart the list of top users is determined on a best-effort basis, the list might be imprecise. In addition, some system users may be explicitly included in the list.',
        max_items=500,
    )
    nodeName: Optional[constr(min_length=1, max_length=512)] = Field(
        None, description='nodeName where the request are being handled.'
    )
    requestCount: Optional[conint(ge=0)] = Field(
        None,
        description='requestCount is a sum of all requestCounts across all users, even those outside of the top 10 users.',
    )


class CurrentHour(BaseModel):
    byNode: Optional[List[ByNodeItem]] = Field(
        None, description='byNode contains logs of requests per node.', max_items=512
    )
    requestCount: Optional[conint(ge=0)] = Field(
        None, description='requestCount is a sum of all requestCounts across nodes.'
    )


class ByVerbItemModel(BaseModel):
    requestCount: Optional[conint(ge=0)] = Field(
        None, description='requestCount of requests for verb.'
    )
    verb: Optional[constr(max_length=20)] = Field(
        None, description='verb of API request (get, list, create, etc...)'
    )


class ByUserItemModel(BaseModel):
    byVerb: Optional[List[ByVerbItemModel]] = Field(
        None, description='byVerb details by verb.', max_items=10
    )
    requestCount: Optional[conint(ge=0)] = Field(
        None, description='requestCount of requests by the user across all verbs.'
    )
    userAgent: Optional[constr(max_length=1024)] = Field(
        None,
        description="userAgent that made the request. The same user often has multiple binaries which connect (pods with many containers).  The different binaries will have different userAgents, but the same user.  In addition, we have userAgents with version information embedded and the userName isn't likely to change.",
    )
    username: Optional[constr(max_length=512)] = Field(
        None, description='userName that made the request.'
    )


class ByNodeItemModel(BaseModel):
    byUser: Optional[List[ByUserItemModel]] = Field(
        None,
        description='byUser contains request details by top .spec.numberOfUsersToReport users. Note that because in the case of an apiserver, restart the list of top users is determined on a best-effort basis, the list might be imprecise. In addition, some system users may be explicitly included in the list.',
        max_items=500,
    )
    nodeName: Optional[constr(min_length=1, max_length=512)] = Field(
        None, description='nodeName where the request are being handled.'
    )
    requestCount: Optional[conint(ge=0)] = Field(
        None,
        description='requestCount is a sum of all requestCounts across all users, even those outside of the top 10 users.',
    )


class Last24hItem(BaseModel):
    byNode: Optional[List[ByNodeItemModel]] = Field(
        None, description='byNode contains logs of requests per node.', max_items=512
    )
    requestCount: Optional[conint(ge=0)] = Field(
        None, description='requestCount is a sum of all requestCounts across nodes.'
    )


class StatusModel(BaseModel):
    conditions: Optional[List[Condition]] = Field(
        None,
        description='conditions contains details of the current status of this API Resource.',
    )
    currentHour: Optional[CurrentHour] = Field(
        None,
        description='currentHour contains request history for the current hour. This is porcelain to make the API easier to read by humans seeing if they addressed a problem. This field is reset on the hour.',
    )
    last24h: Optional[List[Last24hItem]] = Field(
        None,
        description='last24h contains request history for the last 24 hours, indexed by the hour, so 12:00AM-12:59 is in index 0, 6am-6:59am is index 6, etc. The index of the current hour is updated live and then duplicated into the requestsLastHour field.',
        max_items=24,
    )
    removedInRelease: Optional[
        constr(regex=r'^[0-9][0-9]*\.[0-9][0-9]*$', min_length=0, max_length=64)
    ] = Field(None, description='removedInRelease is when the API will be removed.')
    requestCount: Optional[conint(ge=0)] = Field(
        None,
        description='requestCount is a sum of all requestCounts across all current hours, nodes, and users.',
    )


class APIRequestCount(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Spec = Field(
        ..., description='spec defines the characteristics of the resource.'
    )
    status: Optional[StatusModel] = Field(
        None, description='status contains the observed state of the resource.'
    )


class APIRequestCountList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[APIRequestCount] = Field(
        ...,
        description='List of apirequestcounts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
