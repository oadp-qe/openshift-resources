# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, conint, constr

from ....k8s.apimachinery.pkg.apis.meta import v1


class Address(BaseModel):
    gateway: Optional[str] = Field(
        None,
        description='IP address of the next-hop gateway, if it cannot be automatically determined. Can be IPv4 or IPv6.',
    )
    ip: str = Field(
        ...,
        description="IP is the address to configure on the router's interface. Can be IPv4 or IPv6.",
    )


class Mode(Enum):
    Redirect = 'Redirect'


class ModeModel(Enum):
    Bridge = 'Bridge'
    Private = 'Private'
    VEPA = 'VEPA'
    Passthru = 'Passthru'


class Macvlan(BaseModel):
    master: Optional[str] = Field(
        None,
        description='Name of the master interface. Need not be specified if it can be inferred from the IP address.',
    )
    mode: ModeModel = Field(
        ...,
        description='Mode depicts the mode that is used for the macvlan interface; one of Bridge|Private|VEPA|Passthru. The default mode is "Bridge".',
    )


class NetworkInterface(BaseModel):
    macvlan: Optional[Macvlan] = Field(
        None, description='Arguments specific to the interfaceType macvlan'
    )


class Protocol(Enum):
    TCP = 'TCP'
    UDP = 'UDP'
    SCTP = 'SCTP'


class RedirectRule(BaseModel):
    destinationIP: str = Field(
        ...,
        description="IP specifies the remote destination's IP address. Can be IPv4 or IPv6.",
    )
    port: conint(ge=1, le=65535) = Field(
        ...,
        description='Port is the port number to which clients should send traffic to be redirected.',
    )
    protocol: Protocol = Field(..., description='Protocol can be TCP, SCTP or UDP.')
    targetPort: Optional[conint(ge=1, le=65535)] = Field(
        None,
        description='TargetPort allows specifying the port number on the remote destination to which the traffic gets redirected to. If unspecified, the value from "Port" is used.',
    )


class Redirect(BaseModel):
    fallbackIP: Optional[str] = Field(
        None,
        description="FallbackIP specifies the remote destination's IP address. Can be IPv4 or IPv6. If no redirect rules are specified, all traffic from the router are redirected to this IP. If redirect rules are specified, then any connections on any other port (undefined in the rules) on the router will be redirected to this IP. If redirect rules are specified and no fallback IP is provided, connections on other ports will simply be rejected.",
    )
    redirectRules: Optional[List[RedirectRule]] = Field(
        None,
        description='List of L4RedirectRules that define the DNAT redirection from the pod to the destination in redirect mode.',
    )


class Spec(BaseModel):
    addresses: List[Address] = Field(
        ...,
        description="List of IP addresses to configure on the pod's secondary interface.",
    )
    mode: Mode = Field(
        ...,
        description='Mode depicts the mode that is used for the egress router. The default mode is "Redirect" and is the only supported mode currently.',
    )
    networkInterface: NetworkInterface = Field(
        ...,
        description='Specification of interface to create/use. The default is macvlan. Currently only macvlan is supported.',
    )
    redirect: Optional[Redirect] = Field(
        None,
        description='Redirect represents the configuration parameters specific to redirect mode.',
    )


class Status(Enum):
    True_ = 'True'
    False_ = 'False'
    Unknown = 'Unknown'


class Type(Enum):
    Available = 'Available'
    Progressing = 'Progressing'
    Degraded = 'Degraded'


class Condition(BaseModel):
    lastTransitionTime: Optional[Any] = Field(
        None,
        description='LastTransitionTime is the time of the last update to the current status property.',
    )
    message: Optional[str] = Field(
        None,
        description='Message provides additional information about the current condition. This is only to be consumed by humans.  It may contain Line Feed characters (U+000A), which should be rendered as new lines.',
    )
    reason: Optional[str] = Field(
        None,
        description="Reason is the CamelCase reason for the condition's current status.",
    )
    status: Status = Field(
        ..., description='Status of the condition, one of True, False, Unknown.'
    )
    type: Type = Field(
        ...,
        description='Type specifies the aspect reported by this condition; one of Available, Progressing, Degraded',
    )


class StatusModel(BaseModel):
    conditions: List[Condition] = Field(
        ..., description='Observed status of the egress router'
    )


class TargetCert(BaseModel):
    commonName: constr(min_length=1) = Field(
        ..., description="commonName is the value in the certificate's CN"
    )


class SpecModel(BaseModel):
    targetCert: TargetCert = Field(
        ...,
        description='targetCert configures the certificate signed by the CA. It will have both ClientAuth and ServerAuth enabled',
    )


class EgressRouter(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Spec = Field(..., description='Specification of the desired egress router.')
    status: Optional[StatusModel] = Field(
        None, description='Observed status of EgressRouter.'
    )


class EgressRouterList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[EgressRouter] = Field(
        ...,
        description='List of egressrouters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class OperatorPKI(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel = Field(
        ..., description='OperatorPKISpec is the PKI configuration.'
    )
    status: Optional[Dict[str, Any]] = Field(
        None, description='OperatorPKIStatus is not implemented.'
    )


class OperatorPKIList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[OperatorPKI] = Field(
        ...,
        description='List of operatorpkis. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
