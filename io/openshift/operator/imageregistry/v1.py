# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, constr

from ....k8s.apimachinery.pkg.apis.meta import v1


class MatchExpression(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class MatchField(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class Preference(BaseModel):
    matchExpressions: Optional[List[MatchExpression]] = Field(
        None, description="A list of node selector requirements by node's labels."
    )
    matchFields: Optional[List[MatchField]] = Field(
        None, description="A list of node selector requirements by node's fields."
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItem(BaseModel):
    preference: Preference = Field(
        ...,
        description='A node selector term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.',
    )


class MatchExpressionModel(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class MatchFieldModel(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class NodeSelectorTerm(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel]] = Field(
        None, description="A list of node selector requirements by node's labels."
    )
    matchFields: Optional[List[MatchFieldModel]] = Field(
        None, description="A list of node selector requirements by node's fields."
    )


class RequiredDuringSchedulingIgnoredDuringExecution(BaseModel):
    nodeSelectorTerms: List[NodeSelectorTerm] = Field(
        ..., description='Required. A list of node selector terms. The terms are ORed.'
    )


class NodeAffinity(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItem]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        RequiredDuringSchedulingIgnoredDuringExecution
    ] = Field(
        None,
        description='If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.',
    )


class MatchExpressionModel1(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel1]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel2(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel2]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class PodAffinityTerm(BaseModel):
    labelSelector: Optional[LabelSelector] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelector] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace".',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItemModel(BaseModel):
    podAffinityTerm: PodAffinityTerm = Field(
        ...,
        description='Required. A pod affinity term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
    )


class MatchExpressionModel3(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel3]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel4(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel4]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class RequiredDuringSchedulingIgnoredDuringExecutionItem(BaseModel):
    labelSelector: Optional[LabelSelectorModel] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace".',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PodAffinity(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItemModel]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        List[RequiredDuringSchedulingIgnoredDuringExecutionItem]
    ] = Field(
        None,
        description='If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
    )


class MatchExpressionModel5(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel1(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel5]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel6(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel1(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel6]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class PodAffinityTermModel(BaseModel):
    labelSelector: Optional[LabelSelectorModel1] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel1] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace".',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItemModel1(BaseModel):
    podAffinityTerm: PodAffinityTermModel = Field(
        ...,
        description='Required. A pod affinity term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
    )


class MatchExpressionModel7(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel2(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel7]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel8(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel2(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel8]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class RequiredDuringSchedulingIgnoredDuringExecutionItemModel(BaseModel):
    labelSelector: Optional[LabelSelectorModel2] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel2] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace".',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PodAntiAffinity(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItemModel1]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        List[RequiredDuringSchedulingIgnoredDuringExecutionItemModel]
    ] = Field(
        None,
        description='If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
    )


class Affinity(BaseModel):
    nodeAffinity: Optional[NodeAffinity] = Field(
        None, description='Describes node affinity scheduling rules for the pod.'
    )
    podAffinity: Optional[PodAffinity] = Field(
        None,
        description='Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).',
    )
    podAntiAffinity: Optional[PodAntiAffinity] = Field(
        None,
        description='Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).',
    )


class LogLevel(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class OperatorLogLevel(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class Proxy(BaseModel):
    http: Optional[str] = Field(
        None,
        description='http defines the proxy to be used by the image registry when accessing HTTP endpoints.',
    )
    https: Optional[str] = Field(
        None,
        description='https defines the proxy to be used by the image registry when accessing HTTPS endpoints.',
    )
    noProxy: Optional[str] = Field(
        None,
        description="noProxy defines a comma-separated list of host names that shouldn't go through any proxy.",
    )


class Read(BaseModel):
    maxInQueue: Optional[int] = Field(
        None,
        description='maxInQueue sets the maximum queued api requests to the registry.',
    )
    maxRunning: Optional[int] = Field(
        None,
        description='maxRunning sets the maximum in flight api requests to the registry.',
    )
    maxWaitInQueue: Optional[str] = Field(
        None,
        description='maxWaitInQueue sets the maximum time a request can wait in the queue before being rejected.',
    )


class Write(BaseModel):
    maxInQueue: Optional[int] = Field(
        None,
        description='maxInQueue sets the maximum queued api requests to the registry.',
    )
    maxRunning: Optional[int] = Field(
        None,
        description='maxRunning sets the maximum in flight api requests to the registry.',
    )
    maxWaitInQueue: Optional[str] = Field(
        None,
        description='maxWaitInQueue sets the maximum time a request can wait in the queue before being rejected.',
    )


class Requests(BaseModel):
    read: Optional[Read] = Field(
        None, description="read defines limits for image registry's reads."
    )
    write: Optional[Write] = Field(
        None, description="write defines limits for image registry's writes."
    )


class Resources(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class Route(BaseModel):
    hostname: Optional[str] = Field(None, description='hostname for the route.')
    name: str = Field(..., description='name of the route to be created.')
    secretName: Optional[str] = Field(
        None,
        description='secretName points to secret containing the certificates to be used by the route.',
    )


class Azure(BaseModel):
    accountName: Optional[str] = Field(
        None, description='accountName defines the account to be used by the registry.'
    )
    cloudName: Optional[str] = Field(
        None,
        description='cloudName is the name of the Azure cloud environment to be used by the registry. If empty, the operator will set it based on the infrastructure object.',
    )
    container: Optional[
        constr(regex=r'^[0-9a-z]+(-[0-9a-z]+)*$', min_length=3, max_length=63)
    ] = Field(
        None, description="container defines Azure's container to be used by registry."
    )


class Gcs(BaseModel):
    bucket: Optional[str] = Field(
        None,
        description="bucket is the bucket name in which you want to store the registry's data. Optional, will be generated if not provided.",
    )
    keyID: Optional[str] = Field(
        None,
        description='keyID is the KMS key ID to use for encryption. Optional, buckets are encrypted by default on GCP. This allows for the use of a custom encryption key.',
    )
    projectID: Optional[str] = Field(
        None,
        description='projectID is the Project ID of the GCP project that this bucket should be associated with.',
    )
    region: Optional[str] = Field(
        None,
        description='region is the GCS location in which your bucket exists. Optional, will be set based on the installed GCS Region.',
    )


class Ibmcos(BaseModel):
    bucket: Optional[str] = Field(
        None,
        description="bucket is the bucket name in which you want to store the registry's data. Optional, will be generated if not provided.",
    )
    location: Optional[str] = Field(
        None,
        description='location is the IBM Cloud location in which your bucket exists. Optional, will be set based on the installed IBM Cloud location.',
    )
    resourceGroupName: Optional[str] = Field(
        None,
        description='resourceGroupName is the name of the IBM Cloud resource group that this bucket and its service instance is associated with. Optional, will be set based on the installed IBM Cloud resource group.',
    )
    resourceKeyCRN: Optional[
        constr(regex=r'^crn:.+:.+:.+:cloud-object-storage:.+:.+:.+:resource-key:.+$')
    ] = Field(
        None,
        description='resourceKeyCRN is the CRN of the IBM Cloud resource key that is created for the service instance. Commonly referred as a service credential and must contain HMAC type credentials. Optional, will be computed if not provided.',
    )
    serviceInstanceCRN: Optional[
        constr(regex=r'^crn:.+:.+:.+:cloud-object-storage:.+:.+:.+::$')
    ] = Field(
        None,
        description='serviceInstanceCRN is the CRN of the IBM Cloud Object Storage service instance that this bucket is associated with. Optional, will be computed if not provided.',
    )


class Kms(BaseModel):
    keyID: constr(min_length=1) = Field(
        ..., description='KeyID holds the KMS encryption key ID'
    )


class Method(Enum):
    KMS = 'KMS'
    AES256 = 'AES256'


class Encryption(BaseModel):
    kms: Optional[Kms] = Field(
        None,
        description='KMS (key management service) is an encryption type that holds the struct for KMS KeyID',
    )
    method: Optional[Method] = Field(
        None,
        description='Method defines the different encrytion modes available Empty value means no opinion and the platform chooses the a default, which is subject to change over time. Currently the default is `AES256`.',
    )


class EndpointAccessibility(Enum):
    Internal = 'Internal'
    Public = 'Public'
    _ = ''


class Oss(BaseModel):
    bucket: Optional[
        constr(regex=r'^[0-9a-z]+(-[0-9a-z]+)*$', min_length=3, max_length=63)
    ] = Field(
        None,
        description="Bucket is the bucket name in which you want to store the registry's data. About Bucket naming, more details you can look at the [official documentation](https://www.alibabacloud.com/help/doc-detail/257087.htm) Empty value means no opinion and the platform chooses the a default, which is subject to change over time. Currently the default will be autogenerated in the form of <clusterid>-image-registry-<region>-<random string 27 chars>",
    )
    encryption: Optional[Encryption] = Field(
        None,
        description='Encryption specifies whether you would like your data encrypted on the server side. More details, you can look cat the [official documentation](https://www.alibabacloud.com/help/doc-detail/117914.htm)',
    )
    endpointAccessibility: Optional[EndpointAccessibility] = Field(
        None,
        description='EndpointAccessibility specifies whether the registry use the OSS VPC internal endpoint Empty value means no opinion and the platform chooses the a default, which is subject to change over time. Currently the default is `Internal`.',
    )
    region: Optional[str] = Field(
        None,
        description='Region is the Alibaba Cloud Region in which your bucket exists. For a list of regions, you can look at the [official documentation](https://www.alibabacloud.com/help/doc-detail/31837.html). Empty value means no opinion and the platform chooses the a default, which is subject to change over time. Currently the default will be based on the installed Alibaba Cloud Region.',
    )


class Pvc(BaseModel):
    claim: Optional[str] = Field(
        None, description="claim defines the Persisent Volume Claim's name to be used."
    )


class PrivateKey(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CloudFront(BaseModel):
    baseURL: str = Field(
        ...,
        description='baseURL contains the SCHEME://HOST[/PATH] at which Cloudfront is served.',
    )
    duration: Optional[str] = Field(
        None, description='duration is the duration of the Cloudfront session.'
    )
    keypairID: str = Field(..., description='keypairID is key pair ID provided by AWS.')
    privateKey: PrivateKey = Field(
        ...,
        description='privateKey points to secret containing the private key, provided by AWS.',
    )


class TrustedCA(BaseModel):
    name: Optional[
        constr(
            regex=r'^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
            max_length=253,
        )
    ] = Field(
        None,
        description='name is the metadata.name of the referenced config map. This field must adhere to standard config map naming restrictions. The name must consist solely of alphanumeric characters, hyphens (-) and periods (.). It has a maximum length of 253 characters. If this field is not specified or is empty string, the default trust bundle will be used.',
    )


class S3(BaseModel):
    bucket: Optional[str] = Field(
        None,
        description="bucket is the bucket name in which you want to store the registry's data. Optional, will be generated if not provided.",
    )
    cloudFront: Optional[CloudFront] = Field(
        None,
        description='cloudFront configures Amazon Cloudfront as the storage middleware in a registry.',
    )
    encrypt: Optional[bool] = Field(
        None,
        description='encrypt specifies whether the registry stores the image in encrypted format or not. Optional, defaults to false.',
    )
    keyID: Optional[str] = Field(
        None,
        description='keyID is the KMS key ID to use for encryption. Optional, Encrypt must be true, or this parameter is ignored.',
    )
    region: Optional[str] = Field(
        None,
        description='region is the AWS region in which your bucket exists. Optional, will be set based on the installed AWS Region.',
    )
    regionEndpoint: Optional[str] = Field(
        None,
        description='regionEndpoint is the endpoint for S3 compatible storage services. Optional, defaults based on the Region that is provided.',
    )
    trustedCA: Optional[TrustedCA] = Field(
        None,
        description='trustedCA is a reference to a config map containing a CA bundle. The image registry and its operator use certificates from this bundle to verify S3 server certificates. \n The namespace for the config map referenced by trustedCA is "openshift-config". The key for the bundle in the config map is "ca-bundle.crt".',
    )
    virtualHostedStyle: Optional[bool] = Field(
        None,
        description='virtualHostedStyle enables using S3 virtual hosted style bucket paths with a custom RegionEndpoint Optional, defaults to false.',
    )


class Swift(BaseModel):
    authURL: Optional[str] = Field(
        None,
        description='authURL defines the URL for obtaining an authentication token.',
    )
    authVersion: Optional[str] = Field(
        None, description="authVersion specifies the OpenStack Auth's version."
    )
    container: Optional[str] = Field(
        None,
        description="container defines the name of Swift container where to store the registry's data.",
    )
    domain: Optional[str] = Field(
        None,
        description="domain specifies Openstack's domain name for Identity v3 API.",
    )
    domainID: Optional[str] = Field(
        None,
        description="domainID specifies Openstack's domain id for Identity v3 API.",
    )
    regionName: Optional[str] = Field(
        None,
        description="regionName defines Openstack's region in which container exists.",
    )
    tenant: Optional[str] = Field(
        None, description='tenant defines Openstack tenant name to be used by registry.'
    )
    tenantID: Optional[str] = Field(
        None, description='tenant defines Openstack tenant id to be used by registry.'
    )


class Storage(BaseModel):
    azure: Optional[Azure] = Field(
        None, description='azure represents configuration that uses Azure Blob Storage.'
    )
    emptyDir: Optional[Dict[str, Any]] = Field(
        None,
        description="emptyDir represents ephemeral storage on the pod's host node. WARNING: this storage cannot be used with more than 1 replica and is not suitable for production use. When the pod is removed from a node for any reason, the data in the emptyDir is deleted forever.",
    )
    gcs: Optional[Gcs] = Field(
        None, description='gcs represents configuration that uses Google Cloud Storage.'
    )
    ibmcos: Optional[Ibmcos] = Field(
        None,
        description='ibmcos represents configuration that uses IBM Cloud Object Storage.',
    )
    managementState: Optional[constr(regex=r'^(Managed|Unmanaged)$')] = Field(
        None,
        description='managementState indicates if the operator manages the underlying storage unit. If Managed the operator will remove the storage when this operator gets Removed.',
    )
    oss: Optional[Oss] = Field(
        None,
        description='Oss represents configuration that uses Alibaba Cloud Object Storage Service.',
    )
    pvc: Optional[Pvc] = Field(
        None,
        description='pvc represents configuration that uses a PersistentVolumeClaim.',
    )
    s3: Optional[S3] = Field(
        None,
        description='s3 represents configuration that uses Amazon Simple Storage Service.',
    )
    swift: Optional[Swift] = Field(
        None,
        description='swift represents configuration that uses OpenStack Object Storage.',
    )


class Toleration(BaseModel):
    effect: Optional[str] = Field(
        None,
        description='Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
    )
    key: Optional[str] = Field(
        None,
        description='Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
    )
    operator: Optional[str] = Field(
        None,
        description="Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
    )
    tolerationSeconds: Optional[int] = Field(
        None,
        description='TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
    )
    value: Optional[str] = Field(
        None,
        description='Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
    )


class MatchExpressionModel9(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel3(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel9]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class TopologySpreadConstraint(BaseModel):
    labelSelector: Optional[LabelSelectorModel3] = Field(
        None,
        description='LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.',
    )
    maxSkew: int = Field(
        ...,
        description="MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
    )
    minDomains: Optional[int] = Field(
        None,
        description='MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won\'t schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule. \n For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew. \n This is an alpha field and requires enabling MinDomainsInPodTopologySpread feature gate.',
    )
    topologyKey: str = Field(
        ...,
        description='TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes match the node selector. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It\'s a required field.',
    )
    whenUnsatisfiable: str = Field(
        ...,
        description='WhenUnsatisfiable indicates how to deal with a pod if it doesn\'t satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won\'t make it *more* imbalanced. It\'s a required field.',
    )


class Spec(BaseModel):
    affinity: Optional[Affinity] = Field(
        None,
        description='affinity is a group of node affinity scheduling rules for the image registry pod(s).',
    )
    defaultRoute: Optional[bool] = Field(
        None,
        description='defaultRoute indicates whether an external facing route for the registry should be created using the default generated hostname.',
    )
    disableRedirect: Optional[bool] = Field(
        None,
        description='disableRedirect controls whether to route all data through the Registry, rather than redirecting to the backend.',
    )
    httpSecret: Optional[str] = Field(
        None,
        description='httpSecret is the value needed by the registry to secure uploads, generated by default.',
    )
    logLevel: Optional[LogLevel] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    logging: Optional[int] = Field(
        None, description='logging is deprecated, use logLevel instead.'
    )
    managementState: constr(regex=r'^(Managed|Unmanaged|Force|Removed)$') = Field(
        ...,
        description='managementState indicates whether and how the operator should manage the component',
    )
    nodeSelector: Optional[Dict[str, str]] = Field(
        None,
        description='nodeSelector defines the node selection constraints for the registry pod.',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevel] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    proxy: Optional[Proxy] = Field(
        None,
        description='proxy defines the proxy to be used when calling master api, upstream registries, etc.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly indicates whether the registry instance should reject attempts to push new images or delete existing ones.',
    )
    replicas: int = Field(
        ..., description='replicas determines the number of registry instances to run.'
    )
    requests: Optional[Requests] = Field(
        None,
        description='requests controls how many parallel requests a given registry instance will handle before queuing additional requests.',
    )
    resources: Optional[Resources] = Field(
        None,
        description='resources defines the resource requests+limits for the registry pod.',
    )
    rolloutStrategy: Optional[constr(regex=r'^(RollingUpdate|Recreate)$')] = Field(
        None,
        description='rolloutStrategy defines rollout strategy for the image registry deployment.',
    )
    routes: Optional[List[Route]] = Field(
        None,
        description='routes defines additional external facing routes which should be created for the registry.',
    )
    storage: Optional[Storage] = Field(
        None,
        description='storage details for configuring registry storage, e.g. S3 bucket coordinates.',
    )
    tolerations: Optional[List[Toleration]] = Field(
        None, description='tolerations defines the tolerations for the registry pod.'
    )
    topologySpreadConstraints: Optional[List[TopologySpreadConstraint]] = Field(
        None,
        description='topologySpreadConstraints specify how to spread matching pods among the given topology.',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )


class Condition(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class Generation(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class AzureModel(BaseModel):
    accountName: Optional[str] = Field(
        None, description='accountName defines the account to be used by the registry.'
    )
    cloudName: Optional[str] = Field(
        None,
        description='cloudName is the name of the Azure cloud environment to be used by the registry. If empty, the operator will set it based on the infrastructure object.',
    )
    container: Optional[
        constr(regex=r'^[0-9a-z]+(-[0-9a-z]+)*$', min_length=3, max_length=63)
    ] = Field(
        None, description="container defines Azure's container to be used by registry."
    )


class GcsModel(BaseModel):
    bucket: Optional[str] = Field(
        None,
        description="bucket is the bucket name in which you want to store the registry's data. Optional, will be generated if not provided.",
    )
    keyID: Optional[str] = Field(
        None,
        description='keyID is the KMS key ID to use for encryption. Optional, buckets are encrypted by default on GCP. This allows for the use of a custom encryption key.',
    )
    projectID: Optional[str] = Field(
        None,
        description='projectID is the Project ID of the GCP project that this bucket should be associated with.',
    )
    region: Optional[str] = Field(
        None,
        description='region is the GCS location in which your bucket exists. Optional, will be set based on the installed GCS Region.',
    )


class IbmcosModel(BaseModel):
    bucket: Optional[str] = Field(
        None,
        description="bucket is the bucket name in which you want to store the registry's data. Optional, will be generated if not provided.",
    )
    location: Optional[str] = Field(
        None,
        description='location is the IBM Cloud location in which your bucket exists. Optional, will be set based on the installed IBM Cloud location.',
    )
    resourceGroupName: Optional[str] = Field(
        None,
        description='resourceGroupName is the name of the IBM Cloud resource group that this bucket and its service instance is associated with. Optional, will be set based on the installed IBM Cloud resource group.',
    )
    resourceKeyCRN: Optional[
        constr(regex=r'^crn:.+:.+:.+:cloud-object-storage:.+:.+:.+:resource-key:.+$')
    ] = Field(
        None,
        description='resourceKeyCRN is the CRN of the IBM Cloud resource key that is created for the service instance. Commonly referred as a service credential and must contain HMAC type credentials. Optional, will be computed if not provided.',
    )
    serviceInstanceCRN: Optional[
        constr(regex=r'^crn:.+:.+:.+:cloud-object-storage:.+:.+:.+::$')
    ] = Field(
        None,
        description='serviceInstanceCRN is the CRN of the IBM Cloud Object Storage service instance that this bucket is associated with. Optional, will be computed if not provided.',
    )


class KmsModel(BaseModel):
    keyID: constr(min_length=1) = Field(
        ..., description='KeyID holds the KMS encryption key ID'
    )


class MethodModel(Enum):
    KMS = 'KMS'
    AES256 = 'AES256'


class EncryptionModel(BaseModel):
    kms: Optional[KmsModel] = Field(
        None,
        description='KMS (key management service) is an encryption type that holds the struct for KMS KeyID',
    )
    method: Optional[MethodModel] = Field(
        None,
        description='Method defines the different encrytion modes available Empty value means no opinion and the platform chooses the a default, which is subject to change over time. Currently the default is `AES256`.',
    )


class EndpointAccessibilityModel(Enum):
    Internal = 'Internal'
    Public = 'Public'
    _ = ''


class OssModel(BaseModel):
    bucket: Optional[
        constr(regex=r'^[0-9a-z]+(-[0-9a-z]+)*$', min_length=3, max_length=63)
    ] = Field(
        None,
        description="Bucket is the bucket name in which you want to store the registry's data. About Bucket naming, more details you can look at the [official documentation](https://www.alibabacloud.com/help/doc-detail/257087.htm) Empty value means no opinion and the platform chooses the a default, which is subject to change over time. Currently the default will be autogenerated in the form of <clusterid>-image-registry-<region>-<random string 27 chars>",
    )
    encryption: Optional[EncryptionModel] = Field(
        None,
        description='Encryption specifies whether you would like your data encrypted on the server side. More details, you can look cat the [official documentation](https://www.alibabacloud.com/help/doc-detail/117914.htm)',
    )
    endpointAccessibility: Optional[EndpointAccessibilityModel] = Field(
        None,
        description='EndpointAccessibility specifies whether the registry use the OSS VPC internal endpoint Empty value means no opinion and the platform chooses the a default, which is subject to change over time. Currently the default is `Internal`.',
    )
    region: Optional[str] = Field(
        None,
        description='Region is the Alibaba Cloud Region in which your bucket exists. For a list of regions, you can look at the [official documentation](https://www.alibabacloud.com/help/doc-detail/31837.html). Empty value means no opinion and the platform chooses the a default, which is subject to change over time. Currently the default will be based on the installed Alibaba Cloud Region.',
    )


class PvcModel(BaseModel):
    claim: Optional[str] = Field(
        None, description="claim defines the Persisent Volume Claim's name to be used."
    )


class PrivateKeyModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CloudFrontModel(BaseModel):
    baseURL: str = Field(
        ...,
        description='baseURL contains the SCHEME://HOST[/PATH] at which Cloudfront is served.',
    )
    duration: Optional[str] = Field(
        None, description='duration is the duration of the Cloudfront session.'
    )
    keypairID: str = Field(..., description='keypairID is key pair ID provided by AWS.')
    privateKey: PrivateKeyModel = Field(
        ...,
        description='privateKey points to secret containing the private key, provided by AWS.',
    )


class TrustedCAModel(BaseModel):
    name: Optional[
        constr(
            regex=r'^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
            max_length=253,
        )
    ] = Field(
        None,
        description='name is the metadata.name of the referenced config map. This field must adhere to standard config map naming restrictions. The name must consist solely of alphanumeric characters, hyphens (-) and periods (.). It has a maximum length of 253 characters. If this field is not specified or is empty string, the default trust bundle will be used.',
    )


class S3Model(BaseModel):
    bucket: Optional[str] = Field(
        None,
        description="bucket is the bucket name in which you want to store the registry's data. Optional, will be generated if not provided.",
    )
    cloudFront: Optional[CloudFrontModel] = Field(
        None,
        description='cloudFront configures Amazon Cloudfront as the storage middleware in a registry.',
    )
    encrypt: Optional[bool] = Field(
        None,
        description='encrypt specifies whether the registry stores the image in encrypted format or not. Optional, defaults to false.',
    )
    keyID: Optional[str] = Field(
        None,
        description='keyID is the KMS key ID to use for encryption. Optional, Encrypt must be true, or this parameter is ignored.',
    )
    region: Optional[str] = Field(
        None,
        description='region is the AWS region in which your bucket exists. Optional, will be set based on the installed AWS Region.',
    )
    regionEndpoint: Optional[str] = Field(
        None,
        description='regionEndpoint is the endpoint for S3 compatible storage services. Optional, defaults based on the Region that is provided.',
    )
    trustedCA: Optional[TrustedCAModel] = Field(
        None,
        description='trustedCA is a reference to a config map containing a CA bundle. The image registry and its operator use certificates from this bundle to verify S3 server certificates. \n The namespace for the config map referenced by trustedCA is "openshift-config". The key for the bundle in the config map is "ca-bundle.crt".',
    )
    virtualHostedStyle: Optional[bool] = Field(
        None,
        description='virtualHostedStyle enables using S3 virtual hosted style bucket paths with a custom RegionEndpoint Optional, defaults to false.',
    )


class SwiftModel(BaseModel):
    authURL: Optional[str] = Field(
        None,
        description='authURL defines the URL for obtaining an authentication token.',
    )
    authVersion: Optional[str] = Field(
        None, description="authVersion specifies the OpenStack Auth's version."
    )
    container: Optional[str] = Field(
        None,
        description="container defines the name of Swift container where to store the registry's data.",
    )
    domain: Optional[str] = Field(
        None,
        description="domain specifies Openstack's domain name for Identity v3 API.",
    )
    domainID: Optional[str] = Field(
        None,
        description="domainID specifies Openstack's domain id for Identity v3 API.",
    )
    regionName: Optional[str] = Field(
        None,
        description="regionName defines Openstack's region in which container exists.",
    )
    tenant: Optional[str] = Field(
        None, description='tenant defines Openstack tenant name to be used by registry.'
    )
    tenantID: Optional[str] = Field(
        None, description='tenant defines Openstack tenant id to be used by registry.'
    )


class StorageModel(BaseModel):
    azure: Optional[AzureModel] = Field(
        None, description='azure represents configuration that uses Azure Blob Storage.'
    )
    emptyDir: Optional[Dict[str, Any]] = Field(
        None,
        description="emptyDir represents ephemeral storage on the pod's host node. WARNING: this storage cannot be used with more than 1 replica and is not suitable for production use. When the pod is removed from a node for any reason, the data in the emptyDir is deleted forever.",
    )
    gcs: Optional[GcsModel] = Field(
        None, description='gcs represents configuration that uses Google Cloud Storage.'
    )
    ibmcos: Optional[IbmcosModel] = Field(
        None,
        description='ibmcos represents configuration that uses IBM Cloud Object Storage.',
    )
    managementState: Optional[constr(regex=r'^(Managed|Unmanaged)$')] = Field(
        None,
        description='managementState indicates if the operator manages the underlying storage unit. If Managed the operator will remove the storage when this operator gets Removed.',
    )
    oss: Optional[OssModel] = Field(
        None,
        description='Oss represents configuration that uses Alibaba Cloud Object Storage Service.',
    )
    pvc: Optional[PvcModel] = Field(
        None,
        description='pvc represents configuration that uses a PersistentVolumeClaim.',
    )
    s3: Optional[S3Model] = Field(
        None,
        description='s3 represents configuration that uses Amazon Simple Storage Service.',
    )
    swift: Optional[SwiftModel] = Field(
        None,
        description='swift represents configuration that uses OpenStack Object Storage.',
    )


class Status(BaseModel):
    conditions: Optional[List[Condition]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[Generation]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    storage: StorageModel = Field(
        ...,
        description='storage indicates the current applied storage configuration of the registry.',
    )
    storageManaged: bool = Field(
        ...,
        description='storageManaged is deprecated, please refer to Storage.managementState',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class MatchExpressionModel10(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class MatchFieldModel1(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class PreferenceModel(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel10]] = Field(
        None, description="A list of node selector requirements by node's labels."
    )
    matchFields: Optional[List[MatchFieldModel1]] = Field(
        None, description="A list of node selector requirements by node's fields."
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItemModel2(BaseModel):
    preference: PreferenceModel = Field(
        ...,
        description='A node selector term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.',
    )


class MatchExpressionModel11(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class MatchFieldModel2(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class NodeSelectorTermModel(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel11]] = Field(
        None, description="A list of node selector requirements by node's labels."
    )
    matchFields: Optional[List[MatchFieldModel2]] = Field(
        None, description="A list of node selector requirements by node's fields."
    )


class RequiredDuringSchedulingIgnoredDuringExecutionModel(BaseModel):
    nodeSelectorTerms: List[NodeSelectorTermModel] = Field(
        ..., description='Required. A list of node selector terms. The terms are ORed.'
    )


class NodeAffinityModel(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItemModel2]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        RequiredDuringSchedulingIgnoredDuringExecutionModel
    ] = Field(
        None,
        description='If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.',
    )


class MatchExpressionModel12(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel4(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel12]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel13(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel3(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel13]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class PodAffinityTermModel1(BaseModel):
    labelSelector: Optional[LabelSelectorModel4] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel3] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace".',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItemModel3(BaseModel):
    podAffinityTerm: PodAffinityTermModel1 = Field(
        ...,
        description='Required. A pod affinity term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
    )


class MatchExpressionModel14(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel5(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel14]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel15(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel4(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel15]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class RequiredDuringSchedulingIgnoredDuringExecutionItemModel1(BaseModel):
    labelSelector: Optional[LabelSelectorModel5] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel4] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace".',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PodAffinityModel(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItemModel3]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        List[RequiredDuringSchedulingIgnoredDuringExecutionItemModel1]
    ] = Field(
        None,
        description='If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
    )


class MatchExpressionModel16(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel6(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel16]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel17(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel5(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel17]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class PodAffinityTermModel2(BaseModel):
    labelSelector: Optional[LabelSelectorModel6] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel5] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace".',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItemModel4(BaseModel):
    podAffinityTerm: PodAffinityTermModel2 = Field(
        ...,
        description='Required. A pod affinity term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
    )


class MatchExpressionModel18(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel7(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel18]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel19(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel6(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel19]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class RequiredDuringSchedulingIgnoredDuringExecutionItemModel2(BaseModel):
    labelSelector: Optional[LabelSelectorModel7] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel6] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace".',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PodAntiAffinityModel(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItemModel4]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        List[RequiredDuringSchedulingIgnoredDuringExecutionItemModel2]
    ] = Field(
        None,
        description='If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
    )


class AffinityModel(BaseModel):
    nodeAffinity: Optional[NodeAffinityModel] = Field(
        None, description='Describes node affinity scheduling rules for the pod.'
    )
    podAffinity: Optional[PodAffinityModel] = Field(
        None,
        description='Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).',
    )
    podAntiAffinity: Optional[PodAntiAffinityModel] = Field(
        None,
        description='Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).',
    )


class LogLevelModel(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class ResourcesModel(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class TolerationModel(BaseModel):
    effect: Optional[str] = Field(
        None,
        description='Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
    )
    key: Optional[str] = Field(
        None,
        description='Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
    )
    operator: Optional[str] = Field(
        None,
        description="Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
    )
    tolerationSeconds: Optional[int] = Field(
        None,
        description='TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
    )
    value: Optional[str] = Field(
        None,
        description='Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
    )


class SpecModel(BaseModel):
    affinity: Optional[AffinityModel] = Field(
        None,
        description='affinity is a group of node affinity scheduling rules for the image pruner pod.',
    )
    failedJobsHistoryLimit: Optional[int] = Field(
        None,
        description='failedJobsHistoryLimit specifies how many failed image pruner jobs to retain. Defaults to 3 if not set.',
    )
    ignoreInvalidImageReferences: Optional[bool] = Field(
        None,
        description='ignoreInvalidImageReferences indicates whether the pruner can ignore errors while parsing image references.',
    )
    keepTagRevisions: Optional[int] = Field(
        None,
        description='keepTagRevisions specifies the number of image revisions for a tag in an image stream that will be preserved. Defaults to 3.',
    )
    keepYoungerThan: Optional[int] = Field(
        None,
        description='keepYoungerThan specifies the minimum age in nanoseconds of an image and its referrers for it to be considered a candidate for pruning. DEPRECATED: This field is deprecated in favor of keepYoungerThanDuration. If both are set, this field is ignored and keepYoungerThanDuration takes precedence.',
    )
    keepYoungerThanDuration: Optional[str] = Field(
        None,
        description='keepYoungerThanDuration specifies the minimum age of an image and its referrers for it to be considered a candidate for pruning. Defaults to 60m (60 minutes).',
    )
    logLevel: Optional[LogLevelModel] = Field(
        None,
        description='logLevel sets the level of log output for the pruner job. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    nodeSelector: Optional[Dict[str, str]] = Field(
        None,
        description='nodeSelector defines the node selection constraints for the image pruner pod.',
    )
    resources: Optional[ResourcesModel] = Field(
        None,
        description='resources defines the resource requests and limits for the image pruner pod.',
    )
    schedule: Optional[str] = Field(
        None,
        description='schedule specifies when to execute the job using standard cronjob syntax: https://wikipedia.org/wiki/Cron. Defaults to `0 0 * * *`.',
    )
    successfulJobsHistoryLimit: Optional[int] = Field(
        None,
        description='successfulJobsHistoryLimit specifies how many successful image pruner jobs to retain. Defaults to 3 if not set.',
    )
    suspend: Optional[bool] = Field(
        None,
        description='suspend specifies whether or not to suspend subsequent executions of this cronjob. Defaults to false.',
    )
    tolerations: Optional[List[TolerationModel]] = Field(
        None,
        description='tolerations defines the node tolerations for the image pruner pod.',
    )


class ConditionModel(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class StatusModel(BaseModel):
    conditions: Optional[List[ConditionModel]] = Field(
        None, description='conditions is a list of conditions and their status.'
    )
    observedGeneration: Optional[int] = Field(
        None,
        description='observedGeneration is the last generation change that has been applied.',
    )


class Config(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: v1.ObjectMeta = Field(
        ...,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Spec = Field(
        ..., description='ImageRegistrySpec defines the specs for the running registry.'
    )
    status: Optional[Status] = Field(
        None,
        description='ImageRegistryStatus reports image registry operational status.',
    )


class ConfigList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Config] = Field(
        ...,
        description='List of configs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class ImagePruner(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: v1.ObjectMeta = Field(
        ...,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel = Field(
        ...,
        description='ImagePrunerSpec defines the specs for the running image pruner.',
    )
    status: Optional[StatusModel] = Field(
        None, description='ImagePrunerStatus reports image pruner operational status.'
    )


class ImagePrunerList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ImagePruner] = Field(
        ...,
        description='List of imagepruners. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
