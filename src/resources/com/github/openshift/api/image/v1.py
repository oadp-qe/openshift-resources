# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel, Field

from src.resources.io.k8s.api.core import v1
from src.resources.io.k8s.apimachinery.pkg import runtime
from src.resources.io.k8s.apimachinery.pkg.apis.meta import v1 as v1_1


class ImageBlobReferences(BaseModel):
    config: Optional[str] = Field(
        None,
        description='config, if set, is the blob that contains the image config. Some images do not have separate config blobs and this field will be set to nil if so.',
    )
    imageMissing: Optional[bool] = Field(
        None,
        description='imageMissing is true if the image is referenced by the image stream but the image object has been deleted from the API by an administrator. When this field is set, layers and config fields may be empty and callers that depend on the image metadata should consider the image to be unavailable for download or viewing.',
    )
    layers: Optional[List[str]] = Field(
        None,
        description='layers is the list of blobs that compose this image, from base layer to top layer. All layers referenced by this array will be defined in the blobs map. Some images may have zero layers.',
    )


class ImageLayer(BaseModel):
    mediaType: str = Field(..., description='MediaType of the referenced object.')
    name: str = Field(
        ..., description='Name of the layer as defined by the underlying store.'
    )
    size: int = Field(
        ...,
        description='Size of the layer in bytes as defined by the underlying store.',
    )


class ImageLayerData(BaseModel):
    mediaType: str = Field(..., description='MediaType of the referenced object.')
    size: int = Field(
        ...,
        description='Size of the layer in bytes as defined by the underlying store. This field is optional if the necessary information about size is not available.',
    )


class ImageLookupPolicy(BaseModel):
    local: bool = Field(
        ...,
        description='local will change the docker short image references (like "mysql" or "php:latest") on objects in this namespace to the image ID whenever they match this image stream, instead of reaching out to a remote registry. The name will be fully qualified to an image ID if found. The tag\'s referencePolicy is taken into account on the replaced value. Only works within the current namespace.',
    )


class SignatureIssuer(BaseModel):
    commonName: Optional[str] = Field(
        None, description='Common name (e.g. openshift-signing-service).'
    )
    organization: Optional[str] = Field(None, description='Organization name.')


class SignatureSubject(BaseModel):
    commonName: Optional[str] = Field(
        None, description='Common name (e.g. openshift-signing-service).'
    )
    organization: Optional[str] = Field(None, description='Organization name.')
    publicKeyID: str = Field(
        ...,
        description="If present, it is a human readable key id of public key belonging to the subject used to verify image signature. It should contain at least 64 lowest bits of public key's fingerprint (e.g. 0x685ebe62bf278440).",
    )


class TagImportPolicy(BaseModel):
    insecure: Optional[bool] = Field(
        None,
        description='Insecure is true if the server may bypass certificate verification or connect directly over HTTP during image import.',
    )
    scheduled: Optional[bool] = Field(
        None,
        description='Scheduled indicates to the server that this tag should be periodically checked to ensure it is up to date, and imported',
    )


class TagReferencePolicy(BaseModel):
    type: str = Field(
        ...,
        description="Type determines how the image pull spec should be transformed when the image stream tag is used in deployment config triggers or new builds. The default value is `Source`, indicating the original location of the image should be used (if imported). The user may also specify `Local`, indicating that the pull spec should point to the integrated container image registry and leverage the registry's ability to proxy the pull to an upstream registry. `Local` allows the credentials used to pull this image to be managed from the image stream's namespace, so others on the platform can access a remote image but have no access to the remote secret. It also allows the image layers to be mirrored into the local registry which the images can still be pulled even if the upstream registry is unavailable.",
    )


class ImageImportSpec(BaseModel):
    from_: v1.ObjectReference = Field(
        ...,
        alias='from',
        description='From is the source of an image to import; only kind DockerImage is allowed',
    )
    importPolicy: Optional[TagImportPolicy] = Field(
        None,
        description='ImportPolicy is the policy controlling how the image is imported',
    )
    includeManifest: Optional[bool] = Field(
        None,
        description='IncludeManifest determines if the manifest for each image is returned in the response',
    )
    referencePolicy: Optional[TagReferencePolicy] = Field(
        None,
        description='ReferencePolicy defines how other components should consume the image',
    )
    to: Optional[v1.LocalObjectReference] = Field(
        None,
        description='To is a tag in the current image stream to assign the imported image to, if name is not specified the default tag from from.name will be used',
    )


class RepositoryImportSpec(BaseModel):
    from_: v1.ObjectReference = Field(
        ...,
        alias='from',
        description='From is the source for the image repository to import; only kind DockerImage and a name of a container image repository is allowed',
    )
    importPolicy: Optional[TagImportPolicy] = Field(
        None,
        description='ImportPolicy is the policy controlling how the image is imported',
    )
    includeManifest: Optional[bool] = Field(
        None,
        description='IncludeManifest determines if the manifest for each image is returned in the response',
    )
    referencePolicy: Optional[TagReferencePolicy] = Field(
        None,
        description='ReferencePolicy defines how other components should consume the image',
    )


class SignatureCondition(BaseModel):
    lastProbeTime: Optional[v1_1.Time] = Field(
        None, description='Last time the condition was checked.'
    )
    lastTransitionTime: Optional[v1_1.Time] = Field(
        None, description='Last time the condition transit from one status to another.'
    )
    message: Optional[str] = Field(
        None,
        description='Human readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        None, description="(brief) reason for the condition's last transition."
    )
    status: str = Field(
        ..., description='Status of the condition, one of True, False, Unknown.'
    )
    type: str = Field(
        ..., description='Type of signature condition, Complete or Failed.'
    )


class TagEvent(BaseModel):
    created: v1_1.Time = Field(
        ..., description='Created holds the time the TagEvent was created'
    )
    dockerImageReference: str = Field(
        ...,
        description='DockerImageReference is the string that can be used to pull this image',
    )
    generation: int = Field(
        ...,
        description='Generation is the spec tag generation that resulted in this tag being updated',
    )
    image: str = Field(..., description='Image is the image')


class TagEventCondition(BaseModel):
    generation: int = Field(
        ...,
        description='Generation is the spec tag generation that this status corresponds to',
    )
    lastTransitionTime: Optional[v1_1.Time] = Field(
        None,
        description='LastTransitionTIme is the time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        None,
        description='Message is a human readable description of the details about last transition, complementing reason.',
    )
    reason: Optional[str] = Field(
        None,
        description="Reason is a brief machine readable explanation for the condition's last transition.",
    )
    status: str = Field(
        ..., description='Status of the condition, one of True, False, Unknown.'
    )
    type: str = Field(
        ..., description='Type of tag event condition, currently only ImportSuccess'
    )


class TagReference(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description='Optional; if specified, annotations that are applied to images retrieved via ImageStreamTags.',
    )
    from_: Optional[v1.ObjectReference] = Field(
        None,
        alias='from',
        description='Optional; if specified, a reference to another image that this tag should point to. Valid values are ImageStreamTag, ImageStreamImage, and DockerImage.  ImageStreamTag references can only reference a tag within this same ImageStream.',
    )
    generation: Optional[int] = Field(
        None,
        description='Generation is a counter that tracks mutations to the spec tag (user intent). When a tag reference is changed the generation is set to match the current stream generation (which is incremented every time spec is changed). Other processes in the system like the image importer observe that the generation of spec tag is newer than the generation recorded in the status and use that as a trigger to import the newest remote tag. To trigger a new import, clients may set this value to zero which will reset the generation to the latest stream generation. Legacy clients will send this value as nil which will be merged with the current tag generation.',
    )
    importPolicy: Optional[TagImportPolicy] = Field(
        None,
        description='ImportPolicy is information that controls how images may be imported by the server.',
    )
    name: str = Field(..., description='Name of the tag')
    reference: Optional[bool] = Field(
        None,
        description='Reference states if the tag will be imported. Default value is false, which means the tag will be imported.',
    )
    referencePolicy: Optional[TagReferencePolicy] = Field(
        None,
        description='ReferencePolicy defines how other components should consume the image.',
    )


class ImageSignature(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    conditions: Optional[List[SignatureCondition]] = Field(
        None,
        description="Conditions represent the latest available observations of a signature's current state.",
    )
    content: str = Field(
        ...,
        description="Required: An opaque binary string which is an image's signature.",
    )
    created: Optional[v1_1.Time] = Field(
        None, description="If specified, it is the time of signature's creation."
    )
    imageIdentity: Optional[str] = Field(
        None,
        description='A human readable string representing image\'s identity. It could be a product name and version, or an image pull spec (e.g. "registry.access.redhat.com/rhel7/rhel:7.2").',
    )
    issuedBy: Optional[SignatureIssuer] = Field(
        None,
        description='If specified, it holds information about an issuer of signing certificate or key (a person or entity who signed the signing certificate or key).',
    )
    issuedTo: Optional[SignatureSubject] = Field(
        None,
        description='If specified, it holds information about a subject of signing certificate or key (a person or entity who signed the image).',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1_1.ObjectMetaV2] = None
    signedClaims: Optional[Dict[str, str]] = Field(
        None, description='Contains claims from the signature.'
    )
    type: str = Field(..., description='Required: Describes a type of stored blob.')


class ImageStreamImportSpec(BaseModel):
    images: Optional[List[ImageImportSpec]] = Field(
        None, description='Images are a list of individual images to import.'
    )
    import_: bool = Field(
        ...,
        alias='import',
        description='Import indicates whether to perform an import - if so, the specified tags are set on the spec and status of the image stream defined by the type meta.',
    )
    repository: Optional[RepositoryImportSpec] = Field(
        None,
        description='Repository is an optional import of an entire container image repository. A maximum limit on the number of tags imported this way is imposed by the server.',
    )


class ImageStreamLayers(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    blobs: Dict[str, ImageLayerData] = Field(
        ..., description='blobs is a map of blob name to metadata about the blob.'
    )
    images: Dict[str, ImageBlobReferences] = Field(
        ...,
        description='images is a map between an image name and the names of the blobs and config that comprise the image.',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1_1.ObjectMetaV2] = None


class ImageStreamSpec(BaseModel):
    dockerImageRepository: Optional[str] = Field(
        None,
        description='dockerImageRepository is optional, if specified this stream is backed by a container repository on this server Deprecated: This field is deprecated as of v3.7 and will be removed in a future release. Specify the source for the tags to be imported in each tag via the spec.tags.from reference instead.',
    )
    lookupPolicy: Optional[ImageLookupPolicy] = Field(
        None,
        description='lookupPolicy controls how other resources reference images within this namespace.',
    )
    tags: Optional[List[TagReference]] = Field(
        None, description='tags map arbitrary string values to specific image locators'
    )


class NamedTagEventList(BaseModel):
    conditions: Optional[List[TagEventCondition]] = Field(
        None,
        description='Conditions is an array of conditions that apply to the tag event list.',
    )
    items: List[TagEvent] = Field(..., description="Standard object's metadata.")
    tag: str = Field(
        ..., description='Tag is the tag for which the history is recorded'
    )


class Image(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    dockerImageConfig: Optional[str] = Field(
        None,
        description='DockerImageConfig is a JSON blob that the runtime uses to set up the container. This is a part of manifest schema v2.',
    )
    dockerImageLayers: List[ImageLayer] = Field(
        ...,
        description='DockerImageLayers represents the layers in the image. May not be set if the image does not define that data.',
    )
    dockerImageManifest: Optional[str] = Field(
        None, description='DockerImageManifest is the raw JSON of the manifest'
    )
    dockerImageManifestMediaType: Optional[str] = Field(
        None,
        description='DockerImageManifestMediaType specifies the mediaType of manifest. This is a part of manifest schema v2.',
    )
    dockerImageMetadata: Optional[runtime.RawExtension] = Field(
        None, description='DockerImageMetadata contains metadata about this image'
    )
    dockerImageMetadataVersion: Optional[str] = Field(
        None,
        description='DockerImageMetadataVersion conveys the version of the object, which if empty defaults to "1.0"',
    )
    dockerImageReference: Optional[str] = Field(
        None,
        description='DockerImageReference is the string that can be used to pull this image.',
    )
    dockerImageSignatures: Optional[List[str]] = Field(
        None,
        description='DockerImageSignatures provides the signatures as opaque blobs. This is a part of manifest schema v1.',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1_1.ObjectMetaV2] = None
    signatures: Optional[List[ImageSignature]] = Field(
        None, description='Signatures holds all signatures of the image.'
    )


class ImageImportStatus(BaseModel):
    image: Optional[Image] = Field(
        None,
        description='Image is the metadata of that image, if the image was located',
    )
    status: v1_1.Status = Field(
        ...,
        description='Status is the status of the image import, including errors encountered while retrieving the image',
    )
    tag: Optional[str] = Field(
        None, description='Tag is the tag this image was located under, if any'
    )


class ImageList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Image] = Field(..., description='Items is a list of images')
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1_1.ListMetaV2] = None


class ImageStreamImage(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    image: Image = Field(
        ..., description='Image associated with the ImageStream and image name.'
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1_1.ObjectMetaV2] = None


class ImageStreamMapping(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    image: Image = Field(..., description='Image is a container image.')
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1_1.ObjectMetaV2] = None
    tag: str = Field(
        ...,
        description='Tag is a string value this image can be located with inside the stream.',
    )


class ImageStreamStatus(BaseModel):
    dockerImageRepository: str = Field(
        ...,
        description='DockerImageRepository represents the effective location this stream may be accessed at. May be empty until the server determines where the repository is located',
    )
    publicDockerImageRepository: Optional[str] = Field(
        None,
        description='PublicDockerImageRepository represents the public location from where the image can be pulled outside the cluster. This field may be empty if the administrator has not exposed the integrated registry externally.',
    )
    tags: Optional[List[NamedTagEventList]] = Field(
        None,
        description='Tags are a historical record of images associated with each tag. The first entry in the TagEvent array is the currently tagged image.',
    )


class ImageStreamTag(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    conditions: Optional[List[TagEventCondition]] = Field(
        None,
        description='conditions is an array of conditions that apply to the image stream tag.',
    )
    generation: int = Field(
        ...,
        description='generation is the current generation of the tagged image - if tag is provided and this value is not equal to the tag generation, a user has requested an import that has not completed, or conditions will be filled out indicating any error.',
    )
    image: Image = Field(
        ..., description='image associated with the ImageStream and tag.'
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    lookupPolicy: ImageLookupPolicy = Field(
        ...,
        description='lookupPolicy indicates whether this tag will handle image references in this namespace.',
    )
    metadata: Optional[v1_1.ObjectMetaV2] = None
    tag: TagReference = Field(
        ...,
        description='tag is the spec tag associated with this image stream tag, and it may be null if only pushes have occurred to this image stream.',
    )


class ImageStreamTagList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ImageStreamTag] = Field(
        ..., description='Items is the list of image stream tags'
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1_1.ListMetaV2] = None


class ImageTag(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    image: Image = Field(
        ...,
        description='image is the details of the most recent image stream status tag, and it may be null if import has not completed or an administrator has deleted the image object. To verify this is the most recent image, you must verify the generation of the most recent status.items entry matches the spec tag (if a spec tag is set). This field will not be set when listing image tags.',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1_1.ObjectMetaV2] = None
    spec: TagReference = Field(
        ...,
        description='spec is the spec tag associated with this image stream tag, and it may be null if only pushes have occurred to this image stream.',
    )
    status: NamedTagEventList = Field(
        ...,
        description='status is the status tag details associated with this image stream tag, and it may be null if no push or import has been performed.',
    )


class ImageTagList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ImageTag] = Field(
        ..., description='Items is the list of image stream tags'
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1_1.ListMetaV2] = None


class RepositoryImportStatus(BaseModel):
    additionalTags: Optional[List[str]] = Field(
        None,
        description='AdditionalTags are tags that exist in the repository but were not imported because a maximum limit of automatic imports was applied.',
    )
    images: Optional[List[ImageImportStatus]] = Field(
        None,
        description='Images is a list of images successfully retrieved by the import of the repository.',
    )
    status: Optional[v1_1.Status] = Field(
        None, description='Status reflects whether any failure occurred during import'
    )


class SecretList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[v1.Secret] = Field(
        ...,
        description='Items is a list of secret objects. More info: https://kubernetes.io/docs/concepts/configuration/secret',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1_1.ListMetaV2] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class ImageStream(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1_1.ObjectMetaV2] = None
    spec: Optional[ImageStreamSpec] = Field(
        None, description='Spec describes the desired state of this stream'
    )
    status: Optional[ImageStreamStatus] = Field(
        None, description='Status describes the current state of this stream'
    )


class ImageStreamImportStatus(BaseModel):
    images: Optional[List[ImageImportStatus]] = Field(
        None, description='Images is set with the result of importing spec.images'
    )
    import_: Optional[ImageStream] = Field(
        None,
        alias='import',
        description="Import is the image stream that was successfully updated or created when 'to' was set.",
    )
    repository: Optional[RepositoryImportStatus] = Field(
        None,
        description='Repository is set if spec.repository was set to the outcome of the import',
    )


class ImageStreamList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ImageStream] = Field(..., description='Items is a list of imageStreams')
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1_1.ListMetaV2] = None


class ImageStreamImport(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1_1.ObjectMetaV2] = None
    spec: ImageStreamImportSpec = Field(
        ...,
        description='Spec is a description of the images that the user wishes to import',
    )
    status: ImageStreamImportStatus = Field(
        ..., description='Status is the result of importing the image'
    )
