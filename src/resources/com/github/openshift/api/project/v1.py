# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field

from src.resources.io.k8s.api.core import v1 as v1_1
from src.resources.io.k8s.apimachinery.pkg.apis.meta import v1


class ProjectSpec(BaseModel):
    finalizers: Optional[List[str]] = Field(
        None,
        description='Finalizers is an opaque list of values that must be empty to permanently remove object from storage',
    )


class Phase(Enum):
    Active = 'Active'
    Terminating = 'Terminating'


class ProjectRequest(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    description: Optional[str] = Field(
        None, description='Description is the description to apply to a project'
    )
    displayName: Optional[str] = Field(
        None, description='DisplayName is the display name to apply to a project'
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = None


class ProjectStatus(BaseModel):
    conditions: Optional[List[v1_1.NamespaceConditionV2]] = Field(
        None,
        description='Represents the latest available observations of the project current state.',
    )
    phase: Optional[Phase] = Field(
        None,
        description='Phase is the current lifecycle phase of the project\n\nPossible enum values:\n - `"Active"` means the namespace is available for use in the system\n - `"Terminating"` means the namespace is undergoing graceful termination',
    )


class Project(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = None
    spec: Optional[ProjectSpec] = Field(
        None, description='Spec defines the behavior of the Namespace.'
    )
    status: Optional[ProjectStatus] = Field(
        None, description='Status describes the current status of a Namespace'
    )


class ProjectList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Project] = Field(..., description='Items is the list of projects')
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMetaV2] = None
