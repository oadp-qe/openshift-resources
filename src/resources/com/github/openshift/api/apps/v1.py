# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel, Field

from src.resources.io.k8s.api.core import v1
from src.resources.io.k8s.apimachinery.pkg.apis.meta import v1 as v1_1
from src.resources.io.k8s.apimachinery.pkg.util import intstr


class DeploymentLog(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class DeploymentRequest(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    excludeTriggers: Optional[List[str]] = Field(
        None,
        description='ExcludeTriggers instructs the instantiator to avoid processing the specified triggers. This field overrides the triggers from latest and allows clients to control specific logic. This field is ignored if not specified.',
    )
    force: bool = Field(
        ...,
        description='Force will try to force a new deployment to run. If the deployment config is paused, then setting this to true will return an Invalid error.',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    latest: bool = Field(
        ...,
        description='Latest will update the deployment config with the latest state from all triggers.',
    )
    name: str = Field(
        ...,
        description='Name of the deployment config for requesting a new deployment.',
    )


class DeploymentCauseImageTrigger(BaseModel):
    from_: v1.ObjectReference = Field(
        ...,
        alias='from',
        description='From is a reference to the changed object which triggered a deployment. The field may have the kinds DockerImage, ImageStreamTag, or ImageStreamImage.',
    )


class DeploymentCondition(BaseModel):
    lastTransitionTime: Optional[v1_1.Time] = Field(
        None,
        description='The last time the condition transitioned from one status to another.',
    )
    lastUpdateTime: Optional[v1_1.Time] = Field(
        None, description='The last time this condition was updated.'
    )
    message: Optional[str] = Field(
        None,
        description='A human readable message indicating details about the transition.',
    )
    reason: Optional[str] = Field(
        None, description="The reason for the condition's last transition."
    )
    status: str = Field(
        ..., description='Status of the condition, one of True, False, Unknown.'
    )
    type: str = Field(..., description='Type of deployment condition.')


class DeploymentConfigRollbackSpec(BaseModel):
    from_: v1.ObjectReference = Field(
        ...,
        alias='from',
        description='From points to a ReplicationController which is a deployment.',
    )
    includeReplicationMeta: bool = Field(
        ...,
        description='IncludeReplicationMeta specifies whether to include the replica count and selector.',
    )
    includeStrategy: bool = Field(
        ...,
        description='IncludeStrategy specifies whether to include the deployment Strategy.',
    )
    includeTemplate: bool = Field(
        ...,
        description='IncludeTemplate specifies whether to include the PodTemplateSpec.',
    )
    includeTriggers: bool = Field(
        ..., description='IncludeTriggers specifies whether to include config Triggers.'
    )
    revision: Optional[int] = Field(
        None,
        description='Revision to rollback to. If set to 0, rollback to the last revision.',
    )


class DeploymentTriggerImageChangeParams(BaseModel):
    automatic: Optional[bool] = Field(
        None,
        description='Automatic means that the detection of a new tag value should result in an image update inside the pod template.',
    )
    containerNames: Optional[List[str]] = Field(
        None,
        description='ContainerNames is used to restrict tag updates to the specified set of container names in a pod. If multiple triggers point to the same containers, the resulting behavior is undefined. Future API versions will make this a validation error. If ContainerNames does not point to a valid container, the trigger will be ignored. Future API versions will make this a validation error.',
    )
    from_: v1.ObjectReference = Field(
        ...,
        alias='from',
        description='From is a reference to an image stream tag to watch for changes. From.Name is the only required subfield - if From.Namespace is blank, the namespace of the current deployment trigger will be used.',
    )
    lastTriggeredImage: Optional[str] = Field(
        None, description='LastTriggeredImage is the last image to be triggered.'
    )


class DeploymentTriggerPolicy(BaseModel):
    imageChangeParams: Optional[DeploymentTriggerImageChangeParams] = Field(
        None,
        description='ImageChangeParams represents the parameters for the ImageChange trigger.',
    )
    type: Optional[str] = Field(None, description='Type of the trigger')


class TagImageHook(BaseModel):
    containerName: str = Field(
        ...,
        description='ContainerName is the name of a container in the deployment config whose image value will be used as the source of the tag. If there is only a single container this value will be defaulted to the name of that container.',
    )
    to: v1.ObjectReference = Field(
        ...,
        description="To is the target ImageStreamTag to set the container's image onto.",
    )


class DeploymentCause(BaseModel):
    imageTrigger: Optional[DeploymentCauseImageTrigger] = Field(
        None,
        description='ImageTrigger contains the image trigger details, if this trigger was fired based on an image change',
    )
    type: str = Field(
        ...,
        description='Type of the trigger that resulted in the creation of a new deployment',
    )


class DeploymentConfigRollback(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    name: str = Field(
        ..., description='Name of the deployment config that will be rolled back.'
    )
    spec: DeploymentConfigRollbackSpec = Field(
        ..., description='Spec defines the options to rollback generation.'
    )
    updatedAnnotations: Optional[Dict[str, str]] = Field(
        None,
        description='UpdatedAnnotations is a set of new annotations that will be added in the deployment config.',
    )


class DeploymentDetails(BaseModel):
    causes: List[DeploymentCause] = Field(
        ...,
        description='Causes are extended data associated with all the causes for creating a new deployment',
    )
    message: Optional[str] = Field(
        None,
        description='Message is the user specified change message, if this deployment was triggered manually by the user',
    )


class DeploymentConfigStatus(BaseModel):
    availableReplicas: int = Field(
        ...,
        description='AvailableReplicas is the total number of available pods targeted by this deployment config.',
    )
    conditions: Optional[List[DeploymentCondition]] = Field(
        None,
        description="Conditions represents the latest available observations of a deployment config's current state.",
    )
    details: Optional[DeploymentDetails] = Field(
        None,
        description='Details are the reasons for the update to this deployment config. This could be based on a change made by the user or caused by an automatic trigger',
    )
    latestVersion: int = Field(
        ...,
        description='LatestVersion is used to determine whether the current deployment associated with a deployment config is out of sync.',
    )
    observedGeneration: int = Field(
        ...,
        description='ObservedGeneration is the most recent generation observed by the deployment config controller.',
    )
    readyReplicas: Optional[int] = Field(
        None, description='Total number of ready pods targeted by this deployment.'
    )
    replicas: int = Field(
        ...,
        description='Replicas is the total number of pods targeted by this deployment config.',
    )
    unavailableReplicas: int = Field(
        ...,
        description='UnavailableReplicas is the total number of unavailable pods targeted by this deployment config.',
    )
    updatedReplicas: int = Field(
        ...,
        description='UpdatedReplicas is the total number of non-terminated pods targeted by this deployment config that have the desired template spec.',
    )


class CustomDeploymentStrategyParams(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description='Command is optional and overrides CMD in the container Image.',
    )
    environment: Optional[List[v1.EnvVar]] = Field(
        None,
        description='Environment holds the environment which will be given to the container for Image.',
    )
    image: Optional[str] = Field(
        None,
        description='Image specifies a container image which can carry out a deployment.',
    )


class ExecNewPodHook(BaseModel):
    command: List[str] = Field(
        ..., description='Command is the action command and its arguments.'
    )
    containerName: str = Field(
        ...,
        description="ContainerName is the name of a container in the deployment pod template whose container image will be used for the hook pod's container.",
    )
    env: Optional[List[v1.EnvVar]] = Field(
        None,
        description="Env is a set of environment variables to supply to the hook pod's container.",
    )
    volumes: Optional[List[str]] = Field(
        None,
        description='Volumes is a list of named volumes from the pod template which should be copied to the hook pod. Volumes names not found in pod spec are ignored. An empty list means no volumes will be copied.',
    )


class LifecycleHook(BaseModel):
    execNewPod: Optional[ExecNewPodHook] = Field(
        None,
        description='ExecNewPod specifies the options for a lifecycle hook backed by a pod.',
    )
    failurePolicy: str = Field(
        ...,
        description='FailurePolicy specifies what action to take if the hook fails.',
    )
    tagImages: Optional[List[TagImageHook]] = Field(
        None,
        description='TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag.',
    )


class RecreateDeploymentStrategyParams(BaseModel):
    mid: Optional[LifecycleHook] = Field(
        None,
        description='Mid is a lifecycle hook which is executed while the deployment is scaled down to zero before the first new pod is created. All LifecycleHookFailurePolicy values are supported.',
    )
    post: Optional[LifecycleHook] = Field(
        None,
        description='Post is a lifecycle hook which is executed after the strategy has finished all deployment logic. All LifecycleHookFailurePolicy values are supported.',
    )
    pre: Optional[LifecycleHook] = Field(
        None,
        description='Pre is a lifecycle hook which is executed before the strategy manipulates the deployment. All LifecycleHookFailurePolicy values are supported.',
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='TimeoutSeconds is the time to wait for updates before giving up. If the value is nil, a default will be used.',
    )


class RollingDeploymentStrategyParams(BaseModel):
    intervalSeconds: Optional[int] = Field(
        None,
        description='IntervalSeconds is the time to wait between polling deployment status after update. If the value is nil, a default will be used.',
    )
    maxSurge: Optional[intstr.IntOrString] = Field(
        None,
        description='MaxSurge is the maximum number of pods that can be scheduled above the original number of pods. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up.\n\nThis cannot be 0 if MaxUnavailable is 0. By default, 25% is used.\n\nExample: when this is set to 30%, the new RC can be scaled up by 30% immediately when the rolling update starts. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of original pods.',
    )
    maxUnavailable: Optional[intstr.IntOrString] = Field(
        None,
        description='MaxUnavailable is the maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total pods at the start of update (ex: 10%). Absolute number is calculated from percentage by rounding down.\n\nThis cannot be 0 if MaxSurge is 0. By default, 25% is used.\n\nExample: when this is set to 30%, the old RC can be scaled down by 30% immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that at least 70% of original number of pods are available at all times during the update.',
    )
    post: Optional[LifecycleHook] = Field(
        None,
        description='Post is a lifecycle hook which is executed after the strategy has finished all deployment logic. All LifecycleHookFailurePolicy values are supported.',
    )
    pre: Optional[LifecycleHook] = Field(
        None,
        description='Pre is a lifecycle hook which is executed before the deployment process begins. All LifecycleHookFailurePolicy values are supported.',
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='TimeoutSeconds is the time to wait for updates before giving up. If the value is nil, a default will be used.',
    )
    updatePeriodSeconds: Optional[int] = Field(
        None,
        description='UpdatePeriodSeconds is the time to wait between individual pod updates. If the value is nil, a default will be used.',
    )


class DeploymentStrategy(BaseModel):
    activeDeadlineSeconds: Optional[int] = Field(
        None,
        description='ActiveDeadlineSeconds is the duration in seconds that the deployer pods for this deployment config may be active on a node before the system actively tries to terminate them.',
    )
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description='Annotations is a set of key, value pairs added to custom deployer and lifecycle pre/post hook pods.',
    )
    customParams: Optional[CustomDeploymentStrategyParams] = Field(
        None,
        description='CustomParams are the input to the Custom deployment strategy, and may also be specified for the Recreate and Rolling strategies to customize the execution process that runs the deployment.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Labels is a set of key, value pairs added to custom deployer and lifecycle pre/post hook pods.',
    )
    recreateParams: Optional[RecreateDeploymentStrategyParams] = Field(
        None,
        description='RecreateParams are the input to the Recreate deployment strategy.',
    )
    resources: Optional[v1.ResourceRequirements] = Field(
        None,
        description='Resources contains resource requirements to execute the deployment and any hooks.',
    )
    rollingParams: Optional[RollingDeploymentStrategyParams] = Field(
        None,
        description='RollingParams are the input to the Rolling deployment strategy.',
    )
    type: Optional[str] = Field(
        None, description='Type is the name of a deployment strategy.'
    )


class DeploymentConfigSpec(BaseModel):
    minReadySeconds: Optional[int] = Field(
        None,
        description='MinReadySeconds is the minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)',
    )
    paused: Optional[bool] = Field(
        None,
        description='Paused indicates that the deployment config is paused resulting in no new deployments on template changes or changes in the template caused by other triggers.',
    )
    replicas: Optional[int] = Field(
        None, description='Replicas is the number of desired replicas.'
    )
    revisionHistoryLimit: Optional[int] = Field(
        None,
        description='RevisionHistoryLimit is the number of old ReplicationControllers to retain to allow for rollbacks. This field is a pointer to allow for differentiation between an explicit zero and not specified. Defaults to 10. (This only applies to DeploymentConfigs created via the new group API resource, not the legacy resource.)',
    )
    selector: Optional[Dict[str, str]] = Field(
        None,
        description='Selector is a label query over pods that should match the Replicas count.',
    )
    strategy: Optional[DeploymentStrategy] = Field(
        None, description='Strategy describes how a deployment is executed.'
    )
    template: Optional[v1.PodTemplateSpec] = Field(
        None,
        description='Template is the object that describes the pod that will be created if insufficient replicas are detected.',
    )
    test: Optional[bool] = Field(
        None,
        description='Test ensures that this deployment config will have zero replicas except while a deployment is running. This allows the deployment config to be used as a continuous deployment test - triggering on images, running the deployment, and then succeeding or failing. Post strategy hooks and After actions can be used to integrate successful deployment with an action.',
    )
    triggers: Optional[List[DeploymentTriggerPolicy]] = Field(
        None,
        description='Triggers determine how updates to a DeploymentConfig result in new deployments. If no triggers are defined, a new deployment can only occur as a result of an explicit client update to the DeploymentConfig with a new LatestVersion. If null, defaults to having a config change trigger.',
    )


class DeploymentConfig(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1_1.ObjectMetaV2] = None
    spec: DeploymentConfigSpec = Field(
        ...,
        description='Spec represents a desired deployment state and how to deploy to it.',
    )
    status: Optional[DeploymentConfigStatus] = Field(
        None, description='Status represents the current deployment state.'
    )


class DeploymentConfigList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[DeploymentConfig] = Field(
        ..., description='Items is a list of deployment configs'
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1_1.ListMetaV2] = None
