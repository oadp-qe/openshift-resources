# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field

from src.resources.io.k8s.api.core import v1 as v1_1
from src.resources.io.k8s.apimachinery.pkg.apis.meta import v1


class RangeAllocation(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    data: str = Field(
        ...,
        description='data is a byte array representing the serialized state of a range allocation.  It is a bitmap with each bit set to one to represent a range is taken.',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = None
    range: str = Field(
        ...,
        description='range is a string representing a unique label for a range of uids, "1000000000-2000000000/10000".',
    )


class RangeAllocationList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[RangeAllocation] = Field(..., description='List of RangeAllocations.')
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMetaV2] = None


class PodSecurityPolicyReviewSpec(BaseModel):
    serviceAccountNames: Optional[List[str]] = Field(
        None,
        description='serviceAccountNames is an optional set of ServiceAccounts to run the check with. If serviceAccountNames is empty, the template.spec.serviceAccountName is used, unless it\'s empty, in which case "default" is used instead. If serviceAccountNames is specified, template.spec.serviceAccountName is ignored.',
    )
    template: v1_1.PodTemplateSpec = Field(
        ...,
        description='template is the PodTemplateSpec to check. The template.spec.serviceAccountName field is used if serviceAccountNames is empty, unless the template.spec.serviceAccountName is empty, in which case "default" is used. If serviceAccountNames is specified, template.spec.serviceAccountName is ignored.',
    )


class PodSecurityPolicySelfSubjectReviewSpec(BaseModel):
    template: v1_1.PodTemplateSpec = Field(
        ..., description='template is the PodTemplateSpec to check.'
    )


class PodSecurityPolicySubjectReviewSpec(BaseModel):
    groups: Optional[List[str]] = Field(
        None, description="groups is the groups you're testing for."
    )
    template: v1_1.PodTemplateSpec = Field(
        ...,
        description='template is the PodTemplateSpec to check. If template.spec.serviceAccountName is empty it will not be defaulted. If its non-empty, it will be checked.',
    )
    user: Optional[str] = Field(
        None,
        description='user is the user you\'re testing for. If you specify "user" but not "group", then is it interpreted as "What if user were not a member of any groups. If user and groups are empty, then the check is performed using *only* the serviceAccountName in the template.',
    )


class PodSecurityPolicySubjectReviewStatus(BaseModel):
    allowedBy: Optional[v1_1.ObjectReference] = Field(
        None,
        description='allowedBy is a reference to the rule that allows the PodTemplateSpec. A rule can be a SecurityContextConstraint or a PodSecurityPolicy A `nil`, indicates that it was denied.',
    )
    reason: Optional[str] = Field(
        None,
        description='A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available.',
    )
    template: Optional[v1_1.PodTemplateSpec] = Field(
        None,
        description='template is the PodTemplateSpec after the defaulting is applied.',
    )


class ServiceAccountPodSecurityPolicyReviewStatus(BaseModel):
    allowedBy: Optional[v1_1.ObjectReference] = Field(
        None,
        description='allowedBy is a reference to the rule that allows the PodTemplateSpec. A rule can be a SecurityContextConstraint or a PodSecurityPolicy A `nil`, indicates that it was denied.',
    )
    name: str = Field(
        ..., description='name contains the allowed and the denied ServiceAccount name'
    )
    reason: Optional[str] = Field(
        None,
        description='A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available.',
    )
    template: Optional[v1_1.PodTemplateSpec] = Field(
        None,
        description='template is the PodTemplateSpec after the defaulting is applied.',
    )


class PodSecurityPolicyReviewStatus(BaseModel):
    allowedServiceAccounts: List[ServiceAccountPodSecurityPolicyReviewStatus] = Field(
        ...,
        description='allowedServiceAccounts returns the list of service accounts in *this* namespace that have the power to create the PodTemplateSpec.',
    )


class PodSecurityPolicySelfSubjectReview(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    spec: PodSecurityPolicySelfSubjectReviewSpec = Field(
        ...,
        description='spec defines specification the PodSecurityPolicySelfSubjectReview.',
    )
    status: Optional[PodSecurityPolicySubjectReviewStatus] = Field(
        None,
        description='status represents the current information/status for the PodSecurityPolicySelfSubjectReview.',
    )


class PodSecurityPolicySubjectReview(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    spec: PodSecurityPolicySubjectReviewSpec = Field(
        ...,
        description='spec defines specification for the PodSecurityPolicySubjectReview.',
    )
    status: Optional[PodSecurityPolicySubjectReviewStatus] = Field(
        None,
        description='status represents the current information/status for the PodSecurityPolicySubjectReview.',
    )


class PodSecurityPolicyReview(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    spec: PodSecurityPolicyReviewSpec = Field(
        ..., description='spec is the PodSecurityPolicy to check.'
    )
    status: Optional[PodSecurityPolicyReviewStatus] = Field(
        None,
        description='status represents the current information/status for the PodSecurityPolicyReview.',
    )
