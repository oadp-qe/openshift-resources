# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field

from ...k8s.apimachinery.pkg.apis.meta import v1


class MatchExpression(BaseModel):
    operator: str = Field(
        ...,
        description="Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.",
    )
    scopeName: str = Field(
        ..., description='The name of the scope that the selector applies to.'
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class ScopeSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpression]] = Field(
        None,
        description='A list of scope selector requirements by scope of the resources.',
    )


class Quota(BaseModel):
    hard: Optional[Dict[str, Any]] = Field(
        None,
        description='hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/',
    )
    scopeSelector: Optional[ScopeSelector] = Field(
        None,
        description='scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.',
    )
    scopes: Optional[List[str]] = Field(
        None,
        description='A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.',
    )


class Selector(BaseModel):
    annotations: Optional[Any] = Field(
        None, description='AnnotationSelector is used to select projects by annotation.'
    )
    labels: Optional[Any] = Field(
        None, description='LabelSelector is used to select projects by label.'
    )


class Spec(BaseModel):
    quota: Quota = Field(..., description='Quota defines the desired quota')
    selector: Selector = Field(
        ...,
        description='Selector is the selector used to match projects. It should only select active projects on the scale of dozens (though it can select many more less active projects).  These projects will contend on object creation through this resource.',
    )


class Total(BaseModel):
    hard: Optional[Dict[str, Any]] = Field(
        None,
        description='Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/',
    )
    used: Optional[Dict[str, Any]] = Field(
        None,
        description='Used is the current observed total usage of the resource in the namespace.',
    )


class Status(BaseModel):
    namespaces: Optional[Any] = Field(
        None,
        description='Namespaces slices the usage by project.  This division allows for quick resolution of deletion reconciliation inside of a single project without requiring a recalculation across all projects.  This can be used to pull the deltas for a given project.',
    )
    total: Total = Field(
        ...,
        description='Total defines the actual enforced quota and its current usage across all projects',
    )


class ClusterResourceQuota(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: v1.ObjectMeta = Field(
        ...,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Spec = Field(..., description='Spec defines the desired quota')
    status: Optional[Status] = Field(
        None,
        description='Status defines the actual enforced quota and its current usage',
    )


class ClusterResourceQuotaList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ClusterResourceQuota] = Field(
        ...,
        description='List of clusterresourcequotas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
