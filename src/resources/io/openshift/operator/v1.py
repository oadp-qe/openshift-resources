# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, conint, constr

from ...k8s.apimachinery.pkg.apis.meta import v1


class LogLevel(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class OperatorLogLevel(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class Spec(BaseModel):
    logLevel: Optional[LogLevel] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    managementState: Optional[
        constr(regex=r'^(Managed|Unmanaged|Force|Removed)$')
    ] = Field(
        None,
        description='managementState indicates whether and how the operator should manage the component',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevel] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )


class Condition(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class Generation(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class OauthAPIServer(BaseModel):
    latestAvailableRevision: Optional[conint(ge=0)] = Field(
        None,
        description='LatestAvailableRevision is the latest revision used as suffix of revisioned secrets like encryption-config. A new revision causes a new deployment of pods.',
    )


class Status(BaseModel):
    conditions: Optional[List[Condition]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[Generation]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    oauthAPIServer: Optional[OauthAPIServer] = Field(
        None, description='OAuthAPIServer holds status specific only to oauth-apiserver'
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class LogLevelModel(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class OperatorLogLevelModel(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class SpecModel(BaseModel):
    logLevel: Optional[LogLevelModel] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    managementState: Optional[
        constr(regex=r'^(Managed|Unmanaged|Force|Removed)$')
    ] = Field(
        None,
        description='managementState indicates whether and how the operator should manage the component',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevelModel] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )


class ConditionModel(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class GenerationModel(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class StatusModel(BaseModel):
    conditions: Optional[List[ConditionModel]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[GenerationModel]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class CredentialsMode(Enum):
    _ = ''
    Manual = 'Manual'
    Mint = 'Mint'
    Passthrough = 'Passthrough'


class LogLevelModel1(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class OperatorLogLevelModel1(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class SpecModel1(BaseModel):
    credentialsMode: Optional[CredentialsMode] = Field(
        None,
        description='CredentialsMode allows informing CCO that it should not attempt to dynamically determine the root cloud credentials capabilities, and it should just run in the specified mode. It also allows putting the operator into "manual" mode if desired. Leaving the field in default mode runs CCO so that the cluster\'s cloud credentials will be dynamically probed for capabilities (on supported clouds/platforms). Supported modes:   AWS/Azure/GCP: "" (Default), "Mint", "Passthrough", "Manual"   Others: Do not set value as other platforms only support running in "Passthrough"',
    )
    logLevel: Optional[LogLevelModel1] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    managementState: Optional[
        constr(regex=r'^(Managed|Unmanaged|Force|Removed)$')
    ] = Field(
        None,
        description='managementState indicates whether and how the operator should manage the component',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevelModel1] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )


class ConditionModel1(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class GenerationModel1(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class StatusModel1(BaseModel):
    conditions: Optional[List[ConditionModel1]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[GenerationModel1]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class LogLevelModel2(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class OperatorLogLevelModel2(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class SpecModel2(BaseModel):
    logLevel: Optional[LogLevelModel2] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    managementState: Optional[
        constr(regex=r'^(Managed|Unmanaged|Force|Removed)$')
    ] = Field(
        None,
        description='managementState indicates whether and how the operator should manage the component',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevelModel2] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )


class ConditionModel2(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class GenerationModel2(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class StatusModel2(BaseModel):
    conditions: Optional[List[ConditionModel2]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[GenerationModel2]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class LogLevelModel3(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class OperatorLogLevelModel3(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class SpecModel3(BaseModel):
    logLevel: Optional[LogLevelModel3] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    managementState: Optional[
        constr(regex=r'^(Managed|Unmanaged|Force|Removed)$')
    ] = Field(
        None,
        description='managementState indicates whether and how the operator should manage the component',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevelModel3] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )


class ConditionModel3(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class GenerationModel3(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class StatusModel3(BaseModel):
    conditions: Optional[List[ConditionModel3]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[GenerationModel3]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class AddPage(BaseModel):
    disabledActions: Optional[List[str]] = Field(
        None,
        description='disabledActions is a list of actions that are not shown to users. Each action in the list is represented by its ID.',
        min_items=1,
    )


class CustomLogoFile(BaseModel):
    key: Optional[str] = Field(
        None,
        description='Key allows pointing to a specific key/value inside of the configmap.  This is useful for logical file references.',
    )
    name: Optional[str] = None


class Subcategory(BaseModel):
    id: constr(regex=r'^[A-Za-z0-9-_]+$', min_length=1, max_length=32) = Field(
        ...,
        description='ID is an identifier used in the URL to enable deep linking in console. ID is required and must have 1-32 URL safe (A-Z, a-z, 0-9, - and _) characters.',
    )
    label: constr(min_length=1, max_length=64) = Field(
        ...,
        description='label defines a category display label. It is required and must have 1-64 characters.',
    )
    tags: Optional[List[str]] = Field(
        None,
        description='tags is a list of strings that will match the category. A selected category show all items which has at least one overlapping tag between category and item.',
    )


class Category(BaseModel):
    id: constr(regex=r'^[A-Za-z0-9-_]+$', min_length=1, max_length=32) = Field(
        ...,
        description='ID is an identifier used in the URL to enable deep linking in console. ID is required and must have 1-32 URL safe (A-Z, a-z, 0-9, - and _) characters.',
    )
    label: constr(min_length=1, max_length=64) = Field(
        ...,
        description='label defines a category display label. It is required and must have 1-64 characters.',
    )
    subcategories: Optional[List[Subcategory]] = Field(
        None, description='subcategories defines a list of child categories.'
    )
    tags: Optional[List[str]] = Field(
        None,
        description='tags is a list of strings that will match the category. A selected category show all items which has at least one overlapping tag between category and item.',
    )


class DeveloperCatalog(BaseModel):
    categories: Optional[List[Category]] = Field(
        None, description='categories which are shown in the developer catalog.'
    )


class ProjectAccess(BaseModel):
    availableClusterRoles: Optional[List[str]] = Field(
        None,
        description='availableClusterRoles is the list of ClusterRole names that are assignable to users through the project access tab.',
    )


class QuickStarts(BaseModel):
    disabled: Optional[List[str]] = Field(
        None,
        description='disabled is a list of ConsoleQuickStart resource names that are not shown to users.',
    )


class Customization(BaseModel):
    addPage: Optional[AddPage] = Field(
        None,
        description='addPage allows customizing actions on the Add page in developer perspective.',
    )
    brand: Optional[
        constr(regex=r'^$|^(ocp|origin|okd|dedicated|online|azure)$')
    ] = Field(
        None,
        description='brand is the default branding of the web console which can be overridden by providing the brand field.  There is a limited set of specific brand options. This field controls elements of the console such as the logo. Invalid value will prevent a console rollout.',
    )
    customLogoFile: Optional[CustomLogoFile] = Field(
        None,
        description="customLogoFile replaces the default OpenShift logo in the masthead and about dialog. It is a reference to a ConfigMap in the openshift-config namespace. This can be created with a command like 'oc create configmap custom-logo --from-file=/path/to/file -n openshift-config'. Image size must be less than 1 MB due to constraints on the ConfigMap size. The ConfigMap key should include a file extension so that the console serves the file with the correct MIME type. Recommended logo specifications: Dimensions: Max height of 68px and max width of 200px SVG format preferred",
    )
    customProductName: Optional[str] = Field(
        None,
        description='customProductName is the name that will be displayed in page titles, logo alt text, and the about dialog instead of the normal OpenShift product name.',
    )
    developerCatalog: Optional[DeveloperCatalog] = Field(
        None,
        description='developerCatalog allows to configure the shown developer catalog categories.',
    )
    documentationBaseURL: Optional[
        constr(
            regex=r'^$|^((https):\/\/?)[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|\/?))\/$'
        )
    ] = Field(
        None,
        description='documentationBaseURL links to external documentation are shown in various sections of the web console.  Providing documentationBaseURL will override the default documentation URL. Invalid value will prevent a console rollout.',
    )
    projectAccess: Optional[ProjectAccess] = Field(
        None,
        description='projectAccess allows customizing the available list of ClusterRoles in the Developer perspective Project access page which can be used by a project admin to specify roles to other users and restrict access within the project. If set, the list will replace the default ClusterRole options.',
    )
    quickStarts: Optional[QuickStarts] = Field(
        None,
        description='quickStarts allows customization of available ConsoleQuickStart resources in console.',
    )


class LogLevelModel4(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class OperatorLogLevelModel4(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class Statuspage(BaseModel):
    pageID: Optional[str] = Field(
        None,
        description='pageID is the unique ID assigned by Statuspage for your page. This must be a public page.',
    )


class Providers(BaseModel):
    statuspage: Optional[Statuspage] = Field(
        None,
        description='statuspage contains ID for statuspage.io page that provides status info about.',
    )


class Secret(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced secret'
    )


class Route(BaseModel):
    hostname: Optional[str] = Field(
        None,
        description='hostname is the desired custom domain under which console will be available.',
    )
    secret: Optional[Secret] = Field(
        None,
        description='secret points to secret in the openshift-config namespace that contains custom certificate and key and needs to be created manually by the cluster admin. Referenced Secret is required to contain following key value pairs: - "tls.crt" - to specifies custom certificate - "tls.key" - to specifies private key of the custom certificate If the custom hostname uses the default routing suffix of the cluster, the Secret specification for a serving certificate will not be needed.',
    )


class SpecModel4(BaseModel):
    customization: Optional[Customization] = Field(
        None,
        description='customization is used to optionally provide a small set of customization options to the web console.',
    )
    logLevel: Optional[LogLevelModel4] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    managementState: Optional[
        constr(regex=r'^(Managed|Unmanaged|Force|Removed)$')
    ] = Field(
        None,
        description='managementState indicates whether and how the operator should manage the component',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevelModel4] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    plugins: Optional[List[str]] = Field(
        None, description='plugins defines a list of enabled console plugin names.'
    )
    providers: Optional[Providers] = Field(
        None,
        description='providers contains configuration for using specific service providers.',
    )
    route: Optional[Route] = Field(
        None,
        description='route contains hostname and secret reference that contains the serving certificate. If a custom route is specified, a new route will be created with the provided hostname, under which console will be available. In case of custom hostname uses the default routing suffix of the cluster, the Secret specification for a serving certificate will not be needed. In case of custom hostname points to an arbitrary domain, manual DNS configurations steps are necessary. The default console route will be maintained to reserve the default hostname for console if the custom route is removed. If not specified, default route will be used. DEPRECATED',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )


class ConditionModel4(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class GenerationModel4(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class StatusModel4(BaseModel):
    conditions: Optional[List[ConditionModel4]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[GenerationModel4]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class LogLevelModel5(Enum):
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'


class Toleration(BaseModel):
    effect: Optional[str] = Field(
        None,
        description='Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
    )
    key: Optional[str] = Field(
        None,
        description='Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
    )
    operator: Optional[str] = Field(
        None,
        description="Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
    )
    tolerationSeconds: Optional[int] = Field(
        None,
        description='TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
    )
    value: Optional[str] = Field(
        None,
        description='Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
    )


class NodePlacement(BaseModel):
    nodeSelector: Optional[Dict[str, str]] = Field(
        None,
        description='nodeSelector is the node selector applied to DNS pods. \n If empty, the default is used, which is currently the following: \n   kubernetes.io/os: linux \n This default is subject to change. \n If set, the specified selector is used and replaces the default.',
    )
    tolerations: Optional[List[Toleration]] = Field(
        None,
        description='tolerations is a list of tolerations applied to DNS pods. \n If empty, the DNS operator sets a toleration for the "node-role.kubernetes.io/master" taint.  This default is subject to change.  Specifying tolerations without including a toleration for the "node-role.kubernetes.io/master" taint may be risky as it could lead to an outage if all worker nodes become unavailable. \n Note that the daemon controller adds some tolerations as well.  See https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/',
    )


class OperatorLogLevelModel5(Enum):
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'


class Policy(Enum):
    Random = 'Random'
    RoundRobin = 'RoundRobin'
    Sequential = 'Sequential'


class CaBundle(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class Tls(BaseModel):
    caBundle: Optional[CaBundle] = Field(
        None,
        description='caBundle references a ConfigMap that must contain either a single CA Certificate or a CA Bundle. This allows cluster administrators to provide their own CA or CA bundle for validating the certificate of upstream resolvers. \n 1. The configmap must contain a `ca-bundle.crt` key. 2. The value must be a PEM encoded CA certificate or CA bundle. 3. The administrator must create this configmap in the openshift-config namespace. 4. The upstream server certificate must contain a Subject Alternative Name (SAN) that matches ServerName.',
    )
    serverName: constr(
        regex=r'^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*$',
        max_length=253,
    ) = Field(
        ...,
        description='serverName is the upstream server to connect to when forwarding DNS queries. This is required when Transport is set to "TLS". ServerName will be validated against the DNS naming conventions in RFC 1123 and should match the TLS certificate installed in the upstream resolver(s).',
    )


class Transport(Enum):
    TLS = 'TLS'
    Cleartext = 'Cleartext'
    _ = ''


class TransportConfig(BaseModel):
    tls: Optional[Tls] = Field(
        None,
        description='tls contains the additional configuration options to use when Transport is set to "TLS".',
    )
    transport: Optional[Transport] = Field(
        None,
        description='transport allows cluster administrators to opt-in to using a DNS-over-TLS connection between cluster DNS and an upstream resolver(s). Configuring TLS as the transport at this level without configuring a CABundle will result in the system certificates being used to verify the serving certificate of the upstream resolver(s). \n Possible values: "" (empty) - This means no explicit choice has been made and the platform chooses the default which is subject to change over time. The current default is "Cleartext". "Cleartext" - Cluster admin specified cleartext option. This results in the same functionality as an empty value but may be useful when a cluster admin wants to be more explicit about the transport, or wants to switch from "TLS" to "Cleartext" explicitly. "TLS" - This indicates that DNS queries should be sent over a TLS connection. If Transport is set to TLS, you MUST also set ServerName. If a port is not included with the upstream IP, port 853 will be tried by default per RFC 7858 section 3.1; https://datatracker.ietf.org/doc/html/rfc7858#section-3.1.',
    )


class ForwardPlugin(BaseModel):
    policy: Optional[Policy] = Field(
        None,
        description='policy is used to determine the order in which upstream servers are selected for querying. Any one of the following values may be specified: \n * "Random" picks a random upstream server for each query. * "RoundRobin" picks upstream servers in a round-robin order, moving to the next server for each new query. * "Sequential" tries querying upstream servers in a sequential order until one responds, starting with the first server for each new query. \n The default value is "Random"',
    )
    transportConfig: Optional[TransportConfig] = Field(
        None,
        description='transportConfig is used to configure the transport type, server name, and optional custom CA or CA bundle to use when forwarding DNS requests to an upstream resolver. \n The default value is "" (empty) which results in a standard cleartext connection being used when forwarding DNS requests to an upstream resolver.',
    )
    upstreams: Optional[List[str]] = Field(
        None,
        description='upstreams is a list of resolvers to forward name queries for subdomains of Zones. Each instance of CoreDNS performs health checking of Upstreams. When a healthy upstream returns an error during the exchange, another resolver is tried from Upstreams. The Upstreams are selected in the order specified in Policy. Each upstream is represented by an IP address or IP:port if the upstream listens on a port other than 53. \n A maximum of 15 upstreams is allowed per ForwardPlugin.',
        max_items=15,
    )


class Server(BaseModel):
    forwardPlugin: Optional[ForwardPlugin] = Field(
        None,
        description='forwardPlugin defines a schema for configuring CoreDNS to proxy DNS messages to upstream resolvers.',
    )
    name: Optional[str] = Field(
        None,
        description='name is required and specifies a unique name for the server. Name must comply with the Service Name Syntax of rfc6335.',
    )
    zones: Optional[List[str]] = Field(
        None,
        description='zones is required and specifies the subdomains that Server is authoritative for. Zones must conform to the rfc1123 definition of a subdomain. Specifying the cluster domain (i.e., "cluster.local") is invalid.',
    )


class PolicyModel(Enum):
    Random = 'Random'
    RoundRobin = 'RoundRobin'
    Sequential = 'Sequential'


class CaBundleModel(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class TlsModel(BaseModel):
    caBundle: Optional[CaBundleModel] = Field(
        None,
        description='caBundle references a ConfigMap that must contain either a single CA Certificate or a CA Bundle. This allows cluster administrators to provide their own CA or CA bundle for validating the certificate of upstream resolvers. \n 1. The configmap must contain a `ca-bundle.crt` key. 2. The value must be a PEM encoded CA certificate or CA bundle. 3. The administrator must create this configmap in the openshift-config namespace. 4. The upstream server certificate must contain a Subject Alternative Name (SAN) that matches ServerName.',
    )
    serverName: constr(
        regex=r'^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*$',
        max_length=253,
    ) = Field(
        ...,
        description='serverName is the upstream server to connect to when forwarding DNS queries. This is required when Transport is set to "TLS". ServerName will be validated against the DNS naming conventions in RFC 1123 and should match the TLS certificate installed in the upstream resolver(s).',
    )


class TransportModel(Enum):
    TLS = 'TLS'
    Cleartext = 'Cleartext'
    _ = ''


class TransportConfigModel(BaseModel):
    tls: Optional[TlsModel] = Field(
        None,
        description='tls contains the additional configuration options to use when Transport is set to "TLS".',
    )
    transport: Optional[TransportModel] = Field(
        None,
        description='transport allows cluster administrators to opt-in to using a DNS-over-TLS connection between cluster DNS and an upstream resolver(s). Configuring TLS as the transport at this level without configuring a CABundle will result in the system certificates being used to verify the serving certificate of the upstream resolver(s). \n Possible values: "" (empty) - This means no explicit choice has been made and the platform chooses the default which is subject to change over time. The current default is "Cleartext". "Cleartext" - Cluster admin specified cleartext option. This results in the same functionality as an empty value but may be useful when a cluster admin wants to be more explicit about the transport, or wants to switch from "TLS" to "Cleartext" explicitly. "TLS" - This indicates that DNS queries should be sent over a TLS connection. If Transport is set to TLS, you MUST also set ServerName. If a port is not included with the upstream IP, port 853 will be tried by default per RFC 7858 section 3.1; https://datatracker.ietf.org/doc/html/rfc7858#section-3.1.',
    )


class Type(Enum):
    SystemResolvConf = 'SystemResolvConf'
    Network = 'Network'
    _ = ''


class Upstream(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Address must be defined when Type is set to Network. It will be ignored otherwise. It must be a valid ipv4 or ipv6 address.',
    )
    port: Optional[conint(ge=1, le=65535)] = Field(
        None,
        description='Port may be defined when Type is set to Network. It will be ignored otherwise. Port must be between 65535',
    )
    type: Type = Field(
        ...,
        description='Type defines whether this upstream contains an IP/IP:port resolver or the local /etc/resolv.conf. Type accepts 2 possible values: SystemResolvConf or Network. \n * When SystemResolvConf is used, the Upstream structure does not require any further fields to be defined:   /etc/resolv.conf will be used * When Network is used, the Upstream structure must contain at least an Address',
    )


class UpstreamResolvers(BaseModel):
    policy: Optional[PolicyModel] = Field(
        None,
        description='Policy is used to determine the order in which upstream servers are selected for querying. Any one of the following values may be specified: \n * "Random" picks a random upstream server for each query. * "RoundRobin" picks upstream servers in a round-robin order, moving to the next server for each new query. * "Sequential" tries querying upstream servers in a sequential order until one responds, starting with the first server for each new query. \n The default value is "Sequential"',
    )
    transportConfig: Optional[TransportConfigModel] = Field(
        None,
        description='transportConfig is used to configure the transport type, server name, and optional custom CA or CA bundle to use when forwarding DNS requests to an upstream resolver. \n The default value is "" (empty) which results in a standard cleartext connection being used when forwarding DNS requests to an upstream resolver.',
    )
    upstreams: Optional[List[Upstream]] = Field(
        None,
        description='Upstreams is a list of resolvers to forward name queries for the "." domain. Each instance of CoreDNS performs health checking of Upstreams. When a healthy upstream returns an error during the exchange, another resolver is tried from Upstreams. The Upstreams are selected in the order specified in Policy. \n A maximum of 15 upstreams is allowed per ForwardPlugin. If no Upstreams are specified, /etc/resolv.conf is used by default',
        max_items=15,
    )


class SpecModel5(BaseModel):
    logLevel: Optional[LogLevelModel5] = Field(
        None,
        description='logLevel describes the desired logging verbosity for CoreDNS. Any one of the following values may be specified: * Normal logs errors from upstream resolvers. * Debug logs errors, NXDOMAIN responses, and NODATA responses. * Trace logs errors and all responses.  Setting logLevel: Trace will produce extremely verbose logs. Valid values are: "Normal", "Debug", "Trace". Defaults to "Normal".',
    )
    managementState: Optional[
        constr(regex=r'^(Managed|Unmanaged|Force|Removed)$')
    ] = Field(
        None,
        description='managementState indicates whether the DNS operator should manage cluster DNS',
    )
    nodePlacement: Optional[NodePlacement] = Field(
        None,
        description='nodePlacement provides explicit control over the scheduling of DNS pods. \n Generally, it is useful to run a DNS pod on every node so that DNS queries are always handled by a local DNS pod instead of going over the network to a DNS pod on another node.  However, security policies may require restricting the placement of DNS pods to specific nodes. For example, if a security policy prohibits pods on arbitrary nodes from communicating with the API, a node selector can be specified to restrict DNS pods to nodes that are permitted to communicate with the API.  Conversely, if running DNS pods on nodes with a particular taint is desired, a toleration can be specified for that taint. \n If unset, defaults are used. See nodePlacement for more details.',
    )
    operatorLogLevel: Optional[OperatorLogLevelModel5] = Field(
        None,
        description='operatorLogLevel controls the logging level of the DNS Operator. Valid values are: "Normal", "Debug", "Trace". Defaults to "Normal". setting operatorLogLevel: Trace will produce extremely verbose logs.',
    )
    servers: Optional[List[Server]] = Field(
        None,
        description='servers is a list of DNS resolvers that provide name query delegation for one or more subdomains outside the scope of the cluster domain. If servers consists of more than one Server, longest suffix match will be used to determine the Server. \n For example, if there are two Servers, one for "foo.com" and another for "a.foo.com", and the name query is for "www.a.foo.com", it will be routed to the Server with Zone "a.foo.com". \n If this field is nil, no servers are created.',
    )
    upstreamResolvers: Optional[UpstreamResolvers] = Field(
        None,
        description='upstreamResolvers defines a schema for configuring CoreDNS to proxy DNS messages to upstream resolvers for the case of the default (".") server \n If this field is not specified, the upstream used will default to /etc/resolv.conf, with policy "sequential"',
    )


class ConditionModel5(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class StatusModel5(BaseModel):
    clusterDomain: str = Field(
        ...,
        description='clusterDomain is the local cluster DNS domain suffix for DNS services. This will be a subdomain as defined in RFC 1034, section 3.5: https://tools.ietf.org/html/rfc1034#section-3.5 Example: "cluster.local" \n More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service',
    )
    clusterIP: str = Field(
        ...,
        description="clusterIP is the service IP through which this DNS is made available. \n In the case of the default DNS, this will be a well known IP that is used as the default nameserver for pods that are using the default ClusterFirst DNS policy. \n In general, this IP can be specified in a pod's spec.dnsConfig.nameservers list or used explicitly when performing name resolution from within the cluster. Example: dig foo.com @<service IP> \n More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
    )
    conditions: Optional[List[ConditionModel5]] = Field(
        None,
        description='conditions provide information about the state of the DNS on the cluster. \n These are the supported DNS conditions: \n   * Available   - True if the following conditions are met:     * DNS controller daemonset is available.   - False if any of those conditions are unsatisfied.',
    )


class LogLevelModel6(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class OperatorLogLevelModel6(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class SpecModel6(BaseModel):
    failedRevisionLimit: Optional[int] = Field(
        None,
        description='failedRevisionLimit is the number of failed static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)',
    )
    forceRedeploymentReason: Optional[str] = Field(
        None,
        description='forceRedeploymentReason can be used to force the redeployment of the operand by providing a unique string. This provides a mechanism to kick a previously failed deployment and provide a reason why you think it will work this time instead of failing again on the same config.',
    )
    logLevel: Optional[LogLevelModel6] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    managementState: Optional[
        constr(regex=r'^(Managed|Unmanaged|Force|Removed)$')
    ] = Field(
        None,
        description='managementState indicates whether and how the operator should manage the component',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevelModel6] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    succeededRevisionLimit: Optional[int] = Field(
        None,
        description='succeededRevisionLimit is the number of successful static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )


class ConditionModel6(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class GenerationModel5(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class NodeStatus(BaseModel):
    currentRevision: Optional[int] = Field(
        None,
        description='currentRevision is the generation of the most recently successful deployment',
    )
    lastFailedCount: Optional[int] = Field(
        None,
        description='lastFailedCount is how often the installer pod of the last failed revision failed.',
    )
    lastFailedReason: Optional[str] = Field(
        None,
        description='lastFailedReason is a machine readable failure reason string.',
    )
    lastFailedRevision: Optional[int] = Field(
        None,
        description='lastFailedRevision is the generation of the deployment we tried and failed to deploy.',
    )
    lastFailedRevisionErrors: Optional[List[str]] = Field(
        None,
        description='lastFailedRevisionErrors is a list of human readable errors during the failed deployment referenced in lastFailedRevision.',
    )
    lastFailedTime: Optional[datetime] = Field(
        None,
        description='lastFailedTime is the time the last failed revision failed the last time.',
    )
    lastFallbackCount: Optional[int] = Field(
        None,
        description='lastFallbackCount is how often a fallback to a previous revision happened.',
    )
    nodeName: Optional[str] = Field(
        None, description='nodeName is the name of the node'
    )
    targetRevision: Optional[int] = Field(
        None,
        description="targetRevision is the generation of the deployment we're trying to apply",
    )


class StatusModel6(BaseModel):
    conditions: Optional[List[ConditionModel6]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[GenerationModel5]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    latestAvailableRevision: Optional[int] = Field(
        None,
        description='latestAvailableRevision is the deploymentID of the most recent deployment',
    )
    latestAvailableRevisionReason: Optional[str] = Field(
        None,
        description='latestAvailableRevisionReason describe the detailed reason for the most recent deployment',
    )
    nodeStatuses: Optional[List[NodeStatus]] = Field(
        None,
        description='nodeStatuses track the deployment values and errors across individual nodes',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class ClientCA(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class ClientCertificatePolicy(Enum):
    _ = ''
    Required = 'Required'
    Optional = 'Optional'


class ClientTLS(BaseModel):
    allowedSubjectPatterns: Optional[List[str]] = Field(
        None,
        description="allowedSubjectPatterns specifies a list of regular expressions that should be matched against the distinguished name on a valid client certificate to filter requests.  The regular expressions must use PCRE syntax.  If this list is empty, no filtering is performed.  If the list is nonempty, then at least one pattern must match a client certificate's distinguished name or else the ingress controller rejects the certificate and denies the connection.",
    )
    clientCA: ClientCA = Field(
        ...,
        description="clientCA specifies a configmap containing the PEM-encoded CA certificate bundle that should be used to verify a client's certificate.  The administrator must create this configmap in the openshift-config namespace.",
    )
    clientCertificatePolicy: ClientCertificatePolicy = Field(
        ...,
        description='clientCertificatePolicy specifies whether the ingress controller requires clients to provide certificates.  This field accepts the values "Required" or "Optional". \n Note that the ingress controller only checks client certificates for edge-terminated and reencrypt TLS routes; it cannot check certificates for cleartext HTTP or passthrough TLS routes.',
    )


class DefaultCertificate(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class Protocol(Enum):
    _ = ''
    TCP = 'TCP'
    PROXY = 'PROXY'


class HostNetwork(BaseModel):
    httpPort: Optional[conint(ge=0, le=65535)] = Field(
        None,
        description='httpPort is the port on the host which should be used to listen for HTTP requests. This field should be set when port 80 is already in use. The value should not coincide with the NodePort range of the cluster. When the value is 0 or is not specified it defaults to 80.',
    )
    httpsPort: Optional[conint(ge=0, le=65535)] = Field(
        None,
        description='httpsPort is the port on the host which should be used to listen for HTTPS requests. This field should be set when port 443 is already in use. The value should not coincide with the NodePort range of the cluster. When the value is 0 or is not specified it defaults to 443.',
    )
    protocol: Optional[Protocol] = Field(
        None,
        description='protocol specifies whether the IngressController expects incoming connections to use plain TCP or whether the IngressController expects PROXY protocol. \n PROXY protocol can be used with load balancers that support it to communicate the source addresses of client connections when forwarding those connections to the IngressController.  Using PROXY protocol enables the IngressController to report those source addresses instead of reporting the load balancer\'s address in HTTP headers and logs.  Note that enabling PROXY protocol on the IngressController will cause connections to fail if you are not using a load balancer that uses PROXY protocol to forward connections to the IngressController.  See http://www.haproxy.org/download/2.2/doc/proxy-protocol.txt for information about PROXY protocol. \n The following values are valid for this field: \n * The empty string. * "TCP". * "PROXY". \n The empty string specifies the default, which is TCP without PROXY protocol.  Note that the default is subject to change.',
    )
    statsPort: Optional[conint(ge=0, le=65535)] = Field(
        None,
        description='statsPort is the port on the host where the stats from the router are published. The value should not coincide with the NodePort range of the cluster. If an external load balancer is configured to forward connections to this IngressController, the load balancer should use this port for health checks. The load balancer can send HTTP probes on this port on a given node, with the path /healthz/ready to determine if the ingress controller is ready to receive traffic on the node. For proper operation the load balancer must not forward traffic to a node until the health check reports ready. The load balancer should also stop forwarding requests within a maximum of 45 seconds after /healthz/ready starts reporting not-ready. Probing every 5 to 10 seconds, with a 5-second timeout and with a threshold of two successful or failed requests to become healthy or unhealthy respectively, are well-tested values. When the value is 0 or is not specified it defaults to 1936.',
    )


class ClassicLoadBalancer(BaseModel):
    connectionIdleTimeout: Optional[str] = Field(
        None,
        description='connectionIdleTimeout specifies the maximum time period that a connection may be idle before the load balancer closes the connection.  The value must be parseable as a time duration value; see <https://pkg.go.dev/time#ParseDuration>.  A nil or zero value means no opinion, in which case a default value is used.  The default value for this field is 60s.  This default is subject to change.',
    )


class TypeModel(Enum):
    Classic = 'Classic'
    NLB = 'NLB'


class Aws(BaseModel):
    classicLoadBalancer: Optional[ClassicLoadBalancer] = Field(
        None,
        description='classicLoadBalancerParameters holds configuration parameters for an AWS classic load balancer. Present only if type is Classic.',
    )
    networkLoadBalancer: Optional[Dict[str, Any]] = Field(
        None,
        description='networkLoadBalancerParameters holds configuration parameters for an AWS network load balancer. Present only if type is NLB.',
    )
    type: TypeModel = Field(
        ...,
        description='type is the type of AWS load balancer to instantiate for an ingresscontroller. \n Valid values are: \n * "Classic": A Classic Load Balancer that makes routing decisions at either   the transport layer (TCP/SSL) or the application layer (HTTP/HTTPS). See   the following for additional details: \n     https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html#clb \n * "NLB": A Network Load Balancer that makes routing decisions at the   transport layer (TCP/SSL). See the following for additional details: \n     https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html#nlb',
    )


class ClientAccess(Enum):
    Global = 'Global'
    Local = 'Local'


class Gcp(BaseModel):
    clientAccess: Optional[ClientAccess] = Field(
        None,
        description='clientAccess describes how client access is restricted for internal load balancers. \n Valid values are: * "Global": Specifying an internal load balancer with Global client access   allows clients from any region within the VPC to communicate with the load   balancer. \n     https://cloud.google.com/kubernetes-engine/docs/how-to/internal-load-balancing#global_access \n * "Local": Specifying an internal load balancer with Local client access   means only clients within the same region (and VPC) as the GCP load balancer   can communicate with the load balancer. Note that this is the default behavior. \n     https://cloud.google.com/load-balancing/docs/internal#client_access',
    )


class TypeModel1(Enum):
    AWS = 'AWS'
    Azure = 'Azure'
    BareMetal = 'BareMetal'
    GCP = 'GCP'
    Nutanix = 'Nutanix'
    OpenStack = 'OpenStack'
    VSphere = 'VSphere'
    IBM = 'IBM'


class ProviderParameters(BaseModel):
    aws: Optional[Aws] = Field(
        None,
        description='aws provides configuration settings that are specific to AWS load balancers. \n If empty, defaults will be applied. See specific aws fields for details about their defaults.',
    )
    gcp: Optional[Gcp] = Field(
        None,
        description='gcp provides configuration settings that are specific to GCP load balancers. \n If empty, defaults will be applied. See specific gcp fields for details about their defaults.',
    )
    type: TypeModel1 = Field(
        ...,
        description='type is the underlying infrastructure provider for the load balancer. Allowed values are "AWS", "Azure", "BareMetal", "GCP", "Nutanix", "OpenStack", and "VSphere".',
    )


class Scope(Enum):
    Internal = 'Internal'
    External = 'External'


class LoadBalancer(BaseModel):
    providerParameters: Optional[ProviderParameters] = Field(
        None,
        description='providerParameters holds desired load balancer information specific to the underlying infrastructure provider. \n If empty, defaults will be applied. See specific providerParameters fields for details about their defaults.',
    )
    scope: Scope = Field(
        ...,
        description='scope indicates the scope at which the load balancer is exposed. Possible values are "External" and "Internal".',
    )


class ProtocolModel(Enum):
    _ = ''
    TCP = 'TCP'
    PROXY = 'PROXY'


class NodePort(BaseModel):
    protocol: Optional[ProtocolModel] = Field(
        None,
        description='protocol specifies whether the IngressController expects incoming connections to use plain TCP or whether the IngressController expects PROXY protocol. \n PROXY protocol can be used with load balancers that support it to communicate the source addresses of client connections when forwarding those connections to the IngressController.  Using PROXY protocol enables the IngressController to report those source addresses instead of reporting the load balancer\'s address in HTTP headers and logs.  Note that enabling PROXY protocol on the IngressController will cause connections to fail if you are not using a load balancer that uses PROXY protocol to forward connections to the IngressController.  See http://www.haproxy.org/download/2.2/doc/proxy-protocol.txt for information about PROXY protocol. \n The following values are valid for this field: \n * The empty string. * "TCP". * "PROXY". \n The empty string specifies the default, which is TCP without PROXY protocol.  Note that the default is subject to change.',
    )


class TypeModel2(Enum):
    LoadBalancerService = 'LoadBalancerService'
    HostNetwork = 'HostNetwork'
    Private = 'Private'
    NodePortService = 'NodePortService'


class EndpointPublishingStrategy(BaseModel):
    hostNetwork: Optional[HostNetwork] = Field(
        None,
        description='hostNetwork holds parameters for the HostNetwork endpoint publishing strategy. Present only if type is HostNetwork.',
    )
    loadBalancer: Optional[LoadBalancer] = Field(
        None,
        description='loadBalancer holds parameters for the load balancer. Present only if type is LoadBalancerService.',
    )
    nodePort: Optional[NodePort] = Field(
        None,
        description='nodePort holds parameters for the NodePortService endpoint publishing strategy. Present only if type is NodePortService.',
    )
    private: Optional[Dict[str, Any]] = Field(
        None,
        description='private holds parameters for the Private endpoint publishing strategy. Present only if type is Private.',
    )
    type: TypeModel2 = Field(
        ...,
        description="type is the publishing strategy to use. Valid values are: \n * LoadBalancerService \n Publishes the ingress controller using a Kubernetes LoadBalancer Service. \n In this configuration, the ingress controller deployment uses container networking. A LoadBalancer Service is created to publish the deployment. \n See: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer \n If domain is set, a wildcard DNS record will be managed to point at the LoadBalancer Service's external name. DNS records are managed only in DNS zones defined by dns.config.openshift.io/cluster .spec.publicZone and .spec.privateZone. \n Wildcard DNS management is currently supported only on the AWS, Azure, and GCP platforms. \n * HostNetwork \n Publishes the ingress controller on node ports where the ingress controller is deployed. \n In this configuration, the ingress controller deployment uses host networking, bound to node ports 80 and 443. The user is responsible for configuring an external load balancer to publish the ingress controller via the node ports. \n * Private \n Does not publish the ingress controller. \n In this configuration, the ingress controller deployment uses container networking, and is not explicitly published. The user must manually publish the ingress controller. \n * NodePortService \n Publishes the ingress controller using a Kubernetes NodePort Service. \n In this configuration, the ingress controller deployment uses container networking. A NodePort Service is created to publish the deployment. The specific node ports are dynamically allocated by OpenShift; however, to support static port allocations, user changes to the node port field of the managed NodePort Service will preserved.",
    )


class HttpCompression(BaseModel):
    mimeTypes: Optional[
        List[
            constr(
                regex=r'^(?i)(x-[^][ ()\\<>@,;:"/?.=\x00-\x1F\x7F]+|application|audio|image|message|multipart|text|video)/[^][ ()\\<>@,;:"/?.=\x00-\x1F\x7F]+(; *[^][ ()\\<>@,;:"/?.=\x00-\x1F\x7F]+=([^][ ()\\<>@,;:"/?.=\x00-\x1F\x7F]+|"(\\[\x00-\x7F]|[^\x0D"\\])*"))*$'
            )
        ]
    ] = Field(
        None,
        description='mimeTypes is a list of MIME types that should have compression applied. This list can be empty, in which case the ingress controller does not apply compression. \n Note: Not all MIME types benefit from compression, but HAProxy will still use resources to try to compress if instructed to.  Generally speaking, text (html, css, js, etc.) formats benefit from compression, but formats that are already compressed (image, audio, video, etc.) benefit little in exchange for the time and cpu spent on compressing again. See https://joehonton.medium.com/the-gzip-penalty-d31bd697f1a2',
    )


class HttpEmptyRequestsPolicy(Enum):
    Respond = 'Respond'
    Ignore = 'Ignore'


class HttpErrorCodePages(BaseModel):
    name: str = Field(
        ..., description='name is the metadata.name of the referenced config map'
    )


class ForwardedHeaderPolicy(Enum):
    Append = 'Append'
    Replace = 'Replace'
    IfNone = 'IfNone'
    Never = 'Never'


class UniqueId(BaseModel):
    format: Optional[
        constr(
            regex=r'^(%(%|(\{[-+]?[QXE](,[-+]?[QXE])*\})?([A-Za-z]+|\[[.0-9A-Z_a-z]+(\([^)]+\))?(,[.0-9A-Z_a-z]+(\([^)]+\))?)*\]))|[^%[:cntrl:]])*$',
            min_length=0,
            max_length=1024,
        )
    ] = Field(
        None,
        description='format specifies the format for the injected HTTP header\'s value. This field has no effect unless name is specified.  For the HAProxy-based ingress controller implementation, this format uses the same syntax as the HTTP log format.  If the field is empty, the default value is "%{+X}o\\\\ %ci:%cp_%fi:%fp_%Ts_%rt:%pid"; see the corresponding HAProxy documentation: http://cbonte.github.io/haproxy-dconv/2.0/configuration.html#8.2.3',
    )
    name: Optional[
        constr(
            regex=r'^$|^[-!#$%&\'*+.0-9A-Z^_`a-z|~]+$', min_length=0, max_length=1024
        )
    ] = Field(
        None,
        description='name specifies the name of the HTTP header (for example, "unique-id") that the ingress controller should inject into HTTP requests.  The field\'s value must be a valid HTTP header name as defined in RFC 2616 section 4.2.  If the field is empty, no header is injected.',
    )


class HttpHeaders(BaseModel):
    forwardedHeaderPolicy: Optional[ForwardedHeaderPolicy] = Field(
        None,
        description='forwardedHeaderPolicy specifies when and how the IngressController sets the Forwarded, X-Forwarded-For, X-Forwarded-Host, X-Forwarded-Port, X-Forwarded-Proto, and X-Forwarded-Proto-Version HTTP headers.  The value may be one of the following: \n * "Append", which specifies that the IngressController appends the   headers, preserving existing headers. \n * "Replace", which specifies that the IngressController sets the   headers, replacing any existing Forwarded or X-Forwarded-* headers. \n * "IfNone", which specifies that the IngressController sets the   headers if they are not already set. \n * "Never", which specifies that the IngressController never sets the   headers, preserving any existing headers. \n By default, the policy is "Append".',
    )
    headerNameCaseAdjustments: Optional[Any] = Field(
        None,
        description='headerNameCaseAdjustments specifies case adjustments that can be applied to HTTP header names.  Each adjustment is specified as an HTTP header name with the desired capitalization.  For example, specifying "X-Forwarded-For" indicates that the "x-forwarded-for" HTTP header should be adjusted to have the specified capitalization. \n These adjustments are only applied to cleartext, edge-terminated, and re-encrypt routes, and only when using HTTP/1. \n For request headers, these adjustments are applied only for routes that have the haproxy.router.openshift.io/h1-adjust-case=true annotation.  For response headers, these adjustments are applied to all HTTP responses. \n If this field is empty, no request headers are adjusted.',
    )
    uniqueId: Optional[UniqueId] = Field(
        None,
        description='uniqueId describes configuration for a custom HTTP header that the ingress controller should inject into incoming HTTP requests. Typically, this header is configured to have a value that is unique to the HTTP request.  The header can be used by applications or included in access logs to facilitate tracing individual HTTP requests. \n If this field is empty, no such header is injected into requests.',
    )


class Facility(Enum):
    kern = 'kern'
    user = 'user'
    mail = 'mail'
    daemon = 'daemon'
    auth = 'auth'
    syslog = 'syslog'
    lpr = 'lpr'
    news = 'news'
    uucp = 'uucp'
    cron = 'cron'
    auth2 = 'auth2'
    ftp = 'ftp'
    ntp = 'ntp'
    audit = 'audit'
    alert = 'alert'
    cron2 = 'cron2'
    local0 = 'local0'
    local1 = 'local1'
    local2 = 'local2'
    local3 = 'local3'
    local4 = 'local4'
    local5 = 'local5'
    local6 = 'local6'
    local7 = 'local7'


class Syslog(BaseModel):
    address: str = Field(
        ...,
        description='address is the IP address of the syslog endpoint that receives log messages.',
    )
    facility: Optional[Facility] = Field(
        None,
        description='facility specifies the syslog facility of log messages. \n If this field is empty, the facility is "local1".',
    )
    maxLength: Optional[conint(ge=480, le=4096)] = Field(
        None,
        description='maxLength is the maximum length of the syslog message \n If this field is empty, the maxLength is set to "1024".',
    )
    port: conint(ge=1, le=65535) = Field(
        ...,
        description='port is the UDP port number of the syslog endpoint that receives log messages.',
    )


class TypeModel3(Enum):
    Container = 'Container'
    Syslog = 'Syslog'


class Destination(BaseModel):
    container: Optional[Dict[str, Any]] = Field(
        None,
        description='container holds parameters for the Container logging destination. Present only if type is Container.',
    )
    syslog: Optional[Syslog] = Field(
        None,
        description='syslog holds parameters for a syslog endpoint.  Present only if type is Syslog.',
    )
    type: TypeModel3 = Field(
        ...,
        description='type is the type of destination for logs.  It must be one of the following: \n * Container \n The ingress operator configures the sidecar container named "logs" on the ingress controller pod and configures the ingress controller to write logs to the sidecar.  The logs are then available as container logs.  The expectation is that the administrator configures a custom logging solution that reads logs from this sidecar.  Note that using container logs means that logs may be dropped if the rate of logs exceeds the container runtime\'s or the custom logging solution\'s capacity. \n * Syslog \n Logs are sent to a syslog endpoint.  The administrator must specify an endpoint that can receive syslog messages.  The expectation is that the administrator has configured a custom syslog instance.',
    )


class HttpCaptureHeaders(BaseModel):
    request: Optional[Any] = Field(
        None,
        description='request specifies which HTTP request headers to capture. \n If this field is empty, no request headers are captured.',
    )
    response: Optional[Any] = Field(
        None,
        description='response specifies which HTTP response headers to capture. \n If this field is empty, no response headers are captured.',
    )


class LogEmptyRequests(Enum):
    Log = 'Log'
    Ignore = 'Ignore'


class Access(BaseModel):
    destination: Destination = Field(
        ..., description='destination is where access logs go.'
    )
    httpCaptureCookies: Optional[Any] = Field(
        None,
        description='httpCaptureCookies specifies HTTP cookies that should be captured in access logs.  If this field is empty, no cookies are captured.',
    )
    httpCaptureHeaders: Optional[HttpCaptureHeaders] = Field(
        None,
        description='httpCaptureHeaders defines HTTP headers that should be captured in access logs.  If this field is empty, no headers are captured. \n Note that this option only applies to cleartext HTTP connections and to secure HTTP connections for which the ingress controller terminates encryption (that is, edge-terminated or reencrypt connections).  Headers cannot be captured for TLS passthrough connections.',
    )
    httpLogFormat: Optional[str] = Field(
        None,
        description="httpLogFormat specifies the format of the log message for an HTTP request. \n If this field is empty, log messages use the implementation's default HTTP log format.  For HAProxy's default HTTP log format, see the HAProxy documentation: http://cbonte.github.io/haproxy-dconv/2.0/configuration.html#8.2.3 \n Note that this format only applies to cleartext HTTP connections and to secure HTTP connections for which the ingress controller terminates encryption (that is, edge-terminated or reencrypt connections).  It does not affect the log format for TLS passthrough connections.",
    )
    logEmptyRequests: Optional[LogEmptyRequests] = Field(
        None,
        description='logEmptyRequests specifies how connections on which no request is received should be logged.  Typically, these empty requests come from load balancers\' health probes or Web browsers\' speculative connections ("preconnect"), in which case logging these requests may be undesirable.  However, these requests may also be caused by network errors, in which case logging empty requests may be useful for diagnosing the errors.  In addition, these requests may be caused by port scans, in which case logging empty requests may aid in detecting intrusion attempts.  Allowed values for this field are "Log" and "Ignore".  The default value is "Log".',
    )


class Logging(BaseModel):
    access: Optional[Access] = Field(
        None,
        description='access describes how the client requests should be logged. \n If this field is empty, access logging is disabled.',
    )


class MatchExpression(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpression]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NodeSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class TolerationModel(BaseModel):
    effect: Optional[str] = Field(
        None,
        description='Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
    )
    key: Optional[str] = Field(
        None,
        description='Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
    )
    operator: Optional[str] = Field(
        None,
        description="Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
    )
    tolerationSeconds: Optional[int] = Field(
        None,
        description='TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
    )
    value: Optional[str] = Field(
        None,
        description='Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
    )


class NodePlacementModel(BaseModel):
    nodeSelector: Optional[NodeSelector] = Field(
        None,
        description="nodeSelector is the node selector applied to ingress controller deployments. \n If set, the specified selector is used and replaces the default. \n If unset, the default depends on the value of the defaultPlacement field in the cluster config.openshift.io/v1/ingresses status. \n When defaultPlacement is Workers, the default is: \n   kubernetes.io/os: linux   node-role.kubernetes.io/worker: '' \n When defaultPlacement is ControlPlane, the default is: \n   kubernetes.io/os: linux   node-role.kubernetes.io/master: '' \n These defaults are subject to change.",
    )
    tolerations: Optional[List[TolerationModel]] = Field(
        None,
        description='tolerations is a list of tolerations applied to ingress controller deployments. \n The default is an empty list. \n See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/',
    )


class NamespaceOwnership(Enum):
    InterNamespaceAllowed = 'InterNamespaceAllowed'
    Strict = 'Strict'


class WildcardPolicy(Enum):
    WildcardsAllowed = 'WildcardsAllowed'
    WildcardsDisallowed = 'WildcardsDisallowed'


class RouteAdmission(BaseModel):
    namespaceOwnership: Optional[NamespaceOwnership] = Field(
        None,
        description='namespaceOwnership describes how host name claims across namespaces should be handled. \n Value must be one of: \n - Strict: Do not allow routes in different namespaces to claim the same host. \n - InterNamespaceAllowed: Allow routes to claim different paths of the same   host name across namespaces. \n If empty, the default is Strict.',
    )
    wildcardPolicy: Optional[WildcardPolicy] = Field(
        None,
        description='wildcardPolicy describes how routes with wildcard policies should be handled for the ingress controller. WildcardPolicy controls use of routes [1] exposed by the ingress controller based on the route\'s wildcard policy. \n [1] https://github.com/openshift/api/blob/master/route/v1/types.go \n Note: Updating WildcardPolicy from WildcardsAllowed to WildcardsDisallowed will cause admitted routes with a wildcard policy of Subdomain to stop working. These routes must be updated to a wildcard policy of None to be readmitted by the ingress controller. \n WildcardPolicy supports WildcardsAllowed and WildcardsDisallowed values. \n If empty, defaults to "WildcardsDisallowed".',
    )


class MatchExpressionModel1(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class RouteSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel1]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class TypeModel4(Enum):
    Old = 'Old'
    Intermediate = 'Intermediate'
    Modern = 'Modern'
    Custom = 'Custom'


class TlsSecurityProfile(BaseModel):
    custom: Optional[Any] = Field(
        None,
        description='custom is a user-defined TLS security profile. Be extremely careful using a custom profile as invalid configurations can be catastrophic. An example custom profile looks like this: \n   ciphers:     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256   minTLSVersion: TLSv1.1',
    )
    intermediate: Optional[Any] = Field(
        None,
        description='intermediate is a TLS security profile based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29 \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384   minTLSVersion: TLSv1.2',
    )
    modern: Optional[Any] = Field(
        None,
        description='modern is a TLS security profile based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256   minTLSVersion: TLSv1.3 \n NOTE: Currently unsupported.',
    )
    old: Optional[Any] = Field(
        None,
        description='old is a TLS security profile based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384     - DHE-RSA-CHACHA20-POLY1305     - ECDHE-ECDSA-AES128-SHA256     - ECDHE-RSA-AES128-SHA256     - ECDHE-ECDSA-AES128-SHA     - ECDHE-RSA-AES128-SHA     - ECDHE-ECDSA-AES256-SHA384     - ECDHE-RSA-AES256-SHA384     - ECDHE-ECDSA-AES256-SHA     - ECDHE-RSA-AES256-SHA     - DHE-RSA-AES128-SHA256     - DHE-RSA-AES256-SHA256     - AES128-GCM-SHA256     - AES256-GCM-SHA384     - AES128-SHA256     - AES256-SHA256     - AES128-SHA     - AES256-SHA     - DES-CBC3-SHA   minTLSVersion: TLSv1.0',
    )
    type: Optional[TypeModel4] = Field(
        None,
        description='type is one of Old, Intermediate, Modern or Custom. Custom provides the ability to specify individual TLS security profile parameters. Old, Intermediate and Modern are TLS security profiles based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations \n The profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers are found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be reduced. \n Note that the Modern profile is currently not supported because it is not yet well adopted by common software libraries.',
    )


class TuningOptions(BaseModel):
    clientFinTimeout: Optional[str] = Field(
        None,
        description='clientFinTimeout defines how long a connection will be held open while waiting for the client response to the server/backend closing the connection. \n If unset, the default timeout is 1s',
    )
    clientTimeout: Optional[str] = Field(
        None,
        description='clientTimeout defines how long a connection will be held open while waiting for a client response. \n If unset, the default timeout is 30s',
    )
    headerBufferBytes: Optional[conint(ge=16384)] = Field(
        None,
        description='headerBufferBytes describes how much memory should be reserved (in bytes) for IngressController connection sessions. Note that this value must be at least 16384 if HTTP/2 is enabled for the IngressController (https://tools.ietf.org/html/rfc7540). If this field is empty, the IngressController will use a default value of 32768 bytes. \n Setting this field is generally not recommended as headerBufferBytes values that are too small may break the IngressController and headerBufferBytes values that are too large could cause the IngressController to use significantly more memory than necessary.',
    )
    headerBufferMaxRewriteBytes: Optional[conint(ge=4096)] = Field(
        None,
        description='headerBufferMaxRewriteBytes describes how much memory should be reserved (in bytes) from headerBufferBytes for HTTP header rewriting and appending for IngressController connection sessions. Note that incoming HTTP requests will be limited to (headerBufferBytes - headerBufferMaxRewriteBytes) bytes, meaning headerBufferBytes must be greater than headerBufferMaxRewriteBytes. If this field is empty, the IngressController will use a default value of 8192 bytes. \n Setting this field is generally not recommended as headerBufferMaxRewriteBytes values that are too small may break the IngressController and headerBufferMaxRewriteBytes values that are too large could cause the IngressController to use significantly more memory than necessary.',
    )
    healthCheckInterval: Optional[
        constr(regex=r'^(0|([0-9]+(\.[0-9]+)?(ns|us|µs|μs|ms|s|m|h))+)$')
    ] = Field(
        None,
        description='healthCheckInterval defines how long the router waits between two consecutive health checks on its configured backends.  This value is applied globally as a default for all routes, but may be overridden per-route by the route annotation "router.openshift.io/haproxy.health.check.interval". \n Expects an unsigned duration string of decimal numbers, each with optional fraction and a unit suffix, eg "300ms", "1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs" U+00B5 or "μs" U+03BC), "ms", "s", "m", "h". \n Setting this to less than 5s can cause excess traffic due to too frequent TCP health checks and accompanying SYN packet storms.  Alternatively, setting this too high can result in increased latency, due to backend servers that are no longer available, but haven\'t yet been detected as such. \n An empty or zero healthCheckInterval means no opinion and IngressController chooses a default, which is subject to change over time. Currently the default healthCheckInterval value is 5s. \n Currently the minimum allowed value is 1s and the maximum allowed value is 2147483647ms (24.85 days).  Both are subject to change over time.',
    )
    maxConnections: Optional[int] = Field(
        None,
        description='maxConnections defines the maximum number of simultaneous connections that can be established per HAProxy process. Increasing this value allows each ingress controller pod to handle more connections but at the cost of additional system resources being consumed. \n Permitted values are: empty, 0, -1, and the range 2000-2000000. \n If this field is empty or 0, the IngressController will use the default value of 20000, but the default is subject to change in future releases. \n If the value is -1 then HAProxy will dynamically compute a maximum value based on the available ulimits in the running container. Selecting -1 (i.e., auto) will result in a large value being computed (~520000 on OpenShift >=4.10 clusters) and therefore each HAProxy process will incur significant memory usage compared to the current default of 20000. \n Setting a value that is greater than the current operating system limit will prevent the HAProxy process from starting. \n If you choose a discrete value (e.g., 750000) and the router pod is migrated to a new node, there\'s no guarantee that that new node has identical ulimits configured. In such a scenario the pod would fail to start. If you have nodes with different ulimits configured (e.g., different tuned profiles) and you choose a discrete value then the guidance is to use -1 and let the value be computed dynamically at runtime. \n You can monitor memory usage for router containers with the following metric: \'container_memory_working_set_bytes{container="router",namespace="openshift-ingress"}\'. \n You can monitor memory usage of individual HAProxy processes in router containers with the following metric: \'container_memory_working_set_bytes{container="router",namespace="openshift-ingress"}/container_processes{container="router",namespace="openshift-ingress"}\'.',
    )
    serverFinTimeout: Optional[str] = Field(
        None,
        description='serverFinTimeout defines how long a connection will be held open while waiting for the server/backend response to the client closing the connection. \n If unset, the default timeout is 1s',
    )
    serverTimeout: Optional[str] = Field(
        None,
        description='serverTimeout defines how long a connection will be held open while waiting for a server/backend response. \n If unset, the default timeout is 30s',
    )
    threadCount: Optional[conint(ge=1, le=64)] = Field(
        None,
        description='threadCount defines the number of threads created per HAProxy process. Creating more threads allows each ingress controller pod to handle more connections, at the cost of more system resources being used. HAProxy currently supports up to 64 threads. If this field is empty, the IngressController will use the default value.  The current default is 4 threads, but this may change in future releases. \n Setting this field is generally not recommended. Increasing the number of HAProxy threads allows ingress controller pods to utilize more CPU time under load, potentially starving other pods if set too high. Reducing the number of threads may cause the ingress controller to perform poorly.',
    )
    tlsInspectDelay: Optional[str] = Field(
        None,
        description='tlsInspectDelay defines how long the router can hold data to find a matching route. \n Setting this too short can cause the router to fall back to the default certificate for edge-terminated or reencrypt routes even when a better matching certificate could be used. \n If unset, the default inspect delay is 5s',
    )
    tunnelTimeout: Optional[str] = Field(
        None,
        description='tunnelTimeout defines how long a tunnel connection (including websockets) will be held open while the tunnel is idle. \n If unset, the default timeout is 1h',
    )


class SpecModel7(BaseModel):
    clientTLS: Optional[ClientTLS] = Field(
        None,
        description='clientTLS specifies settings for requesting and verifying client certificates, which can be used to enable mutual TLS for edge-terminated and reencrypt routes.',
    )
    defaultCertificate: Optional[DefaultCertificate] = Field(
        None,
        description="defaultCertificate is a reference to a secret containing the default certificate served by the ingress controller. When Routes don't specify their own certificate, defaultCertificate is used. \n The secret must contain the following keys and data: \n   tls.crt: certificate file contents   tls.key: key file contents \n If unset, a wildcard certificate is automatically generated and used. The certificate is valid for the ingress controller domain (and subdomains) and the generated certificate's CA will be automatically integrated with the cluster's trust store. \n If a wildcard certificate is used and shared by multiple HTTP/2 enabled routes (which implies ALPN) then clients (i.e., notably browsers) are at liberty to reuse open connections. This means a client can reuse a connection to another route and that is likely to fail. This behaviour is generally known as connection coalescing. \n The in-use certificate (whether generated or user-specified) will be automatically integrated with OpenShift's built-in OAuth server.",
    )
    domain: Optional[str] = Field(
        None,
        description='domain is a DNS name serviced by the ingress controller and is used to configure multiple features: \n * For the LoadBalancerService endpoint publishing strategy, domain is   used to configure DNS records. See endpointPublishingStrategy. \n * When using a generated default certificate, the certificate will be valid   for domain and its subdomains. See defaultCertificate. \n * The value is published to individual Route statuses so that end-users   know where to target external DNS records. \n domain must be unique among all IngressControllers, and cannot be updated. \n If empty, defaults to ingress.config.openshift.io/cluster .spec.domain.',
    )
    endpointPublishingStrategy: Optional[EndpointPublishingStrategy] = Field(
        None,
        description='endpointPublishingStrategy is used to publish the ingress controller endpoints to other networks, enable load balancer integrations, etc. \n If unset, the default is based on infrastructure.config.openshift.io/cluster .status.platform: \n   AWS:          LoadBalancerService (with External scope)   Azure:        LoadBalancerService (with External scope)   GCP:          LoadBalancerService (with External scope)   IBMCloud:     LoadBalancerService (with External scope)   AlibabaCloud: LoadBalancerService (with External scope)   Libvirt:      HostNetwork \n Any other platform types (including None) default to HostNetwork. \n endpointPublishingStrategy cannot be updated.',
    )
    httpCompression: Optional[HttpCompression] = Field(
        None,
        description='httpCompression defines a policy for HTTP traffic compression. By default, there is no HTTP compression.',
    )
    httpEmptyRequestsPolicy: Optional[HttpEmptyRequestsPolicy] = Field(
        None,
        description='httpEmptyRequestsPolicy describes how HTTP connections should be handled if the connection times out before a request is received. Allowed values for this field are "Respond" and "Ignore".  If the field is set to "Respond", the ingress controller sends an HTTP 400 or 408 response, logs the connection (if access logging is enabled), and counts the connection in the appropriate metrics.  If the field is set to "Ignore", the ingress controller closes the connection without sending a response, logging the connection, or incrementing metrics.  The default value is "Respond". \n Typically, these connections come from load balancers\' health probes or Web browsers\' speculative connections ("preconnect") and can be safely ignored.  However, these requests may also be caused by network errors, and so setting this field to "Ignore" may impede detection and diagnosis of problems.  In addition, these requests may be caused by port scans, in which case logging empty requests may aid in detecting intrusion attempts.',
    )
    httpErrorCodePages: Optional[HttpErrorCodePages] = Field(
        None,
        description='httpErrorCodePages specifies a configmap with custom error pages. The administrator must create this configmap in the openshift-config namespace. This configmap should have keys in the format "error-page-<error code>.http", where <error code> is an HTTP error code. For example, "error-page-503.http" defines an error page for HTTP 503 responses. Currently only error pages for 503 and 404 responses can be customized. Each value in the configmap should be the full response, including HTTP headers. Eg- https://raw.githubusercontent.com/openshift/router/fadab45747a9b30cc3f0a4b41ad2871f95827a93/images/router/haproxy/conf/error-page-503.http If this field is empty, the ingress controller uses the default error pages.',
    )
    httpHeaders: Optional[HttpHeaders] = Field(
        None,
        description='httpHeaders defines policy for HTTP headers. \n If this field is empty, the default values are used.',
    )
    logging: Optional[Logging] = Field(
        None,
        description='logging defines parameters for what should be logged where.  If this field is empty, operational logs are enabled but access logs are disabled.',
    )
    namespaceSelector: Optional[NamespaceSelector] = Field(
        None,
        description='namespaceSelector is used to filter the set of namespaces serviced by the ingress controller. This is useful for implementing shards. \n If unset, the default is no filtering.',
    )
    nodePlacement: Optional[NodePlacementModel] = Field(
        None,
        description='nodePlacement enables explicit control over the scheduling of the ingress controller. \n If unset, defaults are used. See NodePlacement for more details.',
    )
    replicas: Optional[int] = Field(
        None,
        description="replicas is the desired number of ingress controller replicas. If unset, the default depends on the value of the defaultPlacement field in the cluster config.openshift.io/v1/ingresses status. \n The value of replicas is set based on the value of a chosen field in the Infrastructure CR. If defaultPlacement is set to ControlPlane, the chosen field will be controlPlaneTopology. If it is set to Workers the chosen field will be infrastructureTopology. Replicas will then be set to 1 or 2 based whether the chosen field's value is SingleReplica or HighlyAvailable, respectively. \n These defaults are subject to change.",
    )
    routeAdmission: Optional[RouteAdmission] = Field(
        None,
        description='routeAdmission defines a policy for handling new route claims (for example, to allow or deny claims across namespaces). \n If empty, defaults will be applied. See specific routeAdmission fields for details about their defaults.',
    )
    routeSelector: Optional[RouteSelector] = Field(
        None,
        description='routeSelector is used to filter the set of Routes serviced by the ingress controller. This is useful for implementing shards. \n If unset, the default is no filtering.',
    )
    tlsSecurityProfile: Optional[TlsSecurityProfile] = Field(
        None,
        description='tlsSecurityProfile specifies settings for TLS connections for ingresscontrollers. \n If unset, the default is based on the apiservers.config.openshift.io/cluster resource. \n Note that when using the Old, Intermediate, and Modern profile types, the effective profile configuration is subject to change between releases. For example, given a specification to use the Intermediate profile deployed on release X.Y.Z, an upgrade to release X.Y.Z+1 may cause a new profile configuration to be applied to the ingress controller, resulting in a rollout.',
    )
    tuningOptions: Optional[TuningOptions] = Field(
        None,
        description='tuningOptions defines parameters for adjusting the performance of ingress controller pods. All fields are optional and will use their respective defaults if not set. See specific tuningOptions fields for more details. \n Setting fields within tuningOptions is generally not recommended. The default values are suitable for most configurations.',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides allows specifying unsupported configuration options.  Its use is unsupported.',
    )


class ConditionModel7(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class ProtocolModel1(Enum):
    _ = ''
    TCP = 'TCP'
    PROXY = 'PROXY'


class HostNetworkModel(BaseModel):
    httpPort: Optional[conint(ge=0, le=65535)] = Field(
        None,
        description='httpPort is the port on the host which should be used to listen for HTTP requests. This field should be set when port 80 is already in use. The value should not coincide with the NodePort range of the cluster. When the value is 0 or is not specified it defaults to 80.',
    )
    httpsPort: Optional[conint(ge=0, le=65535)] = Field(
        None,
        description='httpsPort is the port on the host which should be used to listen for HTTPS requests. This field should be set when port 443 is already in use. The value should not coincide with the NodePort range of the cluster. When the value is 0 or is not specified it defaults to 443.',
    )
    protocol: Optional[ProtocolModel1] = Field(
        None,
        description='protocol specifies whether the IngressController expects incoming connections to use plain TCP or whether the IngressController expects PROXY protocol. \n PROXY protocol can be used with load balancers that support it to communicate the source addresses of client connections when forwarding those connections to the IngressController.  Using PROXY protocol enables the IngressController to report those source addresses instead of reporting the load balancer\'s address in HTTP headers and logs.  Note that enabling PROXY protocol on the IngressController will cause connections to fail if you are not using a load balancer that uses PROXY protocol to forward connections to the IngressController.  See http://www.haproxy.org/download/2.2/doc/proxy-protocol.txt for information about PROXY protocol. \n The following values are valid for this field: \n * The empty string. * "TCP". * "PROXY". \n The empty string specifies the default, which is TCP without PROXY protocol.  Note that the default is subject to change.',
    )
    statsPort: Optional[conint(ge=0, le=65535)] = Field(
        None,
        description='statsPort is the port on the host where the stats from the router are published. The value should not coincide with the NodePort range of the cluster. If an external load balancer is configured to forward connections to this IngressController, the load balancer should use this port for health checks. The load balancer can send HTTP probes on this port on a given node, with the path /healthz/ready to determine if the ingress controller is ready to receive traffic on the node. For proper operation the load balancer must not forward traffic to a node until the health check reports ready. The load balancer should also stop forwarding requests within a maximum of 45 seconds after /healthz/ready starts reporting not-ready. Probing every 5 to 10 seconds, with a 5-second timeout and with a threshold of two successful or failed requests to become healthy or unhealthy respectively, are well-tested values. When the value is 0 or is not specified it defaults to 1936.',
    )


class ClassicLoadBalancerModel(BaseModel):
    connectionIdleTimeout: Optional[str] = Field(
        None,
        description='connectionIdleTimeout specifies the maximum time period that a connection may be idle before the load balancer closes the connection.  The value must be parseable as a time duration value; see <https://pkg.go.dev/time#ParseDuration>.  A nil or zero value means no opinion, in which case a default value is used.  The default value for this field is 60s.  This default is subject to change.',
    )


class TypeModel5(Enum):
    Classic = 'Classic'
    NLB = 'NLB'


class AwsModel(BaseModel):
    classicLoadBalancer: Optional[ClassicLoadBalancerModel] = Field(
        None,
        description='classicLoadBalancerParameters holds configuration parameters for an AWS classic load balancer. Present only if type is Classic.',
    )
    networkLoadBalancer: Optional[Dict[str, Any]] = Field(
        None,
        description='networkLoadBalancerParameters holds configuration parameters for an AWS network load balancer. Present only if type is NLB.',
    )
    type: TypeModel5 = Field(
        ...,
        description='type is the type of AWS load balancer to instantiate for an ingresscontroller. \n Valid values are: \n * "Classic": A Classic Load Balancer that makes routing decisions at either   the transport layer (TCP/SSL) or the application layer (HTTP/HTTPS). See   the following for additional details: \n     https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html#clb \n * "NLB": A Network Load Balancer that makes routing decisions at the   transport layer (TCP/SSL). See the following for additional details: \n     https://docs.aws.amazon.com/AmazonECS/latest/developerguide/load-balancer-types.html#nlb',
    )


class ClientAccessModel(Enum):
    Global = 'Global'
    Local = 'Local'


class GcpModel(BaseModel):
    clientAccess: Optional[ClientAccessModel] = Field(
        None,
        description='clientAccess describes how client access is restricted for internal load balancers. \n Valid values are: * "Global": Specifying an internal load balancer with Global client access   allows clients from any region within the VPC to communicate with the load   balancer. \n     https://cloud.google.com/kubernetes-engine/docs/how-to/internal-load-balancing#global_access \n * "Local": Specifying an internal load balancer with Local client access   means only clients within the same region (and VPC) as the GCP load balancer   can communicate with the load balancer. Note that this is the default behavior. \n     https://cloud.google.com/load-balancing/docs/internal#client_access',
    )


class TypeModel6(Enum):
    AWS = 'AWS'
    Azure = 'Azure'
    BareMetal = 'BareMetal'
    GCP = 'GCP'
    Nutanix = 'Nutanix'
    OpenStack = 'OpenStack'
    VSphere = 'VSphere'
    IBM = 'IBM'


class ProviderParametersModel(BaseModel):
    aws: Optional[AwsModel] = Field(
        None,
        description='aws provides configuration settings that are specific to AWS load balancers. \n If empty, defaults will be applied. See specific aws fields for details about their defaults.',
    )
    gcp: Optional[GcpModel] = Field(
        None,
        description='gcp provides configuration settings that are specific to GCP load balancers. \n If empty, defaults will be applied. See specific gcp fields for details about their defaults.',
    )
    type: TypeModel6 = Field(
        ...,
        description='type is the underlying infrastructure provider for the load balancer. Allowed values are "AWS", "Azure", "BareMetal", "GCP", "Nutanix", "OpenStack", and "VSphere".',
    )


class ScopeModel(Enum):
    Internal = 'Internal'
    External = 'External'


class LoadBalancerModel(BaseModel):
    providerParameters: Optional[ProviderParametersModel] = Field(
        None,
        description='providerParameters holds desired load balancer information specific to the underlying infrastructure provider. \n If empty, defaults will be applied. See specific providerParameters fields for details about their defaults.',
    )
    scope: ScopeModel = Field(
        ...,
        description='scope indicates the scope at which the load balancer is exposed. Possible values are "External" and "Internal".',
    )


class ProtocolModel2(Enum):
    _ = ''
    TCP = 'TCP'
    PROXY = 'PROXY'


class NodePortModel(BaseModel):
    protocol: Optional[ProtocolModel2] = Field(
        None,
        description='protocol specifies whether the IngressController expects incoming connections to use plain TCP or whether the IngressController expects PROXY protocol. \n PROXY protocol can be used with load balancers that support it to communicate the source addresses of client connections when forwarding those connections to the IngressController.  Using PROXY protocol enables the IngressController to report those source addresses instead of reporting the load balancer\'s address in HTTP headers and logs.  Note that enabling PROXY protocol on the IngressController will cause connections to fail if you are not using a load balancer that uses PROXY protocol to forward connections to the IngressController.  See http://www.haproxy.org/download/2.2/doc/proxy-protocol.txt for information about PROXY protocol. \n The following values are valid for this field: \n * The empty string. * "TCP". * "PROXY". \n The empty string specifies the default, which is TCP without PROXY protocol.  Note that the default is subject to change.',
    )


class TypeModel7(Enum):
    LoadBalancerService = 'LoadBalancerService'
    HostNetwork = 'HostNetwork'
    Private = 'Private'
    NodePortService = 'NodePortService'


class EndpointPublishingStrategyModel(BaseModel):
    hostNetwork: Optional[HostNetworkModel] = Field(
        None,
        description='hostNetwork holds parameters for the HostNetwork endpoint publishing strategy. Present only if type is HostNetwork.',
    )
    loadBalancer: Optional[LoadBalancerModel] = Field(
        None,
        description='loadBalancer holds parameters for the load balancer. Present only if type is LoadBalancerService.',
    )
    nodePort: Optional[NodePortModel] = Field(
        None,
        description='nodePort holds parameters for the NodePortService endpoint publishing strategy. Present only if type is NodePortService.',
    )
    private: Optional[Dict[str, Any]] = Field(
        None,
        description='private holds parameters for the Private endpoint publishing strategy. Present only if type is Private.',
    )
    type: TypeModel7 = Field(
        ...,
        description="type is the publishing strategy to use. Valid values are: \n * LoadBalancerService \n Publishes the ingress controller using a Kubernetes LoadBalancer Service. \n In this configuration, the ingress controller deployment uses container networking. A LoadBalancer Service is created to publish the deployment. \n See: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer \n If domain is set, a wildcard DNS record will be managed to point at the LoadBalancer Service's external name. DNS records are managed only in DNS zones defined by dns.config.openshift.io/cluster .spec.publicZone and .spec.privateZone. \n Wildcard DNS management is currently supported only on the AWS, Azure, and GCP platforms. \n * HostNetwork \n Publishes the ingress controller on node ports where the ingress controller is deployed. \n In this configuration, the ingress controller deployment uses host networking, bound to node ports 80 and 443. The user is responsible for configuring an external load balancer to publish the ingress controller via the node ports. \n * Private \n Does not publish the ingress controller. \n In this configuration, the ingress controller deployment uses container networking, and is not explicitly published. The user must manually publish the ingress controller. \n * NodePortService \n Publishes the ingress controller using a Kubernetes NodePort Service. \n In this configuration, the ingress controller deployment uses container networking. A NodePort Service is created to publish the deployment. The specific node ports are dynamically allocated by OpenShift; however, to support static port allocations, user changes to the node port field of the managed NodePort Service will preserved.",
    )


class MatchExpressionModel2(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel2]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel3(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class RouteSelectorModel(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel3]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MinTLSVersion(Enum):
    VersionTLS10 = 'VersionTLS10'
    VersionTLS11 = 'VersionTLS11'
    VersionTLS12 = 'VersionTLS12'
    VersionTLS13 = 'VersionTLS13'


class TlsProfile(BaseModel):
    ciphers: Optional[List[str]] = Field(
        None,
        description='ciphers is used to specify the cipher algorithms that are negotiated during the TLS handshake.  Operators may remove entries their operands do not support.  For example, to use DES-CBC3-SHA  (yaml): \n   ciphers:     - DES-CBC3-SHA',
    )
    minTLSVersion: Optional[MinTLSVersion] = Field(
        None,
        description='minTLSVersion is used to specify the minimal version of the TLS protocol that is negotiated during the TLS handshake. For example, to use TLS versions 1.1, 1.2 and 1.3 (yaml): \n   minTLSVersion: TLSv1.1 \n NOTE: currently the highest minTLSVersion allowed is VersionTLS12',
    )


class StatusModel7(BaseModel):
    availableReplicas: Optional[int] = Field(
        None,
        description='availableReplicas is number of observed available replicas according to the ingress controller deployment.',
    )
    conditions: Optional[List[ConditionModel7]] = Field(
        None,
        description='conditions is a list of conditions and their status. \n Available means the ingress controller deployment is available and servicing route and ingress resources (i.e, .status.availableReplicas equals .spec.replicas) \n There are additional conditions which indicate the status of other ingress controller features and capabilities. \n   * LoadBalancerManaged   - True if the following conditions are met:     * The endpoint publishing strategy requires a service load balancer.   - False if any of those conditions are unsatisfied. \n   * LoadBalancerReady   - True if the following conditions are met:     * A load balancer is managed.     * The load balancer is ready.   - False if any of those conditions are unsatisfied. \n   * DNSManaged   - True if the following conditions are met:     * The endpoint publishing strategy and platform support DNS.     * The ingress controller domain is set.     * dns.config.openshift.io/cluster configures DNS zones.   - False if any of those conditions are unsatisfied. \n   * DNSReady   - True if the following conditions are met:     * DNS is managed.     * DNS records have been successfully created.   - False if any of those conditions are unsatisfied.',
    )
    domain: Optional[str] = Field(
        None, description='domain is the actual domain in use.'
    )
    endpointPublishingStrategy: Optional[EndpointPublishingStrategyModel] = Field(
        None, description='endpointPublishingStrategy is the actual strategy in use.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel] = Field(
        None, description='namespaceSelector is the actual namespaceSelector in use.'
    )
    observedGeneration: Optional[int] = Field(
        None, description='observedGeneration is the most recent generation observed.'
    )
    routeSelector: Optional[RouteSelectorModel] = Field(
        None, description='routeSelector is the actual routeSelector in use.'
    )
    selector: Optional[str] = Field(
        None,
        description='selector is a label selector, in string format, for ingress controller pods corresponding to the IngressController. The number of matching pods should equal the value of availableReplicas.',
    )
    tlsProfile: Optional[TlsProfile] = Field(
        None,
        description='tlsProfile is the TLS connection configuration that is in effect.',
    )


class LogLevelModel7(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class OperatorLogLevelModel7(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class SpecModel8(BaseModel):
    failedRevisionLimit: Optional[int] = Field(
        None,
        description='failedRevisionLimit is the number of failed static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)',
    )
    forceRedeploymentReason: Optional[str] = Field(
        None,
        description='forceRedeploymentReason can be used to force the redeployment of the operand by providing a unique string. This provides a mechanism to kick a previously failed deployment and provide a reason why you think it will work this time instead of failing again on the same config.',
    )
    logLevel: Optional[LogLevelModel7] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    managementState: Optional[constr(regex=r'^(Managed|Force)$')] = Field(
        None,
        description='managementState indicates whether and how the operator should manage the component',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevelModel7] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    succeededRevisionLimit: Optional[int] = Field(
        None,
        description='succeededRevisionLimit is the number of successful static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )


class ConditionModel8(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class GenerationModel6(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class NodeStatusModel(BaseModel):
    currentRevision: Optional[int] = Field(
        None,
        description='currentRevision is the generation of the most recently successful deployment',
    )
    lastFailedCount: Optional[int] = Field(
        None,
        description='lastFailedCount is how often the installer pod of the last failed revision failed.',
    )
    lastFailedReason: Optional[str] = Field(
        None,
        description='lastFailedReason is a machine readable failure reason string.',
    )
    lastFailedRevision: Optional[int] = Field(
        None,
        description='lastFailedRevision is the generation of the deployment we tried and failed to deploy.',
    )
    lastFailedRevisionErrors: Optional[List[str]] = Field(
        None,
        description='lastFailedRevisionErrors is a list of human readable errors during the failed deployment referenced in lastFailedRevision.',
    )
    lastFailedTime: Optional[datetime] = Field(
        None,
        description='lastFailedTime is the time the last failed revision failed the last time.',
    )
    lastFallbackCount: Optional[int] = Field(
        None,
        description='lastFallbackCount is how often a fallback to a previous revision happened.',
    )
    nodeName: Optional[str] = Field(
        None, description='nodeName is the name of the node'
    )
    targetRevision: Optional[int] = Field(
        None,
        description="targetRevision is the generation of the deployment we're trying to apply",
    )


class ServiceAccountIssuer(BaseModel):
    expirationTime: Optional[datetime] = Field(
        None,
        description='expirationTime is the time after which this service account issuer will be pruned and removed from the trusted list of service account issuers.',
    )
    name: Optional[str] = Field(
        None, description='name is the name of the service account issuer ---'
    )


class StatusModel8(BaseModel):
    conditions: Optional[List[ConditionModel8]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[GenerationModel6]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    latestAvailableRevision: Optional[int] = Field(
        None,
        description='latestAvailableRevision is the deploymentID of the most recent deployment',
    )
    latestAvailableRevisionReason: Optional[str] = Field(
        None,
        description='latestAvailableRevisionReason describe the detailed reason for the most recent deployment',
    )
    nodeStatuses: Optional[List[NodeStatusModel]] = Field(
        None,
        description='nodeStatuses track the deployment values and errors across individual nodes',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    serviceAccountIssuers: Optional[List[ServiceAccountIssuer]] = Field(
        None,
        description='serviceAccountIssuers tracks history of used service account issuers. The item without expiration time represents the currently used service account issuer. The other items represents service account issuers that were used previously and are still being trusted. The default expiration for the items is set by the platform and it defaults to 24h. see: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-token-volume-projection',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class LogLevelModel8(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class OperatorLogLevelModel8(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class SpecModel9(BaseModel):
    failedRevisionLimit: Optional[int] = Field(
        None,
        description='failedRevisionLimit is the number of failed static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)',
    )
    forceRedeploymentReason: Optional[str] = Field(
        None,
        description='forceRedeploymentReason can be used to force the redeployment of the operand by providing a unique string. This provides a mechanism to kick a previously failed deployment and provide a reason why you think it will work this time instead of failing again on the same config.',
    )
    logLevel: Optional[LogLevelModel8] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    managementState: Optional[constr(regex=r'^(Managed|Force)$')] = Field(
        None,
        description='managementState indicates whether and how the operator should manage the component',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevelModel8] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    succeededRevisionLimit: Optional[int] = Field(
        None,
        description='succeededRevisionLimit is the number of successful static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )
    useMoreSecureServiceCA: Optional[bool] = Field(
        None,
        description='useMoreSecureServiceCA indicates that the service-ca.crt provided in SA token volumes should include only enough certificates to validate service serving certificates. Once set to true, it cannot be set to false. Even if someone finds a way to set it back to false, the service-ca.crt files that previously existed will only have the more secure content.',
    )


class ConditionModel9(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class GenerationModel7(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class NodeStatusModel1(BaseModel):
    currentRevision: Optional[int] = Field(
        None,
        description='currentRevision is the generation of the most recently successful deployment',
    )
    lastFailedCount: Optional[int] = Field(
        None,
        description='lastFailedCount is how often the installer pod of the last failed revision failed.',
    )
    lastFailedReason: Optional[str] = Field(
        None,
        description='lastFailedReason is a machine readable failure reason string.',
    )
    lastFailedRevision: Optional[int] = Field(
        None,
        description='lastFailedRevision is the generation of the deployment we tried and failed to deploy.',
    )
    lastFailedRevisionErrors: Optional[List[str]] = Field(
        None,
        description='lastFailedRevisionErrors is a list of human readable errors during the failed deployment referenced in lastFailedRevision.',
    )
    lastFailedTime: Optional[datetime] = Field(
        None,
        description='lastFailedTime is the time the last failed revision failed the last time.',
    )
    lastFallbackCount: Optional[int] = Field(
        None,
        description='lastFallbackCount is how often a fallback to a previous revision happened.',
    )
    nodeName: Optional[str] = Field(
        None, description='nodeName is the name of the node'
    )
    targetRevision: Optional[int] = Field(
        None,
        description="targetRevision is the generation of the deployment we're trying to apply",
    )


class StatusModel9(BaseModel):
    conditions: Optional[List[ConditionModel9]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[GenerationModel7]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    latestAvailableRevision: Optional[int] = Field(
        None,
        description='latestAvailableRevision is the deploymentID of the most recent deployment',
    )
    latestAvailableRevisionReason: Optional[str] = Field(
        None,
        description='latestAvailableRevisionReason describe the detailed reason for the most recent deployment',
    )
    nodeStatuses: Optional[List[NodeStatusModel1]] = Field(
        None,
        description='nodeStatuses track the deployment values and errors across individual nodes',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class LogLevelModel9(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class OperatorLogLevelModel9(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class SpecModel10(BaseModel):
    failedRevisionLimit: Optional[int] = Field(
        None,
        description='failedRevisionLimit is the number of failed static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)',
    )
    forceRedeploymentReason: Optional[str] = Field(
        None,
        description='forceRedeploymentReason can be used to force the redeployment of the operand by providing a unique string. This provides a mechanism to kick a previously failed deployment and provide a reason why you think it will work this time instead of failing again on the same config.',
    )
    logLevel: Optional[LogLevelModel9] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    managementState: Optional[constr(regex=r'^(Managed|Force)$')] = Field(
        None,
        description='managementState indicates whether and how the operator should manage the component',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevelModel9] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    succeededRevisionLimit: Optional[int] = Field(
        None,
        description='succeededRevisionLimit is the number of successful static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )


class ConditionModel10(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class GenerationModel8(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class NodeStatusModel2(BaseModel):
    currentRevision: Optional[int] = Field(
        None,
        description='currentRevision is the generation of the most recently successful deployment',
    )
    lastFailedCount: Optional[int] = Field(
        None,
        description='lastFailedCount is how often the installer pod of the last failed revision failed.',
    )
    lastFailedReason: Optional[str] = Field(
        None,
        description='lastFailedReason is a machine readable failure reason string.',
    )
    lastFailedRevision: Optional[int] = Field(
        None,
        description='lastFailedRevision is the generation of the deployment we tried and failed to deploy.',
    )
    lastFailedRevisionErrors: Optional[List[str]] = Field(
        None,
        description='lastFailedRevisionErrors is a list of human readable errors during the failed deployment referenced in lastFailedRevision.',
    )
    lastFailedTime: Optional[datetime] = Field(
        None,
        description='lastFailedTime is the time the last failed revision failed the last time.',
    )
    lastFallbackCount: Optional[int] = Field(
        None,
        description='lastFallbackCount is how often a fallback to a previous revision happened.',
    )
    nodeName: Optional[str] = Field(
        None, description='nodeName is the name of the node'
    )
    targetRevision: Optional[int] = Field(
        None,
        description="targetRevision is the generation of the deployment we're trying to apply",
    )


class StatusModel10(BaseModel):
    conditions: Optional[List[ConditionModel10]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[GenerationModel8]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    latestAvailableRevision: Optional[int] = Field(
        None,
        description='latestAvailableRevision is the deploymentID of the most recent deployment',
    )
    latestAvailableRevisionReason: Optional[str] = Field(
        None,
        description='latestAvailableRevisionReason describe the detailed reason for the most recent deployment',
    )
    nodeStatuses: Optional[List[NodeStatusModel2]] = Field(
        None,
        description='nodeStatuses track the deployment values and errors across individual nodes',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class LogLevelModel10(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class OperatorLogLevelModel10(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class SpecModel11(BaseModel):
    logLevel: Optional[LogLevelModel10] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    managementState: Optional[
        constr(regex=r'^(Managed|Unmanaged|Force|Removed)$')
    ] = Field(
        None,
        description='managementState indicates whether and how the operator should manage the component',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevelModel10] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )


class ConditionModel11(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class GenerationModel9(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class StatusModel11(BaseModel):
    conditions: Optional[List[ConditionModel11]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[GenerationModel9]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class Address(BaseModel):
    address: Optional[str] = Field(
        None, description='Address is the IP address in CIDR format'
    )
    gateway: Optional[str] = Field(
        None, description='Gateway is IP inside of subnet to designate as the gateway'
    )


class Dns(BaseModel):
    domain: Optional[str] = Field(
        None,
        description='Domain configures the domainname the local domain used for short hostname lookups',
    )
    nameservers: Optional[List[str]] = Field(
        None, description='Nameservers points DNS servers for IP lookup'
    )
    search: Optional[List[str]] = Field(
        None,
        description='Search configures priority ordered search domains for short hostname lookups',
    )


class RouteModel(BaseModel):
    destination: Optional[str] = Field(
        None, description='Destination points the IP route destination'
    )
    gateway: Optional[str] = Field(
        None,
        description="Gateway is the route's next-hop IP address If unset, a default gateway is assumed (as determined by the CNI plugin).",
    )


class StaticIPAMConfig(BaseModel):
    addresses: Optional[List[Address]] = Field(
        None, description='Addresses configures IP address for the interface'
    )
    dns: Optional[Dns] = Field(None, description='DNS configures DNS for the interface')
    routes: Optional[List[RouteModel]] = Field(
        None, description='Routes configures IP routes for the interface'
    )


class IpamConfig(BaseModel):
    staticIPAMConfig: Optional[StaticIPAMConfig] = Field(
        None,
        description='StaticIPAMConfig configures the static IP address in case of type:IPAMTypeStatic',
    )
    type: Optional[str] = Field(
        None,
        description='Type is the type of IPAM module will be used for IP Address Management(IPAM). The supported values are IPAMTypeDHCP, IPAMTypeStatic',
    )


class SimpleMacvlanConfig(BaseModel):
    ipamConfig: Optional[IpamConfig] = Field(
        None,
        description='IPAMConfig configures IPAM module will be used for IP Address Management (IPAM).',
    )
    master: Optional[str] = Field(
        None,
        description='master is the host interface to create the macvlan interface from. If not specified, it will be default route interface',
    )
    mode: Optional[str] = Field(
        None,
        description='mode is the macvlan mode: bridge, private, vepa, passthru. The default is bridge',
    )
    mtu: Optional[conint(ge=0)] = Field(
        None,
        description="mtu is the mtu to use for the macvlan interface. if unset, host's kernel will select the value.",
    )


class AdditionalNetwork(BaseModel):
    name: Optional[str] = Field(
        None,
        description='name is the name of the network. This will be populated in the resulting CRD This must be unique.',
    )
    namespace: Optional[str] = Field(
        None,
        description='namespace is the namespace of the network. This will be populated in the resulting CRD If not given the network will be created in the default namespace.',
    )
    rawCNIConfig: Optional[str] = Field(
        None,
        description='rawCNIConfig is the raw CNI configuration json to create in the NetworkAttachmentDefinition CRD',
    )
    simpleMacvlanConfig: Optional[SimpleMacvlanConfig] = Field(
        None,
        description='SimpleMacvlanConfig configures the macvlan interface in case of type:NetworkTypeSimpleMacvlan',
    )
    type: Optional[str] = Field(
        None,
        description='type is the type of network The supported values are NetworkTypeRaw, NetworkTypeSimpleMacvlan',
    )


class ClusterNetworkItem(BaseModel):
    cidr: Optional[str] = None
    hostPrefix: Optional[conint(ge=0)] = None


class KuryrConfig(BaseModel):
    controllerProbesPort: Optional[conint(ge=0)] = Field(
        None,
        description='The port kuryr-controller will listen for readiness and liveness requests.',
    )
    daemonProbesPort: Optional[conint(ge=0)] = Field(
        None,
        description='The port kuryr-daemon will listen for readiness and liveness requests.',
    )
    enablePortPoolsPrepopulation: Optional[bool] = Field(
        None,
        description='enablePortPoolsPrepopulation when true will make Kuryr prepopulate each newly created port pool with a minimum number of ports. Kuryr uses Neutron port pooling to fight the fact that it takes a significant amount of time to create one. Instead of creating it when pod is being deployed, Kuryr keeps a number of ports ready to be attached to pods. By default port prepopulation is disabled.',
    )
    mtu: Optional[conint(ge=0)] = Field(
        None,
        description='mtu is the MTU that Kuryr should use when creating pod networks in Neutron. The value has to be lower or equal to the MTU of the nodes network and Neutron has to allow creation of tenant networks with such MTU. If unset Pod networks will be created with the same MTU as the nodes network has.',
    )
    openStackServiceNetwork: Optional[str] = Field(
        None,
        description="openStackServiceNetwork contains the CIDR of network from which to allocate IPs for OpenStack Octavia's Amphora VMs. Please note that with Amphora driver Octavia uses two IPs from that network for each loadbalancer - one given by OpenShift and second for VRRP connections. As the first one is managed by OpenShift's and second by Neutron's IPAMs, those need to come from different pools. Therefore `openStackServiceNetwork` needs to be at least twice the size of `serviceNetwork`, and whole `serviceNetwork` must be overlapping with `openStackServiceNetwork`. cluster-network-operator will then make sure VRRP IPs are taken from the ranges inside `openStackServiceNetwork` that are not overlapping with `serviceNetwork`, effectivly preventing conflicts. If not set cluster-network-operator will use `serviceNetwork` expanded by decrementing the prefix size by 1.",
    )
    poolBatchPorts: Optional[conint(ge=0)] = Field(
        None,
        description='poolBatchPorts sets a number of ports that should be created in a single batch request to extend the port pool. The default is 3. For more information about port pools see enablePortPoolsPrepopulation setting.',
    )
    poolMaxPorts: Optional[conint(ge=0)] = Field(
        None,
        description='poolMaxPorts sets a maximum number of free ports that are being kept in a port pool. If the number of ports exceeds this setting, free ports will get deleted. Setting 0 will disable this upper bound, effectively preventing pools from shrinking and this is the default value. For more information about port pools see enablePortPoolsPrepopulation setting.',
    )
    poolMinPorts: Optional[conint(ge=1)] = Field(
        None,
        description='poolMinPorts sets a minimum number of free ports that should be kept in a port pool. If the number of ports is lower than this setting, new ports will get created and added to pool. The default is 1. For more information about port pools see enablePortPoolsPrepopulation setting.',
    )


class OpenshiftSDNConfig(BaseModel):
    enableUnidling: Optional[bool] = Field(
        None,
        description='enableUnidling controls whether or not the service proxy will support idling and unidling of services. By default, unidling is enabled.',
    )
    mode: Optional[str] = Field(
        None, description='mode is one of "Multitenant", "Subnet", or "NetworkPolicy"'
    )
    mtu: Optional[conint(ge=0)] = Field(
        None,
        description="mtu is the mtu to use for the tunnel interface. Defaults to 1450 if unset. This must be 50 bytes smaller than the machine's uplink.",
    )
    useExternalOpenvswitch: Optional[bool] = Field(
        None,
        description='useExternalOpenvswitch used to control whether the operator would deploy an OVS DaemonSet itself or expect someone else to start OVS. As of 4.6, OVS is always run as a system service, and this flag is ignored. DEPRECATED: non-functional as of 4.6',
    )
    vxlanPort: Optional[conint(ge=0)] = Field(
        None,
        description='vxlanPort is the port to use for all vxlan packets. The default is 4789.',
    )


class GatewayConfig(BaseModel):
    routingViaHost: Optional[bool] = Field(
        None,
        description='RoutingViaHost allows pod egress traffic to exit via the ovn-k8s-mp0 management port into the host before sending it out. If this is not set, traffic will always egress directly from OVN to outside without touching the host stack. Setting this to true means hardware offload will not be supported. Default is false if GatewayConfig is specified.',
    )


class HybridClusterNetworkItem(BaseModel):
    cidr: Optional[str] = None
    hostPrefix: Optional[conint(ge=0)] = None


class HybridOverlayConfig(BaseModel):
    hybridClusterNetwork: Optional[List[HybridClusterNetworkItem]] = Field(
        None,
        description='HybridClusterNetwork defines a network space given to nodes on an additional overlay network.',
    )
    hybridOverlayVXLANPort: Optional[int] = Field(
        None,
        description='HybridOverlayVXLANPort defines the VXLAN port number to be used by the additional overlay network. Default is 4789',
    )


class PolicyAuditConfig(BaseModel):
    destination: Optional[str] = Field(
        None,
        description='destination is the location for policy log messages. Regardless of this config, persistent logs will always be dumped to the host at /var/log/ovn/ however Additionally syslog output may be configured as follows. Valid values are: - "libc" -> to use the libc syslog() function of the host node\'s journdald process - "udp:host:port" -> for sending syslog over UDP - "unix:file" -> for using the UNIX domain socket directly - "null" -> to discard all messages logged to syslog The default is "null"',
    )
    maxFileSize: Optional[conint(ge=1)] = Field(
        None,
        description='maxFilesSize is the max size an ACL_audit log file is allowed to reach before rotation occurs Units are in MB and the Default is 50MB',
    )
    rateLimit: Optional[conint(ge=1)] = Field(
        None,
        description='rateLimit is the approximate maximum number of messages to generate per-second per-node. If unset the default of 20 msg/sec is used.',
    )
    syslogFacility: Optional[str] = Field(
        None,
        description='syslogFacility the RFC5424 facility for generated messages, e.g. "kern". Default is "local0"',
    )


class OvnKubernetesConfig(BaseModel):
    gatewayConfig: Optional[GatewayConfig] = Field(
        None,
        description='gatewayConfig holds the configuration for node gateway options.',
    )
    genevePort: Optional[conint(ge=1)] = Field(
        None,
        description='geneve port is the UDP port to be used by geneve encapulation. Default is 6081',
    )
    hybridOverlayConfig: Optional[HybridOverlayConfig] = Field(
        None,
        description='HybridOverlayConfig configures an additional overlay network for peers that are not using OVN.',
    )
    ipsecConfig: Optional[Dict[str, Any]] = Field(
        None,
        description='ipsecConfig enables and configures IPsec for pods on the pod network within the cluster.',
    )
    mtu: Optional[conint(ge=0)] = Field(
        None,
        description='mtu is the MTU to use for the tunnel interface. This must be 100 bytes smaller than the uplink mtu. Default is 1400',
    )
    policyAuditConfig: Optional[PolicyAuditConfig] = Field(
        None,
        description='policyAuditConfig is the configuration for network policy audit events. If unset, reported defaults are used.',
    )


class DefaultNetwork(BaseModel):
    kuryrConfig: Optional[KuryrConfig] = Field(
        None, description='KuryrConfig configures the kuryr plugin'
    )
    openshiftSDNConfig: Optional[OpenshiftSDNConfig] = Field(
        None, description='openShiftSDNConfig configures the openshift-sdn plugin'
    )
    ovnKubernetesConfig: Optional[OvnKubernetesConfig] = Field(
        None, description='ovnKubernetesConfig configures the ovn-kubernetes plugin.'
    )
    type: Optional[str] = Field(
        None,
        description='type is the type of network All NetworkTypes are supported except for NetworkTypeRaw',
    )


class Collector(BaseModel):
    __root__: constr(
        regex=r'^(([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$'
    )


class Ipfix(BaseModel):
    collectors: Optional[List[Collector]] = Field(
        None,
        description='ipfixCollectors is list of strings formatted as ip:port with a maximum of ten items',
        max_items=10,
        min_items=1,
    )


class CollectorModel(BaseModel):
    __root__: constr(
        regex=r'^(([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$'
    )


class NetFlow(BaseModel):
    collectors: Optional[List[CollectorModel]] = Field(
        None,
        description='netFlow defines the NetFlow collectors that will consume the flow data exported from OVS. It is a list of strings formatted as ip:port with a maximum of ten items',
        max_items=10,
        min_items=1,
    )


class CollectorModel1(BaseModel):
    __root__: constr(
        regex=r'^(([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$'
    )


class SFlow(BaseModel):
    collectors: Optional[List[CollectorModel1]] = Field(
        None,
        description='sFlowCollectors is list of strings formatted as ip:port with a maximum of ten items',
        max_items=10,
        min_items=1,
    )


class ExportNetworkFlows(BaseModel):
    ipfix: Optional[Ipfix] = Field(
        None, description='ipfix defines IPFIX configuration.'
    )
    netFlow: Optional[NetFlow] = Field(
        None, description='netFlow defines the NetFlow configuration.'
    )
    sFlow: Optional[SFlow] = Field(
        None, description='sFlow defines the SFlow configuration.'
    )


class KubeProxyConfig(BaseModel):
    bindAddress: Optional[str] = Field(
        None, description='The address to "bind" on Defaults to 0.0.0.0'
    )
    iptablesSyncPeriod: Optional[str] = Field(
        None,
        description='An internal kube-proxy parameter. In older releases of OCP, this sometimes needed to be adjusted in large clusters for performance reasons, but this is no longer necessary, and there is no reason to change this from the default value. Default: 30s',
    )
    proxyArguments: Optional[Dict[str, List[str]]] = Field(
        None, description='Any additional arguments to pass to the kubeproxy process'
    )


class LogLevelModel11(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class Machine(BaseModel):
    from_: Optional[conint(ge=0)] = Field(
        None, alias='from', description='from is the MTU to migrate from.'
    )
    to: Optional[conint(ge=0)] = Field(None, description='to is the MTU to migrate to.')


class Network(BaseModel):
    from_: Optional[conint(ge=0)] = Field(
        None, alias='from', description='from is the MTU to migrate from.'
    )
    to: Optional[conint(ge=0)] = Field(None, description='to is the MTU to migrate to.')


class Mtu(BaseModel):
    machine: Optional[Machine] = Field(
        None,
        description="machine contains MTU migration configuration for the machine's uplink. Needs to be migrated along with the default network MTU unless the current uplink MTU already accommodates the default network MTU.",
    )
    network: Optional[Network] = Field(
        None,
        description="network contains information about MTU migration for the default network. Migrations are only allowed to MTU values lower than the machine's uplink MTU by the minimum appropriate offset.",
    )


class Migration(BaseModel):
    mtu: Optional[Mtu] = Field(
        None,
        description='mtu contains the MTU migration configuration. Set this to allow changing the MTU values for the default network. If unset, the operation of changing the MTU for the default network will be rejected.',
    )
    networkType: Optional[str] = Field(
        None,
        description='networkType is the target type of network migration. Set this to the target network type to allow changing the default network. If unset, the operation of changing cluster default network plugin will be rejected. The supported values are OpenShiftSDN, OVNKubernetes',
    )


class OperatorLogLevelModel11(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class SpecModel12(BaseModel):
    additionalNetworks: Optional[List[AdditionalNetwork]] = Field(
        None,
        description='additionalNetworks is a list of extra networks to make available to pods when multiple networks are enabled.',
    )
    clusterNetwork: Optional[List[ClusterNetworkItem]] = Field(
        None,
        description='clusterNetwork is the IP address pool to use for pod IPs. Some network providers, e.g. OpenShift SDN, support multiple ClusterNetworks. Others only support one. This is equivalent to the cluster-cidr.',
    )
    defaultNetwork: Optional[DefaultNetwork] = Field(
        None,
        description='defaultNetwork is the "default" network that all pods will receive',
    )
    deployKubeProxy: Optional[bool] = Field(
        None,
        description='deployKubeProxy specifies whether or not a standalone kube-proxy should be deployed by the operator. Some network providers include kube-proxy or similar functionality. If unset, the plugin will attempt to select the correct value, which is false when OpenShift SDN and ovn-kubernetes are used and true otherwise.',
    )
    disableMultiNetwork: Optional[bool] = Field(
        None,
        description="disableMultiNetwork specifies whether or not multiple pod network support should be disabled. If unset, this property defaults to 'false' and multiple network support is enabled.",
    )
    disableNetworkDiagnostics: Optional[bool] = Field(
        None,
        description="disableNetworkDiagnostics specifies whether or not PodNetworkConnectivityCheck CRs from a test pod to every node, apiserver and LB should be disabled or not. If unset, this property defaults to 'false' and network diagnostics is enabled. Setting this to 'true' would reduce the additional load of the pods performing the checks.",
    )
    exportNetworkFlows: Optional[ExportNetworkFlows] = Field(
        None,
        description='exportNetworkFlows enables and configures the export of network flow metadata from the pod network by using protocols NetFlow, SFlow or IPFIX. Currently only supported on OVN-Kubernetes plugin. If unset, flows will not be exported to any collector.',
    )
    kubeProxyConfig: Optional[KubeProxyConfig] = Field(
        None,
        description='kubeProxyConfig lets us configure desired proxy configuration. If not specified, sensible defaults will be chosen by OpenShift directly. Not consumed by all network providers - currently only openshift-sdn.',
    )
    logLevel: Optional[LogLevelModel11] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    managementState: Optional[
        constr(regex=r'^(Managed|Unmanaged|Force|Removed)$')
    ] = Field(
        None,
        description='managementState indicates whether and how the operator should manage the component',
    )
    migration: Optional[Migration] = Field(
        None,
        description='migration enables and configures the cluster network migration. The migration procedure allows to change the network type and the MTU.',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevelModel11] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    serviceNetwork: Optional[List[str]] = Field(
        None,
        description='serviceNetwork is the ip address pool to use for Service IPs Currently, all existing network providers only support a single value here, but this is an array to allow for growth.',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )
    useMultiNetworkPolicy: Optional[bool] = Field(
        None,
        description="useMultiNetworkPolicy enables a controller which allows for MultiNetworkPolicy objects to be used on additional networks as created by Multus CNI. MultiNetworkPolicy are similar to NetworkPolicy objects, but NetworkPolicy objects only apply to the primary interface. With MultiNetworkPolicy, you can control the traffic that a pod can receive over the secondary interfaces. If unset, this property defaults to 'false' and MultiNetworkPolicy objects are ignored. If 'disableMultiNetwork' is 'true' then the value of this field is ignored.",
    )


class ConditionModel12(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class GenerationModel10(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class StatusModel12(BaseModel):
    conditions: Optional[List[ConditionModel12]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[GenerationModel10]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class LogLevelModel12(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class OperatorLogLevelModel12(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class SpecModel13(BaseModel):
    logLevel: Optional[LogLevelModel12] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    managementState: Optional[
        constr(regex=r'^(Managed|Unmanaged|Force|Removed)$')
    ] = Field(
        None,
        description='managementState indicates whether and how the operator should manage the component',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevelModel12] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )


class ConditionModel13(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class GenerationModel11(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class StatusModel13(BaseModel):
    conditions: Optional[List[ConditionModel13]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[GenerationModel11]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    latestAvailableRevision: Optional[conint(ge=0)] = Field(
        None,
        description='latestAvailableRevision is the latest revision used as suffix of revisioned secrets like encryption-config. A new revision causes a new deployment of pods.',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class LogLevelModel13(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class OperatorLogLevelModel13(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class SpecModel14(BaseModel):
    logLevel: Optional[LogLevelModel13] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    managementState: Optional[
        constr(regex=r'^(Managed|Unmanaged|Force|Removed)$')
    ] = Field(
        None,
        description='managementState indicates whether and how the operator should manage the component',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevelModel13] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )


class ConditionModel14(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class GenerationModel12(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class StatusModel14(BaseModel):
    conditions: Optional[List[ConditionModel14]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[GenerationModel12]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class LogLevelModel14(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class OperatorLogLevelModel14(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class SpecModel15(BaseModel):
    logLevel: Optional[LogLevelModel14] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    managementState: Optional[
        constr(regex=r'^(Managed|Unmanaged|Force|Removed)$')
    ] = Field(
        None,
        description='managementState indicates whether and how the operator should manage the component',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevelModel14] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )


class ConditionModel15(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class GenerationModel13(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class StatusModel15(BaseModel):
    conditions: Optional[List[ConditionModel15]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[GenerationModel13]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class LogLevelModel15(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class OperatorLogLevelModel15(Enum):
    _ = ''
    Normal = 'Normal'
    Debug = 'Debug'
    Trace = 'Trace'
    TraceAll = 'TraceAll'


class SpecModel16(BaseModel):
    logLevel: Optional[LogLevelModel15] = Field(
        None,
        description='logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    managementState: Optional[
        constr(regex=r'^(Managed|Unmanaged|Force|Removed)$')
    ] = Field(
        None,
        description='managementState indicates whether and how the operator should manage the component',
    )
    observedConfig: Optional[Any] = Field(
        None,
        description='observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator',
    )
    operatorLogLevel: Optional[OperatorLogLevelModel15] = Field(
        None,
        description='operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: "Normal", "Debug", "Trace", "TraceAll". Defaults to "Normal".',
    )
    unsupportedConfigOverrides: Optional[Any] = Field(
        None,
        description='unsupportedConfigOverrides holds a sparse config that will override any previously set options.  It only needs to be the fields to override it will end up overlaying in the following order: 1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides',
    )


class ConditionModel16(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class GenerationModel14(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class StatusModel16(BaseModel):
    conditions: Optional[List[ConditionModel16]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[GenerationModel14]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class Authentication(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Spec
    status: Optional[Status] = None


class AuthenticationList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Authentication] = Field(
        ...,
        description='List of authentications. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class CSISnapshotController(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel = Field(
        ..., description='spec holds user settable values for configuration'
    )
    status: Optional[StatusModel] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class CSISnapshotControllerList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[CSISnapshotController] = Field(
        ...,
        description='List of csisnapshotcontrollers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class CloudCredential(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel1 = Field(
        ...,
        description='CloudCredentialSpec is the specification of the desired behavior of the cloud-credential-operator.',
    )
    status: Optional[StatusModel1] = Field(
        None,
        description='CloudCredentialStatus defines the observed status of the cloud-credential-operator.',
    )


class CloudCredentialList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[CloudCredential] = Field(
        ...,
        description='List of cloudcredentials. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class ClusterCSIDriver(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel2 = Field(
        ..., description='spec holds user settable values for configuration'
    )
    status: Optional[StatusModel2] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class ClusterCSIDriverList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ClusterCSIDriver] = Field(
        ...,
        description='List of clustercsidrivers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Config(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel3 = Field(
        ...,
        description='spec is the specification of the desired behavior of the Config Operator.',
    )
    status: Optional[StatusModel3] = Field(
        None, description='status defines the observed status of the Config Operator.'
    )


class ConfigList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Config] = Field(
        ...,
        description='List of configs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Console(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel4 = Field(
        ...,
        description='ConsoleSpec is the specification of the desired behavior of the Console.',
    )
    status: Optional[StatusModel4] = Field(
        None, description='ConsoleStatus defines the observed status of the Console.'
    )


class ConsoleList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Console] = Field(
        ...,
        description='List of consoles. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class DNS(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel5] = Field(
        None,
        description='spec is the specification of the desired behavior of the DNS.',
    )
    status: Optional[StatusModel5] = Field(
        None, description='status is the most recently observed status of the DNS.'
    )


class DNSList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[DNS] = Field(
        ...,
        description='List of dnses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Etcd(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel6
    status: Optional[StatusModel6] = None


class EtcdList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Etcd] = Field(
        ...,
        description='List of etcds. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class IngressController(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel7] = Field(
        None,
        description='spec is the specification of the desired behavior of the IngressController.',
    )
    status: Optional[StatusModel7] = Field(
        None,
        description='status is the most recently observed status of the IngressController.',
    )


class IngressControllerList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[IngressController] = Field(
        ...,
        description='List of ingresscontrollers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class KubeAPIServer(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel8 = Field(
        ...,
        description='spec is the specification of the desired behavior of the Kubernetes API Server',
    )
    status: Optional[StatusModel8] = Field(
        None,
        description='status is the most recently observed status of the Kubernetes API Server',
    )


class KubeAPIServerList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[KubeAPIServer] = Field(
        ...,
        description='List of kubeapiservers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class KubeControllerManager(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel9 = Field(
        ...,
        description='spec is the specification of the desired behavior of the Kubernetes Controller Manager',
    )
    status: Optional[StatusModel9] = Field(
        None,
        description='status is the most recently observed status of the Kubernetes Controller Manager',
    )


class KubeControllerManagerList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[KubeControllerManager] = Field(
        ...,
        description='List of kubecontrollermanagers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class KubeScheduler(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel10 = Field(
        ...,
        description='spec is the specification of the desired behavior of the Kubernetes Scheduler',
    )
    status: Optional[StatusModel10] = Field(
        None,
        description='status is the most recently observed status of the Kubernetes Scheduler',
    )


class KubeSchedulerList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[KubeScheduler] = Field(
        ...,
        description='List of kubeschedulers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class KubeStorageVersionMigrator(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel11
    status: Optional[StatusModel11] = None


class KubeStorageVersionMigratorList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[KubeStorageVersionMigrator] = Field(
        ...,
        description='List of kubestorageversionmigrators. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class NetworkModel(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel12] = Field(
        None, description='NetworkSpec is the top-level network configuration object.'
    )
    status: Optional[StatusModel12] = Field(
        None,
        description='NetworkStatus is detailed operator status, which is distilled up to the Network clusteroperator object.',
    )


class NetworkList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[NetworkModel] = Field(
        ...,
        description='List of networks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class OpenShiftAPIServer(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel13 = Field(
        ...,
        description='spec is the specification of the desired behavior of the OpenShift API Server.',
    )
    status: Optional[StatusModel13] = Field(
        None,
        description='status defines the observed status of the OpenShift API Server.',
    )


class OpenShiftAPIServerList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[OpenShiftAPIServer] = Field(
        ...,
        description='List of openshiftapiservers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class OpenShiftControllerManager(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel14
    status: Optional[StatusModel14] = None


class OpenShiftControllerManagerList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[OpenShiftControllerManager] = Field(
        ...,
        description='List of openshiftcontrollermanagers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class ServiceCA(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel15 = Field(
        ..., description='spec holds user settable values for configuration'
    )
    status: Optional[StatusModel15] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class ServiceCAList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ServiceCA] = Field(
        ...,
        description='List of servicecas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Storage(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel16 = Field(
        ..., description='spec holds user settable values for configuration'
    )
    status: Optional[StatusModel16] = Field(
        None,
        description='status holds observed values from the cluster. They may not be overridden.',
    )


class StorageList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Storage] = Field(
        ...,
        description='List of storages. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
