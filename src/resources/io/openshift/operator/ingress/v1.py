# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field, conint, constr

from ....k8s.apimachinery.pkg.apis.meta import v1


class RecordType(Enum):
    CNAME = 'CNAME'
    A = 'A'


class Spec(BaseModel):
    dnsName: constr(min_length=1) = Field(
        ..., description='dnsName is the hostname of the DNS record'
    )
    recordTTL: conint(ge=0) = Field(
        ...,
        description='recordTTL is the record TTL in seconds. If zero, the default is 30. RecordTTL will not be used in AWS regions Alias targets, but will be used in CNAME targets, per AWS API contract.',
    )
    recordType: RecordType = Field(
        ...,
        description='recordType is the DNS record type. For example, "A" or "CNAME".',
    )
    targets: List[str] = Field(
        ..., description='targets are record targets.', min_items=1
    )


class Condition(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: constr(min_length=1)
    type: constr(min_length=1)


class DnsZone(BaseModel):
    id: Optional[str] = Field(
        None,
        description='id is the identifier that can be used to find the DNS hosted zone. \n on AWS zone can be fetched using `ID` as id in [1] on Azure zone can be fetched using `ID` as a pre-determined name in [2], on GCP zone can be fetched using `ID` as a pre-determined name in [3]. \n [1]: https://docs.aws.amazon.com/cli/latest/reference/route53/get-hosted-zone.html#options [2]: https://docs.microsoft.com/en-us/cli/azure/network/dns/zone?view=azure-cli-latest#az-network-dns-zone-show [3]: https://cloud.google.com/dns/docs/reference/v1/managedZones/get',
    )
    tags: Optional[Dict[str, str]] = Field(
        None,
        description='tags can be used to query the DNS hosted zone. \n on AWS, resourcegroupstaggingapi [1] can be used to fetch a zone using `Tags` as tag-filters, \n [1]: https://docs.aws.amazon.com/cli/latest/reference/resourcegroupstaggingapi/get-resources.html#options',
    )


class Zone(BaseModel):
    conditions: Optional[List[Condition]] = Field(
        None,
        description='conditions are any conditions associated with the record in the zone. \n If publishing the record fails, the "Failed" condition will be set with a reason and message describing the cause of the failure.',
    )
    dnsZone: Optional[DnsZone] = Field(
        None, description='dnsZone is the zone where the record is published.'
    )


class Status(BaseModel):
    observedGeneration: Optional[int] = Field(
        None,
        description='observedGeneration is the most recently observed generation of the DNSRecord.  When the DNSRecord is updated, the controller updates the corresponding record in each managed zone.  If an update for a particular zone fails, that failure is recorded in the status condition for the zone so that the controller can determine that it needs to retry the update for that specific zone.',
    )
    zones: Optional[List[Zone]] = Field(
        None, description='zones are the status of the record in each zone.'
    )


class DNSRecord(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[Spec] = Field(
        None,
        description='spec is the specification of the desired behavior of the dnsRecord.',
    )
    status: Optional[Status] = Field(
        None,
        description='status is the most recently observed status of the dnsRecord.',
    )


class DNSRecordList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[DNSRecord] = Field(
        ...,
        description='List of dnsrecords. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
