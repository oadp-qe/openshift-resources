# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, conint, constr

from ...k8s.apimachinery.pkg.apis.meta import v1


class Service(BaseModel):
    name: constr(min_length=1, max_length=128) = Field(
        ..., description='name of Service that the plugin needs to connect to.'
    )
    namespace: constr(min_length=1, max_length=128) = Field(
        ..., description='namespace of Service that the plugin needs to connect to'
    )
    port: conint(ge=1, le=65535) = Field(
        ...,
        description='port on which the Service that the plugin needs to connect to is listening on.',
    )


class ProxyItem(BaseModel):
    alias: constr(regex=r'^[A-Za-z0-9-_]+$', min_length=1, max_length=128) = Field(
        ...,
        description="alias is a proxy name that identifies the plugin's proxy. An alias name should be unique per plugin. The console backend exposes following proxy endpoint: \n /api/proxy/plugin/<plugin-name>/<proxy-alias>/<request-path>?<optional-query-parameters> \n Request example path: \n /api/proxy/plugin/acm/search/pods?namespace=openshift-apiserver",
    )
    authorize: Optional[bool] = Field(
        None,
        description='authorize indicates if the proxied request should contain the logged-in user\'s OpenShift access token in the "Authorization" request header. For example: \n Authorization: Bearer sha256~kV46hPnEYhCWFnB85r5NrprAxggzgb6GOeLbgcKNsH0 \n By default the access token is not part of the proxied request.',
    )
    caCertificate: Optional[
        constr(
            regex=r'^-----BEGIN CERTIFICATE-----([\s\S]*)-----END CERTIFICATE-----\s?$'
        )
    ] = Field(
        None,
        description='caCertificate provides the cert authority certificate contents, in case the proxied Service is using custom service CA. By default, the service CA bundle provided by the service-ca operator is used.',
    )
    service: Optional[Service] = Field(
        None,
        description='service is an in-cluster Service that the plugin will connect to. The Service must use HTTPS. The console backend exposes an endpoint in order to proxy communication between the plugin and the Service. Note: service field is required for now, since currently only "Service" type is supported.',
    )
    type: constr(regex=r'^(Service)$') = Field(
        ...,
        description='type is the type of the console plugin\'s proxy. Currently only "Service" is supported.',
    )


class ServiceModel(BaseModel):
    basePath: constr(regex=r'^/', min_length=1) = Field(
        ...,
        description="basePath is the path to the plugin's assets. The primary asset it the manifest file called `plugin-manifest.json`, which is a JSON document that contains metadata about the plugin and the extensions.",
    )
    name: constr(min_length=1, max_length=128) = Field(
        ..., description='name of Service that is serving the plugin assets.'
    )
    namespace: constr(min_length=1, max_length=128) = Field(
        ..., description='namespace of Service that is serving the plugin assets.'
    )
    port: conint(ge=1, le=65535) = Field(
        ...,
        description='port on which the Service that is serving the plugin is listening to.',
    )


class Spec(BaseModel):
    displayName: Optional[constr(min_length=1)] = Field(
        None, description='displayName is the display name of the plugin.'
    )
    proxy: Optional[List[ProxyItem]] = Field(
        None,
        description='proxy is a list of proxies that describe various service type to which the plugin needs to connect to.',
    )
    service: ServiceModel = Field(
        ...,
        description='service is a Kubernetes Service that exposes the plugin using a deployment with an HTTP server. The Service must use HTTPS and Service serving certificate. The console backend will proxy the plugins assets from the Service using the service CA bundle.',
    )


class ConsolePlugin(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: v1.ObjectMeta = Field(
        ...,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Spec = Field(
        ..., description='ConsolePluginSpec is the desired plugin configuration.'
    )


class ConsolePluginList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ConsolePlugin] = Field(
        ...,
        description='List of consoleplugins. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
