# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, conint, constr

from ..k8s.apimachinery.pkg.apis.meta import v1


class HttpHeadersRef(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name is unique within a namespace to reference a secret resource.',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace defines the space within which the secret name must be unique.',
    )


class Spec(BaseModel):
    context: Optional[str] = Field(
        None, description='Arbitrary user-provided context for the event'
    )
    destination: Optional[str] = Field(
        None, description='A webhook URL to send events to'
    )
    hostName: Optional[str] = Field(None, description='A reference to a BareMetalHost')
    httpHeadersRef: Optional[HttpHeadersRef] = Field(
        None,
        description='A secret containing HTTP headers which should be passed along to the Destination when making a request',
    )


class Status(BaseModel):
    error: Optional[str] = None
    subscriptionID: Optional[str] = None


class AutomatedCleaningMode(Enum):
    metadata = 'metadata'
    disabled = 'disabled'


class Bmc(BaseModel):
    address: str = Field(
        ...,
        description='Address holds the URL for accessing the controller on the network.',
    )
    credentialsName: str = Field(
        ...,
        description='The name of the secret containing the BMC credentials (requires keys "username" and "password").',
    )
    disableCertificateVerification: Optional[bool] = Field(
        None,
        description='DisableCertificateVerification disables verification of server certificates when using HTTPS to connect to the BMC. This is required when the server certificate is self-signed, but is insecure because it allows a man-in-the-middle to intercept the connection.',
    )


class BootMode(Enum):
    UEFI = 'UEFI'
    UEFISecureBoot = 'UEFISecureBoot'
    legacy = 'legacy'


class ConsumerRef(BaseModel):
    apiVersion: Optional[str] = Field(None, description='API version of the referent.')
    fieldPath: Optional[str] = Field(
        None,
        description='If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )
    resourceVersion: Optional[str] = Field(
        None,
        description='Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
    )
    uid: Optional[str] = Field(
        None,
        description='UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids',
    )


class CustomDeploy(BaseModel):
    method: str = Field(
        ...,
        description="Custom deploy method name. This name is specific to the deploy ramdisk used. If you don't have a custom deploy ramdisk, you shouldn't use CustomDeploy.",
    )


class SimultaneousMultithreadingEnabled(Enum):
    boolean_True = True
    boolean_False = False


class SriovEnabled(Enum):
    boolean_True = True
    boolean_False = False


class VirtualizationEnabled(Enum):
    boolean_True = True
    boolean_False = False


class Firmware(BaseModel):
    simultaneousMultithreadingEnabled: Optional[
        SimultaneousMultithreadingEnabled
    ] = Field(
        None,
        description='Allows a single physical processor core to appear as several logical processors. This supports following options: true, false.',
    )
    sriovEnabled: Optional[SriovEnabled] = Field(
        None,
        description='SR-IOV support enables a hypervisor to create virtual instances of a PCI-express device, potentially increasing performance. This supports following options: true, false.',
    )
    virtualizationEnabled: Optional[VirtualizationEnabled] = Field(
        None,
        description='Supports the virtualization of platform hardware. This supports following options: true, false.',
    )


class ChecksumType(Enum):
    md5 = 'md5'
    sha256 = 'sha256'
    sha512 = 'sha512'


class Format(Enum):
    raw = 'raw'
    qcow2 = 'qcow2'
    vdi = 'vdi'
    vmdk = 'vmdk'
    live_iso = 'live-iso'


class Image(BaseModel):
    checksum: Optional[str] = Field(
        None, description='Checksum is the checksum for the image.'
    )
    checksumType: Optional[ChecksumType] = Field(
        None,
        description='ChecksumType is the checksum algorithm for the image. e.g md5, sha256, sha512',
    )
    format: Optional[Format] = Field(
        None,
        description='DiskFormat contains the format of the image (raw, qcow2, ...). Needs to be set to raw for raw images streaming. Note live-iso means an iso referenced by the url will be live-booted and not deployed to disk, and in this case the checksum options are not required and if specified will be ignored.',
    )
    url: str = Field(..., description='URL is a location of an image to deploy.')


class MetaData(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name is unique within a namespace to reference a secret resource.',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace defines the space within which the secret name must be unique.',
    )


class NetworkData(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name is unique within a namespace to reference a secret resource.',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace defines the space within which the secret name must be unique.',
    )


class Raid(BaseModel):
    hardwareRAIDVolumes: Optional[Any] = Field(
        None,
        description="The list of logical disks for hardware RAID, if rootDeviceHints isn't used, first volume is root volume. You can set the value of this field to `[]` to clear all the hardware RAID configurations.",
    )
    softwareRAIDVolumes: Optional[Any] = Field(
        None,
        description="The list of logical disks for software RAID, if rootDeviceHints isn't used, first volume is root volume. If HardwareRAIDVolumes is set this item will be invalid. The number of created Software RAID devices must be 1 or 2. If there is only one Software RAID device, it has to be a RAID-1. If there are two, the first one has to be a RAID-1, while the RAID level for the second one can be 0, 1, or 1+0. As the first RAID device will be the deployment device, enforcing a RAID-1 reduces the risk of ending up with a non-booting node in case of a disk failure. Software RAID will always be deleted.",
    )


class RootDeviceHints(BaseModel):
    deviceName: Optional[str] = Field(
        None,
        description='A Linux device name like "/dev/vda". The hint must match the actual value exactly.',
    )
    hctl: Optional[str] = Field(
        None,
        description='A SCSI bus address like 0:0:0:0. The hint must match the actual value exactly.',
    )
    minSizeGigabytes: Optional[conint(ge=0)] = Field(
        None, description='The minimum size of the device in Gigabytes.'
    )
    model: Optional[str] = Field(
        None,
        description='A vendor-specific device identifier. The hint can be a substring of the actual value.',
    )
    rotational: Optional[bool] = Field(
        None,
        description='True if the device should use spinning media, false otherwise.',
    )
    serialNumber: Optional[str] = Field(
        None,
        description='Device serial number. The hint must match the actual value exactly.',
    )
    vendor: Optional[str] = Field(
        None,
        description='The name of the vendor or manufacturer of the device. The hint can be a substring of the actual value.',
    )
    wwn: Optional[str] = Field(
        None,
        description='Unique storage identifier. The hint must match the actual value exactly.',
    )
    wwnVendorExtension: Optional[str] = Field(
        None,
        description='Unique vendor storage identifier. The hint must match the actual value exactly.',
    )
    wwnWithExtension: Optional[str] = Field(
        None,
        description='Unique storage identifier with the vendor extension appended. The hint must match the actual value exactly.',
    )


class Taint(BaseModel):
    effect: str = Field(
        ...,
        description='Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.',
    )
    key: str = Field(
        ..., description='Required. The taint key to be applied to a node.'
    )
    timeAdded: Optional[datetime] = Field(
        None,
        description='TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.',
    )
    value: Optional[str] = Field(
        None, description='The taint value corresponding to the taint key.'
    )


class UserData(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name is unique within a namespace to reference a secret resource.',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace defines the space within which the secret name must be unique.',
    )


class SpecModel(BaseModel):
    automatedCleaningMode: Optional[AutomatedCleaningMode] = Field(
        None,
        description='When set to disabled, automated cleaning will be avoided during provisioning and deprovisioning.',
    )
    bmc: Optional[Bmc] = Field(None, description='How do we connect to the BMC?')
    bootMACAddress: Optional[
        constr(regex=r'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}')
    ] = Field(
        None,
        description='Which MAC address will PXE boot? This is optional for some types, but required for libvirt VMs driven by vbmc.',
    )
    bootMode: Optional[BootMode] = Field(
        None,
        description='Select the method of initializing the hardware during boot. Defaults to UEFI.',
    )
    consumerRef: Optional[ConsumerRef] = Field(
        None,
        description='ConsumerRef can be used to store information about something that is using a host. When it is not empty, the host is considered "in use".',
    )
    customDeploy: Optional[CustomDeploy] = Field(
        None, description='A custom deploy procedure.'
    )
    description: Optional[str] = Field(
        None,
        description='Description is a human-entered text used to help identify the host',
    )
    externallyProvisioned: Optional[bool] = Field(
        None,
        description='ExternallyProvisioned means something else is managing the image running on the host and the operator should only manage the power status and hardware inventory inspection. If the Image field is filled in, this field is ignored.',
    )
    firmware: Optional[Firmware] = Field(
        None, description='BIOS configuration for bare metal server'
    )
    hardwareProfile: Optional[str] = Field(
        None,
        description='What is the name of the hardware profile for this host? It should only be necessary to set this when inspection cannot automatically determine the profile.',
    )
    image: Optional[Image] = Field(
        None, description='Image holds the details of the image to be provisioned.'
    )
    metaData: Optional[MetaData] = Field(
        None,
        description='MetaData holds the reference to the Secret containing host metadata (e.g. meta_data.json) which is passed to the Config Drive.',
    )
    networkData: Optional[NetworkData] = Field(
        None,
        description='NetworkData holds the reference to the Secret containing network configuration (e.g content of network_data.json) which is passed to the Config Drive.',
    )
    online: bool = Field(..., description='Should the server be online?')
    preprovisioningNetworkDataName: Optional[str] = Field(
        None,
        description='PreprovisioningNetworkDataName is the name of the Secret in the local namespace containing network configuration (e.g content of network_data.json) which is passed to the preprovisioning image, and to the Config Drive if not overridden by specifying NetworkData.',
    )
    raid: Optional[Raid] = Field(
        None, description='RAID configuration for bare metal server'
    )
    rootDeviceHints: Optional[RootDeviceHints] = Field(
        None,
        description='Provide guidance about how to choose the device for the image being provisioned.',
    )
    taints: Optional[List[Taint]] = Field(
        None,
        description='Taints is the full, authoritative list of taints to apply to the corresponding Machine. This list will overwrite any modifications made to the Machine on an ongoing basis.',
    )
    userData: Optional[UserData] = Field(
        None,
        description='UserData holds the reference to the Secret containing the user data to be passed to the host before it boots.',
    )


class ErrorType(Enum):
    provisioned_registration_error = 'provisioned registration error'
    registration_error = 'registration error'
    inspection_error = 'inspection error'
    preparation_error = 'preparation error'
    provisioning_error = 'provisioning error'
    power_management_error = 'power management error'


class Credentials(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name is unique within a namespace to reference a secret resource.',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace defines the space within which the secret name must be unique.',
    )


class GoodCredentials(BaseModel):
    credentials: Optional[Credentials] = Field(
        None,
        description='SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace',
    )
    credentialsVersion: Optional[str] = None


class Cpu(BaseModel):
    arch: Optional[str] = None
    clockMegahertz: Optional[float] = Field(
        None, description='ClockSpeed is a clock speed in MHz'
    )
    count: Optional[int] = None
    flags: Optional[List[str]] = None
    model: Optional[str] = None


class Bios(BaseModel):
    date: Optional[str] = Field(
        None, description='The release/build date for this BIOS'
    )
    vendor: Optional[str] = Field(None, description='The vendor name for this BIOS')
    version: Optional[str] = Field(None, description='The version of the BIOS')


class FirmwareModel(BaseModel):
    bios: Optional[Bios] = Field(None, description='The BIOS for this firmware')


class Vlan(BaseModel):
    id: Optional[conint(ge=0, le=4094)] = Field(
        None, description='VLANID is a 12-bit 802.1Q VLAN identifier'
    )
    name: Optional[str] = None


class Nic(BaseModel):
    ip: Optional[str] = Field(
        None,
        description='The IP address of the interface. This will be an IPv4 or IPv6 address if one is present.  If both IPv4 and IPv6 addresses are present in a dual-stack environment, two nics will be output, one with each IP.',
    )
    mac: Optional[constr(regex=r'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}')] = Field(
        None, description='The device MAC address'
    )
    model: Optional[str] = Field(
        None, description='The vendor and product IDs of the NIC, e.g. "0x8086 0x1572"'
    )
    name: Optional[str] = Field(
        None, description='The name of the network interface, e.g. "en0"'
    )
    pxe: Optional[bool] = Field(None, description='Whether the NIC is PXE Bootable')
    speedGbps: Optional[int] = Field(
        None, description='The speed of the device in Gigabits per second'
    )
    vlanId: Optional[conint(ge=0, le=4094)] = Field(
        None, description='The untagged VLAN ID'
    )
    vlans: Optional[List[Vlan]] = Field(None, description='The VLANs available')


class Type(Enum):
    HDD = 'HDD'
    SSD = 'SSD'
    NVME = 'NVME'


class StorageItem(BaseModel):
    hctl: Optional[str] = Field(None, description='The SCSI location of the device')
    model: Optional[str] = Field(None, description='Hardware model')
    name: Optional[str] = Field(
        None,
        description='The Linux device name of the disk, e.g. "/dev/sda". Note that this may not be stable across reboots.',
    )
    rotational: Optional[bool] = Field(
        None,
        description="Whether this disk represents rotational storage. This field is not recommended for usage, please prefer using 'Type' field instead, this field will be deprecated eventually.",
    )
    serialNumber: Optional[str] = Field(
        None, description='The serial number of the device'
    )
    sizeBytes: Optional[int] = Field(None, description='The size of the disk in Bytes')
    type: Optional[Type] = Field(
        None, description='Device type, one of: HDD, SSD, NVME.'
    )
    vendor: Optional[str] = Field(
        None, description='The name of the vendor of the device'
    )
    wwn: Optional[str] = Field(None, description='The WWN of the device')
    wwnVendorExtension: Optional[str] = Field(
        None, description='The WWN Vendor extension of the device'
    )
    wwnWithExtension: Optional[str] = Field(
        None, description='The WWN with the extension'
    )


class SystemVendor(BaseModel):
    manufacturer: Optional[str] = None
    productName: Optional[str] = None
    serialNumber: Optional[str] = None


class Hardware(BaseModel):
    cpu: Optional[Cpu] = Field(
        None, description='CPU describes one processor on the host.'
    )
    firmware: Optional[FirmwareModel] = Field(
        None, description='Firmware describes the firmware on the host.'
    )
    hostname: Optional[str] = None
    nics: Optional[List[Nic]] = None
    ramMebibytes: Optional[int] = None
    storage: Optional[List[StorageItem]] = None
    systemVendor: Optional[SystemVendor] = Field(
        None,
        description='HardwareSystemVendor stores details about the whole hardware system.',
    )


class Deprovision(BaseModel):
    end: Optional[Any] = None
    start: Optional[Any] = None


class Inspect(BaseModel):
    end: Optional[Any] = None
    start: Optional[Any] = None


class Provision(BaseModel):
    end: Optional[Any] = None
    start: Optional[Any] = None


class Register(BaseModel):
    end: Optional[Any] = None
    start: Optional[Any] = None


class OperationHistory(BaseModel):
    deprovision: Optional[Deprovision] = Field(
        None,
        description='OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.',
    )
    inspect: Optional[Inspect] = Field(
        None,
        description='OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.',
    )
    provision: Optional[Provision] = Field(
        None,
        description='OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.',
    )
    register_: Optional[Register] = Field(
        None,
        alias='register',
        description='OperationMetric contains metadata about an operation (inspection, provisioning, etc.) used for tracking metrics.',
    )


class OperationalStatus(Enum):
    _ = ''
    OK = 'OK'
    discovered = 'discovered'
    error = 'error'
    delayed = 'delayed'
    detached = 'detached'


class BootModeModel(Enum):
    UEFI = 'UEFI'
    UEFISecureBoot = 'UEFISecureBoot'
    legacy = 'legacy'


class CustomDeployModel(BaseModel):
    method: str = Field(
        ...,
        description="Custom deploy method name. This name is specific to the deploy ramdisk used. If you don't have a custom deploy ramdisk, you shouldn't use CustomDeploy.",
    )


class SimultaneousMultithreadingEnabledModel(Enum):
    boolean_True = True
    boolean_False = False


class SriovEnabledModel(Enum):
    boolean_True = True
    boolean_False = False


class VirtualizationEnabledModel(Enum):
    boolean_True = True
    boolean_False = False


class FirmwareModel1(BaseModel):
    simultaneousMultithreadingEnabled: Optional[
        SimultaneousMultithreadingEnabledModel
    ] = Field(
        None,
        description='Allows a single physical processor core to appear as several logical processors. This supports following options: true, false.',
    )
    sriovEnabled: Optional[SriovEnabledModel] = Field(
        None,
        description='SR-IOV support enables a hypervisor to create virtual instances of a PCI-express device, potentially increasing performance. This supports following options: true, false.',
    )
    virtualizationEnabled: Optional[VirtualizationEnabledModel] = Field(
        None,
        description='Supports the virtualization of platform hardware. This supports following options: true, false.',
    )


class ChecksumTypeModel(Enum):
    md5 = 'md5'
    sha256 = 'sha256'
    sha512 = 'sha512'


class FormatModel(Enum):
    raw = 'raw'
    qcow2 = 'qcow2'
    vdi = 'vdi'
    vmdk = 'vmdk'
    live_iso = 'live-iso'


class ImageModel(BaseModel):
    checksum: Optional[str] = Field(
        None, description='Checksum is the checksum for the image.'
    )
    checksumType: Optional[ChecksumTypeModel] = Field(
        None,
        description='ChecksumType is the checksum algorithm for the image. e.g md5, sha256, sha512',
    )
    format: Optional[FormatModel] = Field(
        None,
        description='DiskFormat contains the format of the image (raw, qcow2, ...). Needs to be set to raw for raw images streaming. Note live-iso means an iso referenced by the url will be live-booted and not deployed to disk, and in this case the checksum options are not required and if specified will be ignored.',
    )
    url: str = Field(..., description='URL is a location of an image to deploy.')


class RaidModel(BaseModel):
    hardwareRAIDVolumes: Optional[Any] = Field(
        None,
        description="The list of logical disks for hardware RAID, if rootDeviceHints isn't used, first volume is root volume. You can set the value of this field to `[]` to clear all the hardware RAID configurations.",
    )
    softwareRAIDVolumes: Optional[Any] = Field(
        None,
        description="The list of logical disks for software RAID, if rootDeviceHints isn't used, first volume is root volume. If HardwareRAIDVolumes is set this item will be invalid. The number of created Software RAID devices must be 1 or 2. If there is only one Software RAID device, it has to be a RAID-1. If there are two, the first one has to be a RAID-1, while the RAID level for the second one can be 0, 1, or 1+0. As the first RAID device will be the deployment device, enforcing a RAID-1 reduces the risk of ending up with a non-booting node in case of a disk failure. Software RAID will always be deleted.",
    )


class RootDeviceHintsModel(BaseModel):
    deviceName: Optional[str] = Field(
        None,
        description='A Linux device name like "/dev/vda". The hint must match the actual value exactly.',
    )
    hctl: Optional[str] = Field(
        None,
        description='A SCSI bus address like 0:0:0:0. The hint must match the actual value exactly.',
    )
    minSizeGigabytes: Optional[conint(ge=0)] = Field(
        None, description='The minimum size of the device in Gigabytes.'
    )
    model: Optional[str] = Field(
        None,
        description='A vendor-specific device identifier. The hint can be a substring of the actual value.',
    )
    rotational: Optional[bool] = Field(
        None,
        description='True if the device should use spinning media, false otherwise.',
    )
    serialNumber: Optional[str] = Field(
        None,
        description='Device serial number. The hint must match the actual value exactly.',
    )
    vendor: Optional[str] = Field(
        None,
        description='The name of the vendor or manufacturer of the device. The hint can be a substring of the actual value.',
    )
    wwn: Optional[str] = Field(
        None,
        description='Unique storage identifier. The hint must match the actual value exactly.',
    )
    wwnVendorExtension: Optional[str] = Field(
        None,
        description='Unique vendor storage identifier. The hint must match the actual value exactly.',
    )
    wwnWithExtension: Optional[str] = Field(
        None,
        description='Unique storage identifier with the vendor extension appended. The hint must match the actual value exactly.',
    )


class Provisioning(BaseModel):
    ID: str = Field(
        ..., description="The machine's UUID from the underlying provisioning tool"
    )
    bootMode: Optional[BootModeModel] = Field(
        None, description='BootMode indicates the boot mode used to provision the node'
    )
    customDeploy: Optional[CustomDeployModel] = Field(
        None, description='Custom deploy procedure applied to the host.'
    )
    firmware: Optional[FirmwareModel1] = Field(
        None, description='The Bios set by the user'
    )
    image: Optional[ImageModel] = Field(
        None,
        description='Image holds the details of the last image successfully provisioned to the host.',
    )
    raid: Optional[RaidModel] = Field(None, description='The Raid set by the user')
    rootDeviceHints: Optional[RootDeviceHintsModel] = Field(
        None, description='The RootDevicehints set by the user'
    )
    state: str = Field(
        ...,
        description='An indiciator for what the provisioner is doing with the host.',
    )


class CredentialsModel(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name is unique within a namespace to reference a secret resource.',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace defines the space within which the secret name must be unique.',
    )


class TriedCredentials(BaseModel):
    credentials: Optional[CredentialsModel] = Field(
        None,
        description='SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace',
    )
    credentialsVersion: Optional[str] = None


class StatusModel(BaseModel):
    errorCount: int = Field(
        ...,
        description='ErrorCount records how many times the host has encoutered an error since the last successful operation',
    )
    errorMessage: str = Field(
        ..., description='the last error message reported by the provisioning subsystem'
    )
    errorType: Optional[ErrorType] = Field(
        None,
        description='ErrorType indicates the type of failure encountered when the OperationalStatus is OperationalStatusError',
    )
    goodCredentials: Optional[GoodCredentials] = Field(
        None, description='the last credentials we were able to validate as working'
    )
    hardware: Optional[Hardware] = Field(
        None, description='The hardware discovered to exist on the host.'
    )
    hardwareProfile: str = Field(
        ..., description='The name of the profile matching the hardware details.'
    )
    lastUpdated: Optional[datetime] = Field(
        None, description='LastUpdated identifies when this status was last observed.'
    )
    operationHistory: Optional[OperationHistory] = Field(
        None,
        description='OperationHistory holds information about operations performed on this host.',
    )
    operationalStatus: OperationalStatus = Field(
        ..., description='OperationalStatus holds the status of the host'
    )
    poweredOn: bool = Field(
        ..., description='indicator for whether or not the host is powered on'
    )
    provisioning: Provisioning = Field(
        ..., description='Information tracked by the provisioner.'
    )
    triedCredentials: Optional[TriedCredentials] = Field(
        None, description='the last credentials we sent to the provisioning backend'
    )


class AttributeType(Enum):
    Enumeration = 'Enumeration'
    String = 'String'
    Integer = 'Integer'
    Boolean = 'Boolean'
    Password = 'Password'


class Schema(BaseModel):
    allowable_values: Optional[List[str]] = Field(
        None, description='The allowable value for an Enumeration type setting.'
    )
    attribute_type: Optional[AttributeType] = Field(
        None, description='The type of setting.'
    )
    lower_bound: Optional[int] = Field(
        None, description='The lowest value for an Integer type setting.'
    )
    max_length: Optional[int] = Field(
        None, description='Maximum length for a String type setting.'
    )
    min_length: Optional[int] = Field(
        None, description='Minimum length for a String type setting.'
    )
    read_only: Optional[bool] = Field(
        None, description='Whether or not this setting is read only.'
    )
    unique: Optional[bool] = Field(
        None,
        description="Whether or not this setting's value is unique to this node, e.g. a serial number.",
    )
    upper_bound: Optional[int] = Field(
        None, description='The highest value for an Integer type setting.'
    )


class SpecModel1(BaseModel):
    hardwareModel: Optional[str] = Field(
        None, description='The hardware model associated with this schema'
    )
    hardwareVendor: Optional[str] = Field(
        None, description='The hardware vendor associated with this schema'
    )
    schema_: Dict[str, Schema] = Field(
        ..., alias='schema', description='Map of firmware name to schema'
    )


class SpecModel2(BaseModel):
    settings: Dict[str, Any] = Field(
        ...,
        description='Settings are the desired firmware settings stored as name/value pairs.',
    )


class StatusModel1(Enum):
    True_ = 'True'
    False_ = 'False'
    Unknown = 'Unknown'


class Condition(BaseModel):
    lastTransitionTime: datetime = Field(
        ...,
        description='lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.',
    )
    message: constr(max_length=32768) = Field(
        ...,
        description='message is a human readable message indicating details about the transition. This may be an empty string.',
    )
    observedGeneration: Optional[conint(ge=0)] = Field(
        None,
        description='observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.',
    )
    reason: constr(
        regex=r'^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$', min_length=1, max_length=1024
    ) = Field(
        ...,
        description="reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
    )
    status: StatusModel1 = Field(
        ..., description='status of the condition, one of True, False, Unknown.'
    )
    type: constr(
        regex=r'^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
        max_length=316,
    ) = Field(
        ...,
        description='type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)',
    )


class SchemaModel(BaseModel):
    name: str = Field(..., description='`name` is the reference to the schema.')
    namespace: str = Field(
        ...,
        description='`namespace` is the namespace of the where the schema is stored.',
    )


class StatusModel2(BaseModel):
    conditions: Optional[List[Condition]] = Field(
        None,
        description='Track whether settings stored in the spec are valid based on the schema',
    )
    lastUpdated: Optional[datetime] = Field(
        None, description='Time that the status was last updated'
    )
    schema_: Optional[SchemaModel] = Field(
        None,
        alias='schema',
        description='FirmwareSchema is a reference to the Schema used to describe each FirmwareSetting. By default, this will be a Schema in the same Namespace as the settings but it can be overwritten in the Spec',
    )
    settings: Dict[str, str] = Field(
        ..., description='Settings are the firmware settings stored as name/value pairs'
    )


class AcceptFormat(Enum):
    iso = 'iso'
    initrd = 'initrd'


class SpecModel3(BaseModel):
    acceptFormats: Optional[List[AcceptFormat]] = Field(
        None, description='acceptFormats is a list of acceptable image formats.'
    )
    architecture: Optional[str] = Field(
        None,
        description='architecture is the processor architecture for which to build the image.',
    )
    networkDataName: Optional[str] = Field(
        None,
        description='networkDataName is the name of a Secret in the local namespace that contains network data to build in to the image.',
    )


class StatusModel3(Enum):
    True_ = 'True'
    False_ = 'False'
    Unknown = 'Unknown'


class ConditionModel(BaseModel):
    lastTransitionTime: datetime = Field(
        ...,
        description='lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.',
    )
    message: constr(max_length=32768) = Field(
        ...,
        description='message is a human readable message indicating details about the transition. This may be an empty string.',
    )
    observedGeneration: Optional[conint(ge=0)] = Field(
        None,
        description='observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.',
    )
    reason: constr(
        regex=r'^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$', min_length=1, max_length=1024
    ) = Field(
        ...,
        description="reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
    )
    status: StatusModel3 = Field(
        ..., description='status of the condition, one of True, False, Unknown.'
    )
    type: constr(
        regex=r'^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
        max_length=316,
    ) = Field(
        ...,
        description='type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)',
    )


class FormatModel1(Enum):
    iso = 'iso'
    initrd = 'initrd'


class NetworkDataModel(BaseModel):
    name: Optional[str] = None
    version: Optional[str] = None


class StatusModel4(BaseModel):
    architecture: Optional[str] = Field(
        None,
        description='architecture is the processor architecture for which the image is built',
    )
    conditions: Optional[List[ConditionModel]] = Field(
        None, description='conditions describe the state of the built image'
    )
    extraKernelParams: Optional[str] = Field(
        None,
        description='extraKernelParams is a string with extra parameters to pass to the kernel when booting the image over network. Only makes sense for initrd images.',
    )
    format: Optional[FormatModel1] = Field(
        None,
        description='format is the type of image that is available at the download url: either iso or initrd.',
    )
    imageUrl: Optional[str] = Field(
        None,
        description='imageUrl is the URL from which the built image can be downloaded.',
    )
    kernelUrl: Optional[str] = Field(
        None,
        description='kernelUrl is the URL from which the kernel of the image can be downloaded. Only makes sense for initrd images.',
    )
    networkData: Optional[NetworkDataModel] = Field(
        None,
        description='networkData is a reference to the version of the Secret containing the network data used to build the image.',
    )


class BootIsoSource(Enum):
    local = 'local'
    http = 'http'


class PreProvisioningOSDownloadURLs(BaseModel):
    initramfsURL: Optional[str] = Field(
        None, description='InitramfsURL Image URL to be used for PXE deployments'
    )
    isoURL: Optional[str] = Field(
        None, description='IsoURL Image URL to be used for Live ISO deployments'
    )
    kernelURL: Optional[str] = Field(
        None, description='KernelURL is an Image URL to be used for PXE deployments'
    )
    rootfsURL: Optional[str] = Field(
        None, description='RootfsURL Image URL to be used for PXE deployments'
    )


class ProvisioningNetwork(Enum):
    Managed = 'Managed'
    Unmanaged = 'Unmanaged'
    Disabled = 'Disabled'


class SpecModel4(BaseModel):
    bootIsoSource: Optional[BootIsoSource] = Field(
        None,
        description='BootIsoSource provides a way to set the location where the iso image to boot the nodes will be served from. By default the boot iso image is cached locally and served from the Provisioning service (Ironic) nodes using an auxiliary httpd server. If the boot iso image is already served by an httpd server, setting this option to http allows to directly provide the image from there; in this case, the network (either internal or external) where the httpd server that hosts the boot iso is needs to be accessible by the metal3 pod.',
    )
    disableVirtualMediaTLS: Optional[bool] = Field(
        None,
        description='DisableVirtualMediaTLS turns off TLS on the virtual media server, which may be required for hardware that cannot accept HTTPS links.',
    )
    preProvisioningOSDownloadURLs: Optional[PreProvisioningOSDownloadURLs] = Field(
        None,
        description='PreprovisioningOSDownloadURLs is set of CoreOS Live URLs that would be necessary to provision a worker either using virtual media or PXE.',
    )
    provisioningDHCPExternal: Optional[bool] = Field(
        None,
        description='ProvisioningDHCPExternal indicates whether the DHCP server for IP addresses in the provisioning DHCP range is present within the metal3 cluster or external to it. This field is being deprecated in favor of provisioningNetwork.',
    )
    provisioningDHCPRange: Optional[str] = Field(
        None,
        description='ProvisioningDHCPRange needs to be interpreted along with ProvisioningDHCPExternal. If the value of provisioningDHCPExternal is set to False, then ProvisioningDHCPRange represents the range of IP addresses that the DHCP server running within the metal3 cluster can use while provisioning baremetal servers. If the value of ProvisioningDHCPExternal is set to True, then the value of ProvisioningDHCPRange will be ignored. When the value of ProvisioningDHCPExternal is set to False, indicating an internal DHCP server and the value of ProvisioningDHCPRange is not set, then the DHCP range is taken to be the default range which goes from .10 to .100 of the ProvisioningNetworkCIDR. This is the only value in all of the Provisioning configuration that can be changed after the installer has created the CR. This value needs to be two comma sererated IP addresses within the ProvisioningNetworkCIDR where the 1st address represents the start of the range and the 2nd address represents the last usable address in the  range.',
    )
    provisioningIP: Optional[str] = Field(
        None,
        description='ProvisioningIP is the IP address assigned to the provisioningInterface of the baremetal server. This IP address should be within the provisioning subnet, and outside of the DHCP range.',
    )
    provisioningInterface: Optional[str] = Field(
        None,
        description='ProvisioningInterface is the name of the network interface on a baremetal server to the provisioning network. It can have values like eth1 or ens3.',
    )
    provisioningMacAddresses: Optional[List[str]] = Field(
        None,
        description='ProvisioningMacAddresses is a list of mac addresses of network interfaces on a baremetal server to the provisioning network. Use this instead of ProvisioningInterface to allow interfaces of different names. If not provided it will be populated by the BMH.Spec.BootMacAddress of each master.',
    )
    provisioningNetwork: Optional[ProvisioningNetwork] = Field(
        None,
        description='ProvisioningNetwork provides a way to indicate the state of the underlying network configuration for the provisioning network. This field can have one of the following values - `Managed`- when the provisioning network is completely managed by the Baremetal IPI solution. `Unmanaged`- when the provsioning network is present and used but the user is responsible for managing DHCP. Virtual media provisioning is recommended but PXE is still available if required. `Disabled`- when the provisioning network is fully disabled. User can bring up the baremetal cluster using virtual media or assisted installation. If using metal3 for power management, BMCs must be accessible from the machine networks. User should provide two IPs on the external network that would be used for provisioning services.',
    )
    provisioningNetworkCIDR: Optional[str] = Field(
        None,
        description='ProvisioningNetworkCIDR is the network on which the baremetal nodes are provisioned. The provisioningIP and the IPs in the dhcpRange all come from within this network. When using IPv6 and in a network managed by the Baremetal IPI solution this cannot be a network larger than a /64.',
    )
    provisioningOSDownloadURL: Optional[str] = Field(
        None,
        description='ProvisioningOSDownloadURL is the location from which the OS Image used to boot baremetal host machines can be downloaded by the metal3 cluster.',
    )
    virtualMediaViaExternalNetwork: Optional[bool] = Field(
        None,
        description='VirtualMediaViaExternalNetwork flag when set to "true" allows for workers to boot via Virtual Media and contact metal3 over the External Network. When the flag is set to "false" (which is the default), virtual media deployments can still happen based on the configuration specified in the ProvisioningNetwork i.e when in Disabled mode, over the External Network and over Provisioning Network when in Managed mode. PXE deployments will always use the Provisioning Network and will not be affected by this flag.',
    )
    watchAllNamespaces: Optional[bool] = Field(
        None,
        description='WatchAllNamespaces provides a way to explicitly allow use of this Provisioning configuration across all Namespaces. It is an optional configuration which defaults to false and in that state will be used to provision baremetal hosts in only the openshift-machine-api namespace. When set to true, this provisioning configuration would be used for baremetal hosts across all namespaces.',
    )


class ConditionModel1(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


class Generation(BaseModel):
    group: Optional[str] = Field(
        None, description="group is the group of the thing you're tracking"
    )
    hash: Optional[str] = Field(
        None,
        description='hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps',
    )
    lastGeneration: Optional[int] = Field(
        None,
        description='lastGeneration is the last generation of the workload controller involved',
    )
    name: Optional[str] = Field(
        None, description="name is the name of the thing you're tracking"
    )
    namespace: Optional[str] = Field(
        None, description="namespace is where the thing you're tracking is"
    )
    resource: Optional[str] = Field(
        None, description="resource is the resource type of the thing you're tracking"
    )


class StatusModel5(BaseModel):
    conditions: Optional[List[ConditionModel1]] = Field(
        None, description='conditions is a list of conditions and their status'
    )
    generations: Optional[List[Generation]] = Field(
        None,
        description='generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.',
    )
    observedGeneration: Optional[int] = Field(
        None,
        description="observedGeneration is the last generation change you've dealt with",
    )
    readyReplicas: Optional[int] = Field(
        None,
        description='readyReplicas indicates how many replicas are ready and at the desired state',
    )
    version: Optional[str] = Field(
        None, description='version is the level this availability applies to'
    )


class BMCEventSubscription(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[Spec] = None
    status: Optional[Status] = None


class BMCEventSubscriptionList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[BMCEventSubscription] = Field(
        ...,
        description='List of bmceventsubscriptions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class BareMetalHost(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel] = Field(
        None, description='BareMetalHostSpec defines the desired state of BareMetalHost'
    )
    status: Optional[StatusModel] = Field(
        None,
        description='BareMetalHostStatus defines the observed state of BareMetalHost',
    )


class BareMetalHostList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[BareMetalHost] = Field(
        ...,
        description='List of baremetalhosts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class FirmwareSchema(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel1] = Field(
        None,
        description='FirmwareSchemaSpec defines the desired state of FirmwareSchema',
    )


class FirmwareSchemaList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[FirmwareSchema] = Field(
        ...,
        description='List of firmwareschemas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class HostFirmwareSettings(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel2] = Field(
        None,
        description='HostFirmwareSettingsSpec defines the desired state of HostFirmwareSettings',
    )
    status: Optional[StatusModel2] = Field(
        None,
        description='HostFirmwareSettingsStatus defines the observed state of HostFirmwareSettings',
    )


class HostFirmwareSettingsList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[HostFirmwareSettings] = Field(
        ...,
        description='List of hostfirmwaresettings. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class PreprovisioningImage(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel3] = Field(
        None,
        description='PreprovisioningImageSpec defines the desired state of PreprovisioningImage',
    )
    status: Optional[StatusModel4] = Field(
        None,
        description='PreprovisioningImageStatus defines the observed state of PreprovisioningImage',
    )


class PreprovisioningImageList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[PreprovisioningImage] = Field(
        ...,
        description='List of preprovisioningimages. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class ProvisioningModel(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel4] = Field(
        None, description='ProvisioningSpec defines the desired state of Provisioning'
    )
    status: Optional[StatusModel5] = Field(
        None,
        description='ProvisioningStatus defines the observed state of Provisioning',
    )


class ProvisioningList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ProvisioningModel] = Field(
        ...,
        description='List of provisionings. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
