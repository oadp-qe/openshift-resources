# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, conint, constr

from ....io.k8s.apimachinery.pkg.apis.meta import v1


class MatchType(Enum):
    __ = '!='
    _ = '='
    ___1 = '=~'
    ___2 = '!~'


class SourceMatchItem(BaseModel):
    matchType: Optional[MatchType] = Field(
        None,
        description='Match operation available with AlertManager >= v0.22.0 and takes precedence over Regex (deprecated) if non-empty.',
    )
    name: constr(min_length=1) = Field(..., description='Label to match.')
    regex: Optional[bool] = Field(
        None,
        description='Whether to match on equality (false) or regular-expression (true). Deprecated as of AlertManager >= v0.22.0 where a user should use MatchType instead.',
    )
    value: Optional[str] = Field(None, description='Label value to match.')


class MatchTypeModel(Enum):
    __ = '!='
    _ = '='
    ___1 = '=~'
    ___2 = '!~'


class TargetMatchItem(BaseModel):
    matchType: Optional[MatchTypeModel] = Field(
        None,
        description='Match operation available with AlertManager >= v0.22.0 and takes precedence over Regex (deprecated) if non-empty.',
    )
    name: constr(min_length=1) = Field(..., description='Label to match.')
    regex: Optional[bool] = Field(
        None,
        description='Whether to match on equality (false) or regular-expression (true). Deprecated as of AlertManager >= v0.22.0 where a user should use MatchType instead.',
    )
    value: Optional[str] = Field(None, description='Label value to match.')


class InhibitRule(BaseModel):
    equal: Optional[List[str]] = Field(
        None,
        description='Labels that must have an equal value in the source and target alert for the inhibition to take effect.',
    )
    sourceMatch: Optional[List[SourceMatchItem]] = Field(
        None,
        description='Matchers for which one or more alerts have to exist for the inhibition to take effect. The operator enforces that the alert matches the resource’s namespace.',
    )
    targetMatch: Optional[List[TargetMatchItem]] = Field(
        None,
        description='Matchers that have to be fulfilled in the alerts to be muted. The operator enforces that the alert matches the resource’s namespace.',
    )


class DaysOfMonthItem(BaseModel):
    end: Optional[conint(ge=-31, le=31)] = Field(
        None, description='End of the inclusive range'
    )
    start: Optional[conint(ge=-31, le=31)] = Field(
        None, description='Start of the inclusive range'
    )


class Time(BaseModel):
    endTime: Optional[
        constr(regex=r'^((([01][0-9])|(2[0-3])):[0-5][0-9])$|(^24:00$)')
    ] = Field(None, description='EndTime is the end time in 24hr format.')
    startTime: Optional[
        constr(regex=r'^((([01][0-9])|(2[0-3])):[0-5][0-9])$|(^24:00$)')
    ] = Field(None, description='StartTime is the start time in 24hr format.')


class TimeInterval(BaseModel):
    daysOfMonth: Optional[List[DaysOfMonthItem]] = Field(
        None, description='DaysOfMonth is a list of DayOfMonthRange'
    )
    months: Optional[
        List[
            constr(
                regex=r'^((?i)january|february|march|april|may|june|july|august|september|october|november|december|[1-12])(?:((:((?i)january|february|march|april|may|june|july|august|september|october|november|december|[1-12]))$)|$)'
            )
        ]
    ] = Field(None, description='Months is a list of MonthRange')
    times: Optional[List[Time]] = Field(
        None, description='Times is a list of TimeRange'
    )
    weekdays: Optional[
        List[
            constr(
                regex=r'^((?i)sun|mon|tues|wednes|thurs|fri|satur)day(?:((:(sun|mon|tues|wednes|thurs|fri|satur)day)$)|$)'
            )
        ]
    ] = Field(None, description='Weekdays is a list of WeekdayRange')
    years: Optional[List[constr(regex=r'^2\d{3}(?::2\d{3}|$)')]] = Field(
        None, description='Years is a list of YearRange'
    )


class MuteTimeInterval(BaseModel):
    name: Optional[str] = Field(None, description='Name of the time interval')
    timeIntervals: Optional[List[TimeInterval]] = Field(
        None, description='TimeIntervals is a list of TimeInterval'
    )


class AuthPassword(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AuthSecret(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Header(BaseModel):
    key: constr(min_length=1) = Field(..., description='Key of the tuple.')
    value: str = Field(..., description='Value of the tuple.')


class ConfigMap(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class Secret(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Ca(BaseModel):
    configMap: Optional[ConfigMap] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[Secret] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Cert(BaseModel):
    configMap: Optional[ConfigMapModel] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecret(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfig(BaseModel):
    ca: Optional[Ca] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[Cert] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecret] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class EmailConfig(BaseModel):
    authIdentity: Optional[str] = Field(
        None, description='The identity to use for authentication.'
    )
    authPassword: Optional[AuthPassword] = Field(
        None,
        description="The secret's key that contains the password to use for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    authSecret: Optional[AuthSecret] = Field(
        None,
        description="The secret's key that contains the CRAM-MD5 secret. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    authUsername: Optional[str] = Field(
        None, description='The username to use for authentication.'
    )
    from_: Optional[str] = Field(None, alias='from', description='The sender address.')
    headers: Optional[List[Header]] = Field(
        None,
        description='Further headers email header key/value pairs. Overrides any headers previously set by the notification implementation.',
    )
    hello: Optional[str] = Field(
        None, description='The hostname to identify to the SMTP server.'
    )
    html: Optional[str] = Field(
        None, description='The HTML body of the email notification.'
    )
    requireTLS: Optional[bool] = Field(
        None,
        description='The SMTP TLS requirement. Note that Go does not support unencrypted connections to remote SMTP endpoints.',
    )
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    smarthost: Optional[str] = Field(
        None,
        description='The SMTP host and port through which emails are sent. E.g. example.com:25',
    )
    text: Optional[str] = Field(
        None, description='The text body of the email notification.'
    )
    tlsConfig: Optional[TlsConfig] = Field(None, description='TLS configuration')
    to: Optional[str] = Field(
        None, description='The email address to send notifications to.'
    )


class ApiKey(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Detail(BaseModel):
    key: constr(min_length=1) = Field(..., description='Key of the tuple.')
    value: str = Field(..., description='Value of the tuple.')


class Credentials(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Authorization(BaseModel):
    credentials: Optional[Credentials] = Field(
        None,
        description="The secret's key that contains the credentials of the request",
    )
    type: Optional[str] = Field(
        None,
        description='Set the authentication type. Defaults to Bearer, Basic will cause an error',
    )


class Password(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Username(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuth(BaseModel):
    password: Optional[Password] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[Username] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecret(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapModel1(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ClientId(BaseModel):
    configMap: Optional[ConfigMapModel1] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel1] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ClientSecret(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Oauth2(BaseModel):
    clientId: ClientId = Field(
        ..., description='The secret or configmap containing the OAuth2 client id'
    )
    clientSecret: ClientSecret = Field(
        ..., description='The secret containing the OAuth2 client secret'
    )
    endpointParams: Optional[Dict[str, str]] = Field(
        None, description='Parameters to append to the token URL'
    )
    scopes: Optional[List[str]] = Field(
        None, description='OAuth2 scopes used for the token request'
    )
    tokenUrl: constr(min_length=1) = Field(
        ..., description='The URL to fetch the token from'
    )


class ConfigMapModel2(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel(BaseModel):
    configMap: Optional[ConfigMapModel2] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel2] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel3(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel(BaseModel):
    configMap: Optional[ConfigMapModel3] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel3] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel(BaseModel):
    ca: Optional[CaModel] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HttpConfig(BaseModel):
    authorization: Optional[Authorization] = Field(
        None,
        description='Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.',
    )
    basicAuth: Optional[BasicAuth] = Field(
        None,
        description='BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.',
    )
    bearerTokenSecret: Optional[BearerTokenSecret] = Field(
        None,
        description="The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    followRedirects: Optional[bool] = Field(
        None,
        description='FollowRedirects specifies whether the client should follow HTTP 3xx redirects.',
    )
    oauth2: Optional[Oauth2] = Field(
        None,
        description='OAuth2 client credentials used to fetch a token for the targets.',
    )
    proxyURL: Optional[str] = Field(None, description='Optional proxy URL.')
    tlsConfig: Optional[TlsConfigModel] = Field(
        None, description='TLS configuration for the client.'
    )


class Type(Enum):
    team = 'team'
    teams = 'teams'
    user = 'user'
    escalation = 'escalation'
    schedule = 'schedule'


class Responder(BaseModel):
    id: Optional[str] = Field(None, description='ID of the responder.')
    name: Optional[str] = Field(None, description='Name of the responder.')
    type: Type = Field(..., description='Type of responder.')
    username: Optional[str] = Field(None, description='Username of the responder.')


class OpsgenieConfig(BaseModel):
    actions: Optional[str] = Field(
        None,
        description='Comma separated list of actions that will be available for the alert.',
    )
    apiKey: Optional[ApiKey] = Field(
        None,
        description="The secret's key that contains the OpsGenie API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    apiURL: Optional[str] = Field(
        None, description='The URL to send OpsGenie API requests to.'
    )
    description: Optional[str] = Field(None, description='Description of the incident.')
    details: Optional[List[Detail]] = Field(
        None,
        description='A set of arbitrary key/value pairs that provide further detail about the incident.',
    )
    entity: Optional[str] = Field(
        None,
        description='Optional field that can be used to specify which domain alert is related to.',
    )
    httpConfig: Optional[HttpConfig] = Field(
        None, description='HTTP client configuration.'
    )
    message: Optional[str] = Field(
        None, description='Alert text limited to 130 characters.'
    )
    note: Optional[str] = Field(None, description='Additional alert note.')
    priority: Optional[str] = Field(
        None,
        description='Priority level of alert. Possible values are P1, P2, P3, P4, and P5.',
    )
    responders: Optional[List[Responder]] = Field(
        None, description='List of responders responsible for notifications.'
    )
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    source: Optional[str] = Field(
        None, description='Backlink to the sender of the notification.'
    )
    tags: Optional[str] = Field(
        None, description='Comma separated list of tags attached to the notifications.'
    )
    updateAlerts: Optional[bool] = Field(
        None,
        description='Whether to update message and description of the alert in OpsGenie if it already exists By default, the alert is never updated in OpsGenie, the new message only appears in activity log.',
    )


class DetailModel(BaseModel):
    key: constr(min_length=1) = Field(..., description='Key of the tuple.')
    value: str = Field(..., description='Value of the tuple.')


class CredentialsModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AuthorizationModel(BaseModel):
    credentials: Optional[CredentialsModel] = Field(
        None,
        description="The secret's key that contains the credentials of the request",
    )
    type: Optional[str] = Field(
        None,
        description='Set the authentication type. Defaults to Bearer, Basic will cause an error',
    )


class PasswordModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel(BaseModel):
    password: Optional[PasswordModel] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecretModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapModel4(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ClientIdModel(BaseModel):
    configMap: Optional[ConfigMapModel4] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel4] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ClientSecretModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Oauth2Model(BaseModel):
    clientId: ClientIdModel = Field(
        ..., description='The secret or configmap containing the OAuth2 client id'
    )
    clientSecret: ClientSecretModel = Field(
        ..., description='The secret containing the OAuth2 client secret'
    )
    endpointParams: Optional[Dict[str, str]] = Field(
        None, description='Parameters to append to the token URL'
    )
    scopes: Optional[List[str]] = Field(
        None, description='OAuth2 scopes used for the token request'
    )
    tokenUrl: constr(min_length=1) = Field(
        ..., description='The URL to fetch the token from'
    )


class ConfigMapModel5(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel5(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel1(BaseModel):
    configMap: Optional[ConfigMapModel5] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel5] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel6(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel6(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel1(BaseModel):
    configMap: Optional[ConfigMapModel6] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel6] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel1(BaseModel):
    ca: Optional[CaModel1] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel1] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel1] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HttpConfigModel(BaseModel):
    authorization: Optional[AuthorizationModel] = Field(
        None,
        description='Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.',
    )
    basicAuth: Optional[BasicAuthModel] = Field(
        None,
        description='BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.',
    )
    bearerTokenSecret: Optional[BearerTokenSecretModel] = Field(
        None,
        description="The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    followRedirects: Optional[bool] = Field(
        None,
        description='FollowRedirects specifies whether the client should follow HTTP 3xx redirects.',
    )
    oauth2: Optional[Oauth2Model] = Field(
        None,
        description='OAuth2 client credentials used to fetch a token for the targets.',
    )
    proxyURL: Optional[str] = Field(None, description='Optional proxy URL.')
    tlsConfig: Optional[TlsConfigModel1] = Field(
        None, description='TLS configuration for the client.'
    )


class PagerDutyImageConfig(BaseModel):
    alt: Optional[str] = Field(
        None, description='Alt is the optional alternative text for the image.'
    )
    href: Optional[str] = Field(
        None, description='Optional URL; makes the image a clickable link.'
    )
    src: Optional[str] = Field(
        None, description='Src of the image being attached to the incident'
    )


class PagerDutyLinkConfig(BaseModel):
    alt: Optional[str] = Field(
        None,
        description="Text that describes the purpose of the link, and can be used as the link's text.",
    )
    href: Optional[str] = Field(
        None, description='Href is the URL of the link to be attached'
    )


class RoutingKey(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ServiceKey(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class PagerdutyConfig(BaseModel):
    class_: Optional[str] = Field(
        None, alias='class', description='The class/type of the event.'
    )
    client: Optional[str] = Field(None, description='Client identification.')
    clientURL: Optional[str] = Field(
        None, description='Backlink to the sender of notification.'
    )
    component: Optional[str] = Field(
        None, description='The part or component of the affected system that is broken.'
    )
    description: Optional[str] = Field(None, description='Description of the incident.')
    details: Optional[List[DetailModel]] = Field(
        None,
        description='Arbitrary key/value pairs that provide further detail about the incident.',
    )
    group: Optional[str] = Field(None, description='A cluster or grouping of sources.')
    httpConfig: Optional[HttpConfigModel] = Field(
        None, description='HTTP client configuration.'
    )
    pagerDutyImageConfigs: Optional[List[PagerDutyImageConfig]] = Field(
        None,
        description='A list of image details to attach that provide further detail about an incident.',
    )
    pagerDutyLinkConfigs: Optional[List[PagerDutyLinkConfig]] = Field(
        None,
        description='A list of link details to attach that provide further detail about an incident.',
    )
    routingKey: Optional[RoutingKey] = Field(
        None,
        description="The secret's key that contains the PagerDuty integration key (when using Events API v2). Either this field or `serviceKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    serviceKey: Optional[ServiceKey] = Field(
        None,
        description='The secret\'s key that contains the PagerDuty service key (when using integration type "Prometheus"). Either this field or `routingKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.',
    )
    severity: Optional[str] = Field(None, description='Severity of the incident.')
    url: Optional[str] = Field(None, description='The URL to send requests to.')


class CredentialsModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AuthorizationModel1(BaseModel):
    credentials: Optional[CredentialsModel1] = Field(
        None,
        description="The secret's key that contains the credentials of the request",
    )
    type: Optional[str] = Field(
        None,
        description='Set the authentication type. Defaults to Bearer, Basic will cause an error',
    )


class PasswordModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel1(BaseModel):
    password: Optional[PasswordModel1] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel1] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecretModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapModel7(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel7(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ClientIdModel1(BaseModel):
    configMap: Optional[ConfigMapModel7] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel7] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ClientSecretModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Oauth2Model1(BaseModel):
    clientId: ClientIdModel1 = Field(
        ..., description='The secret or configmap containing the OAuth2 client id'
    )
    clientSecret: ClientSecretModel1 = Field(
        ..., description='The secret containing the OAuth2 client secret'
    )
    endpointParams: Optional[Dict[str, str]] = Field(
        None, description='Parameters to append to the token URL'
    )
    scopes: Optional[List[str]] = Field(
        None, description='OAuth2 scopes used for the token request'
    )
    tokenUrl: constr(min_length=1) = Field(
        ..., description='The URL to fetch the token from'
    )


class ConfigMapModel8(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel8(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel2(BaseModel):
    configMap: Optional[ConfigMapModel8] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel8] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel9(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel9(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel2(BaseModel):
    configMap: Optional[ConfigMapModel9] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel9] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel2(BaseModel):
    ca: Optional[CaModel2] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel2] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel2] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HttpConfigModel1(BaseModel):
    authorization: Optional[AuthorizationModel1] = Field(
        None,
        description='Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.',
    )
    basicAuth: Optional[BasicAuthModel1] = Field(
        None,
        description='BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.',
    )
    bearerTokenSecret: Optional[BearerTokenSecretModel1] = Field(
        None,
        description="The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    followRedirects: Optional[bool] = Field(
        None,
        description='FollowRedirects specifies whether the client should follow HTTP 3xx redirects.',
    )
    oauth2: Optional[Oauth2Model1] = Field(
        None,
        description='OAuth2 client credentials used to fetch a token for the targets.',
    )
    proxyURL: Optional[str] = Field(None, description='Optional proxy URL.')
    tlsConfig: Optional[TlsConfigModel2] = Field(
        None, description='TLS configuration for the client.'
    )


class Token(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UserKey(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class PushoverConfig(BaseModel):
    expire: Optional[
        constr(
            regex=r'^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$'
        )
    ] = Field(
        None,
        description='How long your notification will continue to be retried for, unless the user acknowledges the notification.',
    )
    html: Optional[bool] = Field(
        None, description='Whether notification message is HTML or plain text.'
    )
    httpConfig: Optional[HttpConfigModel1] = Field(
        None, description='HTTP client configuration.'
    )
    message: Optional[str] = Field(None, description='Notification message.')
    priority: Optional[str] = Field(
        None, description='Priority, see https://pushover.net/api#priority'
    )
    retry: Optional[
        constr(
            regex=r'^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$'
        )
    ] = Field(
        None,
        description='How often the Pushover servers will send the same notification to the user. Must be at least 30 seconds.',
    )
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    sound: Optional[str] = Field(
        None,
        description="The name of one of the sounds supported by device clients to override the user's default sound choice",
    )
    title: Optional[str] = Field(None, description='Notification title.')
    token: Optional[Token] = Field(
        None,
        description="The secret's key that contains the registered application’s API token, see https://pushover.net/apps. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    url: Optional[str] = Field(
        None, description='A supplementary URL shown alongside the message.'
    )
    urlTitle: Optional[str] = Field(
        None,
        description='A title for supplementary URL, otherwise just the URL is shown',
    )
    userKey: Optional[UserKey] = Field(
        None,
        description="The secret's key that contains the recipient user’s user key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )


class Confirm(BaseModel):
    dismissText: Optional[str] = None
    okText: Optional[str] = None
    text: constr(min_length=1)
    title: Optional[str] = None


class Action(BaseModel):
    confirm: Optional[Confirm] = Field(
        None,
        description='SlackConfirmationField protect users from destructive actions or particularly distinguished decisions by asking them to confirm their button click one more time. See https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields for more information.',
    )
    name: Optional[str] = None
    style: Optional[str] = None
    text: constr(min_length=1)
    type: constr(min_length=1)
    url: Optional[str] = None
    value: Optional[str] = None


class ApiURL(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class FieldModel(BaseModel):
    short: Optional[bool] = None
    title: constr(min_length=1)
    value: constr(min_length=1)


class CredentialsModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AuthorizationModel2(BaseModel):
    credentials: Optional[CredentialsModel2] = Field(
        None,
        description="The secret's key that contains the credentials of the request",
    )
    type: Optional[str] = Field(
        None,
        description='Set the authentication type. Defaults to Bearer, Basic will cause an error',
    )


class PasswordModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel2(BaseModel):
    password: Optional[PasswordModel2] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel2] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecretModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapModel10(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel10(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ClientIdModel2(BaseModel):
    configMap: Optional[ConfigMapModel10] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel10] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ClientSecretModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Oauth2Model2(BaseModel):
    clientId: ClientIdModel2 = Field(
        ..., description='The secret or configmap containing the OAuth2 client id'
    )
    clientSecret: ClientSecretModel2 = Field(
        ..., description='The secret containing the OAuth2 client secret'
    )
    endpointParams: Optional[Dict[str, str]] = Field(
        None, description='Parameters to append to the token URL'
    )
    scopes: Optional[List[str]] = Field(
        None, description='OAuth2 scopes used for the token request'
    )
    tokenUrl: constr(min_length=1) = Field(
        ..., description='The URL to fetch the token from'
    )


class ConfigMapModel11(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel11(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel3(BaseModel):
    configMap: Optional[ConfigMapModel11] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel11] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel12(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel12(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel3(BaseModel):
    configMap: Optional[ConfigMapModel12] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel12] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel3(BaseModel):
    ca: Optional[CaModel3] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel3] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel3] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HttpConfigModel2(BaseModel):
    authorization: Optional[AuthorizationModel2] = Field(
        None,
        description='Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.',
    )
    basicAuth: Optional[BasicAuthModel2] = Field(
        None,
        description='BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.',
    )
    bearerTokenSecret: Optional[BearerTokenSecretModel2] = Field(
        None,
        description="The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    followRedirects: Optional[bool] = Field(
        None,
        description='FollowRedirects specifies whether the client should follow HTTP 3xx redirects.',
    )
    oauth2: Optional[Oauth2Model2] = Field(
        None,
        description='OAuth2 client credentials used to fetch a token for the targets.',
    )
    proxyURL: Optional[str] = Field(None, description='Optional proxy URL.')
    tlsConfig: Optional[TlsConfigModel3] = Field(
        None, description='TLS configuration for the client.'
    )


class SlackConfig(BaseModel):
    actions: Optional[List[Action]] = Field(
        None,
        description='A list of Slack actions that are sent with each notification.',
    )
    apiURL: Optional[ApiURL] = Field(
        None,
        description="The secret's key that contains the Slack webhook URL. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    callbackId: Optional[str] = None
    channel: Optional[str] = Field(
        None, description='The channel or user to send notifications to.'
    )
    color: Optional[str] = None
    fallback: Optional[str] = None
    fields: Optional[List[FieldModel]] = Field(
        None, description='A list of Slack fields that are sent with each notification.'
    )
    footer: Optional[str] = None
    httpConfig: Optional[HttpConfigModel2] = Field(
        None, description='HTTP client configuration.'
    )
    iconEmoji: Optional[str] = None
    iconURL: Optional[str] = None
    imageURL: Optional[str] = None
    linkNames: Optional[bool] = None
    mrkdwnIn: Optional[List[str]] = None
    pretext: Optional[str] = None
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    shortFields: Optional[bool] = None
    text: Optional[str] = None
    thumbURL: Optional[str] = None
    title: Optional[str] = None
    titleLink: Optional[str] = None
    username: Optional[str] = None


class CredentialsModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AuthorizationModel3(BaseModel):
    credentials: Optional[CredentialsModel3] = Field(
        None,
        description="The secret's key that contains the credentials of the request",
    )
    type: Optional[str] = Field(
        None,
        description='Set the authentication type. Defaults to Bearer, Basic will cause an error',
    )


class PasswordModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel3(BaseModel):
    password: Optional[PasswordModel3] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel3] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecretModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapModel13(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel13(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ClientIdModel3(BaseModel):
    configMap: Optional[ConfigMapModel13] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel13] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ClientSecretModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Oauth2Model3(BaseModel):
    clientId: ClientIdModel3 = Field(
        ..., description='The secret or configmap containing the OAuth2 client id'
    )
    clientSecret: ClientSecretModel3 = Field(
        ..., description='The secret containing the OAuth2 client secret'
    )
    endpointParams: Optional[Dict[str, str]] = Field(
        None, description='Parameters to append to the token URL'
    )
    scopes: Optional[List[str]] = Field(
        None, description='OAuth2 scopes used for the token request'
    )
    tokenUrl: constr(min_length=1) = Field(
        ..., description='The URL to fetch the token from'
    )


class ConfigMapModel14(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel14(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel4(BaseModel):
    configMap: Optional[ConfigMapModel14] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel14] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel15(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel15(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel4(BaseModel):
    configMap: Optional[ConfigMapModel15] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel15] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel4(BaseModel):
    ca: Optional[CaModel4] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel4] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel4] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HttpConfigModel3(BaseModel):
    authorization: Optional[AuthorizationModel3] = Field(
        None,
        description='Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.',
    )
    basicAuth: Optional[BasicAuthModel3] = Field(
        None,
        description='BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.',
    )
    bearerTokenSecret: Optional[BearerTokenSecretModel3] = Field(
        None,
        description="The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    followRedirects: Optional[bool] = Field(
        None,
        description='FollowRedirects specifies whether the client should follow HTTP 3xx redirects.',
    )
    oauth2: Optional[Oauth2Model3] = Field(
        None,
        description='OAuth2 client credentials used to fetch a token for the targets.',
    )
    proxyURL: Optional[str] = Field(None, description='Optional proxy URL.')
    tlsConfig: Optional[TlsConfigModel4] = Field(
        None, description='TLS configuration for the client.'
    )


class AccessKey(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class SecretKey(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Sigv4(BaseModel):
    accessKey: Optional[AccessKey] = Field(
        None,
        description='AccessKey is the AWS API key. If blank, the environment variable `AWS_ACCESS_KEY_ID` is used.',
    )
    profile: Optional[str] = Field(
        None, description='Profile is the named AWS profile used to authenticate.'
    )
    region: Optional[str] = Field(
        None,
        description='Region is the AWS region. If blank, the region from the default credentials chain used.',
    )
    roleArn: Optional[str] = Field(
        None, description='RoleArn is the named AWS profile used to authenticate.'
    )
    secretKey: Optional[SecretKey] = Field(
        None,
        description='SecretKey is the AWS API secret. If blank, the environment variable `AWS_SECRET_ACCESS_KEY` is used.',
    )


class SnsConfig(BaseModel):
    apiURL: Optional[str] = Field(
        None,
        description='The SNS API URL i.e. https://sns.us-east-2.amazonaws.com. If not specified, the SNS API URL from the SNS SDK will be used.',
    )
    attributes: Optional[Dict[str, str]] = Field(
        None, description='SNS message attributes.'
    )
    httpConfig: Optional[HttpConfigModel3] = Field(
        None, description='HTTP client configuration.'
    )
    message: Optional[str] = Field(
        None, description='The message content of the SNS notification.'
    )
    phoneNumber: Optional[str] = Field(
        None,
        description="Phone number if message is delivered via SMS in E.164 format. If you don't specify this value, you must specify a value for the TopicARN or TargetARN.",
    )
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    sigv4: Optional[Sigv4] = Field(
        None,
        description="Configures AWS's Signature Verification 4 signing process to sign requests.",
    )
    subject: Optional[str] = Field(
        None,
        description='Subject line when the message is delivered to email endpoints.',
    )
    targetARN: Optional[str] = Field(
        None,
        description="The  mobile platform endpoint ARN if message is delivered via mobile notifications. If you don't specify this value, you must specify a value for the topic_arn or PhoneNumber.",
    )
    topicARN: Optional[str] = Field(
        None,
        description="SNS topic ARN, i.e. arn:aws:sns:us-east-2:698519295917:My-Topic If you don't specify this value, you must specify a value for the PhoneNumber or TargetARN.",
    )


class BotToken(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CredentialsModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AuthorizationModel4(BaseModel):
    credentials: Optional[CredentialsModel4] = Field(
        None,
        description="The secret's key that contains the credentials of the request",
    )
    type: Optional[str] = Field(
        None,
        description='Set the authentication type. Defaults to Bearer, Basic will cause an error',
    )


class PasswordModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel4(BaseModel):
    password: Optional[PasswordModel4] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel4] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecretModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapModel16(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel16(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ClientIdModel4(BaseModel):
    configMap: Optional[ConfigMapModel16] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel16] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ClientSecretModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Oauth2Model4(BaseModel):
    clientId: ClientIdModel4 = Field(
        ..., description='The secret or configmap containing the OAuth2 client id'
    )
    clientSecret: ClientSecretModel4 = Field(
        ..., description='The secret containing the OAuth2 client secret'
    )
    endpointParams: Optional[Dict[str, str]] = Field(
        None, description='Parameters to append to the token URL'
    )
    scopes: Optional[List[str]] = Field(
        None, description='OAuth2 scopes used for the token request'
    )
    tokenUrl: constr(min_length=1) = Field(
        ..., description='The URL to fetch the token from'
    )


class ConfigMapModel17(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel17(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel5(BaseModel):
    configMap: Optional[ConfigMapModel17] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel17] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel18(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel18(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel5(BaseModel):
    configMap: Optional[ConfigMapModel18] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel18] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel5(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel5(BaseModel):
    ca: Optional[CaModel5] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel5] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel5] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HttpConfigModel4(BaseModel):
    authorization: Optional[AuthorizationModel4] = Field(
        None,
        description='Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.',
    )
    basicAuth: Optional[BasicAuthModel4] = Field(
        None,
        description='BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.',
    )
    bearerTokenSecret: Optional[BearerTokenSecretModel4] = Field(
        None,
        description="The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    followRedirects: Optional[bool] = Field(
        None,
        description='FollowRedirects specifies whether the client should follow HTTP 3xx redirects.',
    )
    oauth2: Optional[Oauth2Model4] = Field(
        None,
        description='OAuth2 client credentials used to fetch a token for the targets.',
    )
    proxyURL: Optional[str] = Field(None, description='Optional proxy URL.')
    tlsConfig: Optional[TlsConfigModel5] = Field(
        None, description='TLS configuration for the client.'
    )


class ParseMode(Enum):
    MarkdownV2 = 'MarkdownV2'
    Markdown = 'Markdown'
    HTML = 'HTML'


class TelegramConfig(BaseModel):
    apiURL: Optional[str] = Field(
        None,
        description='The Telegram API URL i.e. https://api.telegram.org. If not specified, default API URL will be used.',
    )
    botToken: Optional[BotToken] = Field(
        None,
        description='Telegram bot token The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.',
    )
    chatID: Optional[int] = Field(None, description='The Telegram chat ID.')
    disableNotifications: Optional[bool] = Field(
        None, description='Disable telegram notifications'
    )
    httpConfig: Optional[HttpConfigModel4] = Field(
        None, description='HTTP client configuration.'
    )
    message: Optional[str] = Field(None, description='Message template')
    parseMode: Optional[ParseMode] = Field(
        None, description='Parse mode for telegram message'
    )
    sendResolved: Optional[bool] = Field(
        None, description='Whether to notify about resolved alerts.'
    )


class ApiKeyModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CustomField(BaseModel):
    key: constr(min_length=1) = Field(..., description='Key of the tuple.')
    value: str = Field(..., description='Value of the tuple.')


class CredentialsModel5(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AuthorizationModel5(BaseModel):
    credentials: Optional[CredentialsModel5] = Field(
        None,
        description="The secret's key that contains the credentials of the request",
    )
    type: Optional[str] = Field(
        None,
        description='Set the authentication type. Defaults to Bearer, Basic will cause an error',
    )


class PasswordModel5(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel5(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel5(BaseModel):
    password: Optional[PasswordModel5] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel5] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecretModel5(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapModel19(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel19(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ClientIdModel5(BaseModel):
    configMap: Optional[ConfigMapModel19] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel19] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ClientSecretModel5(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Oauth2Model5(BaseModel):
    clientId: ClientIdModel5 = Field(
        ..., description='The secret or configmap containing the OAuth2 client id'
    )
    clientSecret: ClientSecretModel5 = Field(
        ..., description='The secret containing the OAuth2 client secret'
    )
    endpointParams: Optional[Dict[str, str]] = Field(
        None, description='Parameters to append to the token URL'
    )
    scopes: Optional[List[str]] = Field(
        None, description='OAuth2 scopes used for the token request'
    )
    tokenUrl: constr(min_length=1) = Field(
        ..., description='The URL to fetch the token from'
    )


class ConfigMapModel20(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel20(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel6(BaseModel):
    configMap: Optional[ConfigMapModel20] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel20] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel21(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel21(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel6(BaseModel):
    configMap: Optional[ConfigMapModel21] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel21] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel6(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel6(BaseModel):
    ca: Optional[CaModel6] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel6] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel6] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HttpConfigModel5(BaseModel):
    authorization: Optional[AuthorizationModel5] = Field(
        None,
        description='Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.',
    )
    basicAuth: Optional[BasicAuthModel5] = Field(
        None,
        description='BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.',
    )
    bearerTokenSecret: Optional[BearerTokenSecretModel5] = Field(
        None,
        description="The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    followRedirects: Optional[bool] = Field(
        None,
        description='FollowRedirects specifies whether the client should follow HTTP 3xx redirects.',
    )
    oauth2: Optional[Oauth2Model5] = Field(
        None,
        description='OAuth2 client credentials used to fetch a token for the targets.',
    )
    proxyURL: Optional[str] = Field(None, description='Optional proxy URL.')
    tlsConfig: Optional[TlsConfigModel6] = Field(
        None, description='TLS configuration for the client.'
    )


class VictoropsConfig(BaseModel):
    apiKey: Optional[ApiKeyModel] = Field(
        None,
        description="The secret's key that contains the API key to use when talking to the VictorOps API. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    apiUrl: Optional[str] = Field(None, description='The VictorOps API URL.')
    customFields: Optional[List[CustomField]] = Field(
        None, description='Additional custom fields for notification.'
    )
    entityDisplayName: Optional[str] = Field(
        None, description='Contains summary of the alerted problem.'
    )
    httpConfig: Optional[HttpConfigModel5] = Field(
        None, description="The HTTP client's configuration."
    )
    messageType: Optional[str] = Field(
        None,
        description='Describes the behavior of the alert (CRITICAL, WARNING, INFO).',
    )
    monitoringTool: Optional[str] = Field(
        None, description='The monitoring tool the state message is from.'
    )
    routingKey: Optional[str] = Field(
        None, description='A key used to map the alert to a team.'
    )
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    stateMessage: Optional[str] = Field(
        None, description='Contains long explanation of the alerted problem.'
    )


class CredentialsModel6(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AuthorizationModel6(BaseModel):
    credentials: Optional[CredentialsModel6] = Field(
        None,
        description="The secret's key that contains the credentials of the request",
    )
    type: Optional[str] = Field(
        None,
        description='Set the authentication type. Defaults to Bearer, Basic will cause an error',
    )


class PasswordModel6(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel6(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel6(BaseModel):
    password: Optional[PasswordModel6] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel6] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecretModel6(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapModel22(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel22(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ClientIdModel6(BaseModel):
    configMap: Optional[ConfigMapModel22] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel22] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ClientSecretModel6(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Oauth2Model6(BaseModel):
    clientId: ClientIdModel6 = Field(
        ..., description='The secret or configmap containing the OAuth2 client id'
    )
    clientSecret: ClientSecretModel6 = Field(
        ..., description='The secret containing the OAuth2 client secret'
    )
    endpointParams: Optional[Dict[str, str]] = Field(
        None, description='Parameters to append to the token URL'
    )
    scopes: Optional[List[str]] = Field(
        None, description='OAuth2 scopes used for the token request'
    )
    tokenUrl: constr(min_length=1) = Field(
        ..., description='The URL to fetch the token from'
    )


class ConfigMapModel23(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel23(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel7(BaseModel):
    configMap: Optional[ConfigMapModel23] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel23] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel24(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel24(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel7(BaseModel):
    configMap: Optional[ConfigMapModel24] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel24] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel7(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel7(BaseModel):
    ca: Optional[CaModel7] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel7] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel7] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HttpConfigModel6(BaseModel):
    authorization: Optional[AuthorizationModel6] = Field(
        None,
        description='Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.',
    )
    basicAuth: Optional[BasicAuthModel6] = Field(
        None,
        description='BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.',
    )
    bearerTokenSecret: Optional[BearerTokenSecretModel6] = Field(
        None,
        description="The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    followRedirects: Optional[bool] = Field(
        None,
        description='FollowRedirects specifies whether the client should follow HTTP 3xx redirects.',
    )
    oauth2: Optional[Oauth2Model6] = Field(
        None,
        description='OAuth2 client credentials used to fetch a token for the targets.',
    )
    proxyURL: Optional[str] = Field(None, description='Optional proxy URL.')
    tlsConfig: Optional[TlsConfigModel7] = Field(
        None, description='TLS configuration for the client.'
    )


class UrlSecret(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class WebhookConfig(BaseModel):
    httpConfig: Optional[HttpConfigModel6] = Field(
        None, description='HTTP client configuration.'
    )
    maxAlerts: Optional[conint(ge=0)] = Field(
        None,
        description='Maximum number of alerts to be sent per webhook message. When 0, all alerts are included.',
    )
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    url: Optional[str] = Field(
        None,
        description='The URL to send HTTP POST requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined.',
    )
    urlSecret: Optional[UrlSecret] = Field(
        None,
        description="The secret's key that contains the webhook URL to send HTTP requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )


class ApiSecret(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CredentialsModel7(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AuthorizationModel7(BaseModel):
    credentials: Optional[CredentialsModel7] = Field(
        None,
        description="The secret's key that contains the credentials of the request",
    )
    type: Optional[str] = Field(
        None,
        description='Set the authentication type. Defaults to Bearer, Basic will cause an error',
    )


class PasswordModel7(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel7(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel7(BaseModel):
    password: Optional[PasswordModel7] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel7] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecretModel7(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapModel25(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel25(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ClientIdModel7(BaseModel):
    configMap: Optional[ConfigMapModel25] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel25] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ClientSecretModel7(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Oauth2Model7(BaseModel):
    clientId: ClientIdModel7 = Field(
        ..., description='The secret or configmap containing the OAuth2 client id'
    )
    clientSecret: ClientSecretModel7 = Field(
        ..., description='The secret containing the OAuth2 client secret'
    )
    endpointParams: Optional[Dict[str, str]] = Field(
        None, description='Parameters to append to the token URL'
    )
    scopes: Optional[List[str]] = Field(
        None, description='OAuth2 scopes used for the token request'
    )
    tokenUrl: constr(min_length=1) = Field(
        ..., description='The URL to fetch the token from'
    )


class ConfigMapModel26(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel26(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel8(BaseModel):
    configMap: Optional[ConfigMapModel26] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel26] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel27(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel27(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel8(BaseModel):
    configMap: Optional[ConfigMapModel27] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel27] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel8(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel8(BaseModel):
    ca: Optional[CaModel8] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel8] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel8] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HttpConfigModel7(BaseModel):
    authorization: Optional[AuthorizationModel7] = Field(
        None,
        description='Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.',
    )
    basicAuth: Optional[BasicAuthModel7] = Field(
        None,
        description='BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.',
    )
    bearerTokenSecret: Optional[BearerTokenSecretModel7] = Field(
        None,
        description="The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    followRedirects: Optional[bool] = Field(
        None,
        description='FollowRedirects specifies whether the client should follow HTTP 3xx redirects.',
    )
    oauth2: Optional[Oauth2Model7] = Field(
        None,
        description='OAuth2 client credentials used to fetch a token for the targets.',
    )
    proxyURL: Optional[str] = Field(None, description='Optional proxy URL.')
    tlsConfig: Optional[TlsConfigModel8] = Field(
        None, description='TLS configuration for the client.'
    )


class WechatConfig(BaseModel):
    agentID: Optional[str] = None
    apiSecret: Optional[ApiSecret] = Field(
        None,
        description="The secret's key that contains the WeChat API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
    )
    apiURL: Optional[str] = Field(None, description='The WeChat API URL.')
    corpID: Optional[str] = Field(None, description='The corp id for authentication.')
    httpConfig: Optional[HttpConfigModel7] = Field(
        None, description='HTTP client configuration.'
    )
    message: Optional[str] = Field(
        None, description='API request data as defined by the WeChat API.'
    )
    messageType: Optional[str] = None
    sendResolved: Optional[bool] = Field(
        None, description='Whether or not to notify about resolved alerts.'
    )
    toParty: Optional[str] = None
    toTag: Optional[str] = None
    toUser: Optional[str] = None


class Receiver(BaseModel):
    emailConfigs: Optional[List[EmailConfig]] = Field(
        None, description='List of Email configurations.'
    )
    name: constr(min_length=1) = Field(
        ...,
        description='Name of the receiver. Must be unique across all items from the list.',
    )
    opsgenieConfigs: Optional[List[OpsgenieConfig]] = Field(
        None, description='List of OpsGenie configurations.'
    )
    pagerdutyConfigs: Optional[List[PagerdutyConfig]] = Field(
        None, description='List of PagerDuty configurations.'
    )
    pushoverConfigs: Optional[List[PushoverConfig]] = Field(
        None, description='List of Pushover configurations.'
    )
    slackConfigs: Optional[List[SlackConfig]] = Field(
        None, description='List of Slack configurations.'
    )
    snsConfigs: Optional[List[SnsConfig]] = Field(
        None, description='List of SNS configurations'
    )
    telegramConfigs: Optional[List[TelegramConfig]] = Field(
        None, description='List of Telegram configurations.'
    )
    victoropsConfigs: Optional[List[VictoropsConfig]] = Field(
        None, description='List of VictorOps configurations.'
    )
    webhookConfigs: Optional[List[WebhookConfig]] = Field(
        None, description='List of webhook configurations.'
    )
    wechatConfigs: Optional[List[WechatConfig]] = Field(
        None, description='List of WeChat configurations.'
    )


class MatchTypeModel1(Enum):
    __ = '!='
    _ = '='
    ___1 = '=~'
    ___2 = '!~'


class Matcher(BaseModel):
    matchType: Optional[MatchTypeModel1] = Field(
        None,
        description='Match operation available with AlertManager >= v0.22.0 and takes precedence over Regex (deprecated) if non-empty.',
    )
    name: constr(min_length=1) = Field(..., description='Label to match.')
    regex: Optional[bool] = Field(
        None,
        description='Whether to match on equality (false) or regular-expression (true). Deprecated as of AlertManager >= v0.22.0 where a user should use MatchType instead.',
    )
    value: Optional[str] = Field(None, description='Label value to match.')


class Route(BaseModel):
    continue_: Optional[bool] = Field(
        None,
        alias='continue',
        description='Boolean indicating whether an alert should continue matching subsequent sibling nodes. It will always be overridden to true for the first-level route by the Prometheus operator.',
    )
    groupBy: Optional[List[str]] = Field(
        None,
        description='List of labels to group by. Labels must not be repeated (unique list). Special label "..." (aggregate by all possible labels), if provided, must be the only element in the list.',
    )
    groupInterval: Optional[str] = Field(
        None,
        description='How long to wait before sending an updated notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: "5m"',
    )
    groupWait: Optional[str] = Field(
        None,
        description='How long to wait before sending the initial notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: "30s"',
    )
    matchers: Optional[List[Matcher]] = Field(
        None,
        description='List of matchers that the alert’s labels should match. For the first level route, the operator removes any existing equality and regexp matcher on the `namespace` label and adds a `namespace: <object namespace>` matcher.',
    )
    muteTimeIntervals: Optional[List[str]] = Field(
        None,
        description="Note: this comment applies to the field definition above but appears below otherwise it gets included in the generated manifest. CRD schema doesn't support self-referential types for now (see https://github.com/kubernetes/kubernetes/issues/62872). We have to use an alternative type to circumvent the limitation. The downside is that the Kube API can't validate the data beyond the fact that it is a valid JSON representation. MuteTimeIntervals is a list of MuteTimeInterval names that will mute this route when matched,",
    )
    receiver: Optional[str] = Field(
        None,
        description='Name of the receiver for this route. If not empty, it should be listed in the `receivers` field.',
    )
    repeatInterval: Optional[str] = Field(
        None,
        description='How long to wait before repeating the last notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: "4h"',
    )
    routes: Optional[List[Any]] = Field(None, description='Child routes.')


class Spec(BaseModel):
    inhibitRules: Optional[List[InhibitRule]] = Field(
        None,
        description='List of inhibition rules. The rules will only apply to alerts matching the resource’s namespace.',
    )
    muteTimeIntervals: Optional[List[MuteTimeInterval]] = Field(
        None,
        description='List of MuteTimeInterval specifying when the routes should be muted.',
    )
    receivers: Optional[List[Receiver]] = Field(None, description='List of receivers.')
    route: Optional[Route] = Field(
        None,
        description='The Alertmanager route definition for alerts matching the resource’s namespace. If present, it will be added to the generated Alertmanager configuration as a first-level route.',
    )


class AlertmanagerConfig(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Spec = Field(
        ...,
        description='AlertmanagerConfigSpec is a specification of the desired behavior of the Alertmanager configuration. By definition, the Alertmanager configuration only applies to alerts for which the `namespace` label is equal to the namespace of the AlertmanagerConfig resource.',
    )


class AlertmanagerConfigList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[AlertmanagerConfig] = Field(
        ...,
        description='List of alertmanagerconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
