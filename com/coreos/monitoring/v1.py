# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, constr

from ....io.k8s.apimachinery.pkg.apis.meta import v1


class MatchExpression(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class MatchField(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class Preference(BaseModel):
    matchExpressions: Optional[List[MatchExpression]] = Field(
        None, description="A list of node selector requirements by node's labels."
    )
    matchFields: Optional[List[MatchField]] = Field(
        None, description="A list of node selector requirements by node's fields."
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItem(BaseModel):
    preference: Preference = Field(
        ...,
        description='A node selector term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.',
    )


class MatchExpressionModel(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class MatchFieldModel(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class NodeSelectorTerm(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel]] = Field(
        None, description="A list of node selector requirements by node's labels."
    )
    matchFields: Optional[List[MatchFieldModel]] = Field(
        None, description="A list of node selector requirements by node's fields."
    )


class RequiredDuringSchedulingIgnoredDuringExecution(BaseModel):
    nodeSelectorTerms: List[NodeSelectorTerm] = Field(
        ..., description='Required. A list of node selector terms. The terms are ORed.'
    )


class NodeAffinity(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItem]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        RequiredDuringSchedulingIgnoredDuringExecution
    ] = Field(
        None,
        description='If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.',
    )


class MatchExpressionModel1(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel1]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel2(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel2]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class PodAffinityTerm(BaseModel):
    labelSelector: Optional[LabelSelector] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelector] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace"',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItemModel(BaseModel):
    podAffinityTerm: PodAffinityTerm = Field(
        ...,
        description='Required. A pod affinity term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
    )


class MatchExpressionModel3(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel3]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel4(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel4]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class RequiredDuringSchedulingIgnoredDuringExecutionItem(BaseModel):
    labelSelector: Optional[LabelSelectorModel] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace"',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PodAffinity(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItemModel]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        List[RequiredDuringSchedulingIgnoredDuringExecutionItem]
    ] = Field(
        None,
        description='If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
    )


class MatchExpressionModel5(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel1(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel5]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel6(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel1(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel6]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class PodAffinityTermModel(BaseModel):
    labelSelector: Optional[LabelSelectorModel1] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel1] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace"',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItemModel1(BaseModel):
    podAffinityTerm: PodAffinityTermModel = Field(
        ...,
        description='Required. A pod affinity term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
    )


class MatchExpressionModel7(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel2(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel7]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel8(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel2(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel8]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class RequiredDuringSchedulingIgnoredDuringExecutionItemModel(BaseModel):
    labelSelector: Optional[LabelSelectorModel2] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel2] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace"',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PodAntiAffinity(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItemModel1]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        List[RequiredDuringSchedulingIgnoredDuringExecutionItemModel]
    ] = Field(
        None,
        description='If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
    )


class Affinity(BaseModel):
    nodeAffinity: Optional[NodeAffinity] = Field(
        None, description='Describes node affinity scheduling rules for the pod.'
    )
    podAffinity: Optional[PodAffinity] = Field(
        None,
        description='Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).',
    )
    podAntiAffinity: Optional[PodAntiAffinity] = Field(
        None,
        description='Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).',
    )


class MatchExpressionModel9(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class AlertmanagerConfigNamespaceSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel9]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel10(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class AlertmanagerConfigSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel10]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class AlertmanagerConfiguration(BaseModel):
    name: Optional[constr(min_length=1)] = Field(
        None,
        description='The name of the AlertmanagerConfig resource which is used to generate the global configuration. It must be defined in the same namespace as the Alertmanager object. The operator will not enforce a `namespace` label for routes and inhibition rules.',
    )


class ConfigMapKeyRef(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class FieldRef(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRef(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class SecretKeyRef(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ValueFrom(BaseModel):
    configMapKeyRef: Optional[ConfigMapKeyRef] = Field(
        None, description='Selects a key of a ConfigMap.'
    )
    fieldRef: Optional[FieldRef] = Field(
        None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItem(BaseModel):
    name: str = Field(
        ..., description='Name of the environment variable. Must be a C_IDENTIFIER.'
    )
    value: Optional[str] = Field(
        None,
        description='Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
    )
    valueFrom: Optional[ValueFrom] = Field(
        None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class ConfigMapRef(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap must be defined'
    )


class SecretRef(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret must be defined'
    )


class EnvFromItem(BaseModel):
    configMapRef: Optional[ConfigMapRef] = Field(
        None, description='The ConfigMap to select from'
    )
    prefix: Optional[str] = Field(
        None,
        description='An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
    )
    secretRef: Optional[SecretRef] = Field(
        None, description='The Secret to select from'
    )


class Exec(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeader(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGet(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeader]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocket(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PostStart(BaseModel):
    exec: Optional[Exec] = Field(None, description='Exec specifies the action to take.')
    httpGet: Optional[HttpGet] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocket] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class ExecModel(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PreStop(BaseModel):
    exec: Optional[ExecModel] = Field(
        None, description='Exec specifies the action to take.'
    )
    httpGet: Optional[HttpGetModel] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class Lifecycle(BaseModel):
    postStart: Optional[PostStart] = Field(
        None,
        description='PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks',
    )
    preStop: Optional[PreStop] = Field(
        None,
        description="PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    )


class ExecModel1(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class Grpc(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel1(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel1(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel1]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel1(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class LivenessProbe(BaseModel):
    exec: Optional[ExecModel1] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[Grpc] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel1] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel1] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class Port(BaseModel):
    containerPort: int = Field(
        ...,
        description="Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
    )
    hostIP: Optional[str] = Field(
        None, description='What host IP to bind the external port to.'
    )
    hostPort: Optional[int] = Field(
        None,
        description='Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
    )
    name: Optional[str] = Field(
        None,
        description='If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
    )
    protocol: Optional[str] = Field(
        None,
        description='Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".',
    )


class ExecModel2(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel2(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel2(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel2]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel2(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class ReadinessProbe(BaseModel):
    exec: Optional[ExecModel2] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel2] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel2] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class Resources(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class Capabilities(BaseModel):
    add: Optional[List[str]] = Field(None, description='Added capabilities')
    drop: Optional[List[str]] = Field(None, description='Removed capabilities')


class SeLinuxOptions(BaseModel):
    level: Optional[str] = Field(
        None, description='Level is SELinux level label that applies to the container.'
    )
    role: Optional[str] = Field(
        None, description='Role is a SELinux role label that applies to the container.'
    )
    type: Optional[str] = Field(
        None, description='Type is a SELinux type label that applies to the container.'
    )
    user: Optional[str] = Field(
        None, description='User is a SELinux user label that applies to the container.'
    )


class SeccompProfile(BaseModel):
    localhostProfile: Optional[str] = Field(
        None,
        description='localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet\'s configured seccomp profile location. Must only be set if type is "Localhost".',
    )
    type: str = Field(
        ...,
        description='type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.',
    )


class WindowsOptions(BaseModel):
    gmsaCredentialSpec: Optional[str] = Field(
        None,
        description='GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
    )
    gmsaCredentialSpecName: Optional[str] = Field(
        None,
        description='GMSACredentialSpecName is the name of the GMSA credential spec to use.',
    )
    hostProcess: Optional[bool] = Field(
        None,
        description="HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
    )
    runAsUserName: Optional[str] = Field(
        None,
        description='The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )


class SecurityContext(BaseModel):
    allowPrivilegeEscalation: Optional[bool] = Field(
        None,
        description='AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.',
    )
    capabilities: Optional[Capabilities] = Field(
        None,
        description='The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.',
    )
    privileged: Optional[bool] = Field(
        None,
        description='Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.',
    )
    procMount: Optional[str] = Field(
        None,
        description='procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.',
    )
    readOnlyRootFilesystem: Optional[bool] = Field(
        None,
        description='Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsGroup: Optional[int] = Field(
        None,
        description='The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsNonRoot: Optional[bool] = Field(
        None,
        description='Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    runAsUser: Optional[int] = Field(
        None,
        description='The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seLinuxOptions: Optional[SeLinuxOptions] = Field(
        None,
        description='The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seccompProfile: Optional[SeccompProfile] = Field(
        None,
        description='The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.',
    )
    windowsOptions: Optional[WindowsOptions] = Field(
        None,
        description='The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.',
    )


class ExecModel3(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel1(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel3(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel3(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel3]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel3(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class StartupProbe(BaseModel):
    exec: Optional[ExecModel3] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel1] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel3] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel3] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class VolumeDevice(BaseModel):
    devicePath: str = Field(
        ...,
        description='devicePath is the path inside of the container that the device will be mapped to.',
    )
    name: str = Field(
        ...,
        description='name must match the name of a persistentVolumeClaim in the pod',
    )


class VolumeMount(BaseModel):
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted.  Must not contain ':'.",
    )
    mountPropagation: Optional[str] = Field(
        None,
        description='mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
    )
    name: str = Field(..., description='This must match the Name of a Volume.')
    readOnly: Optional[bool] = Field(
        None,
        description='Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
    )
    subPath: Optional[str] = Field(
        None,
        description='Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
    )
    subPathExpr: Optional[str] = Field(
        None,
        description='Expanded path within the volume from which the container\'s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container\'s environment. Defaults to "" (volume\'s root). SubPathExpr and SubPath are mutually exclusive.',
    )


class Container(BaseModel):
    args: Optional[List[str]] = Field(
        None,
        description='Arguments to the entrypoint. The docker image\'s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    command: Optional[List[str]] = Field(
        None,
        description='Entrypoint array. Not executed within a shell. The docker image\'s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    env: Optional[List[EnvItem]] = Field(
        None,
        description='List of environment variables to set in the container. Cannot be updated.',
    )
    envFrom: Optional[List[EnvFromItem]] = Field(
        None,
        description='List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
    )
    image: Optional[str] = Field(
        None,
        description='Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
    )
    imagePullPolicy: Optional[str] = Field(
        None,
        description='Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
    )
    lifecycle: Optional[Lifecycle] = Field(
        None,
        description='Actions that the management system should take in response to container lifecycle events. Cannot be updated.',
    )
    livenessProbe: Optional[LivenessProbe] = Field(
        None,
        description='Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    name: str = Field(
        ...,
        description='Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
    )
    ports: Optional[List[Port]] = Field(
        None,
        description='List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
    )
    readinessProbe: Optional[ReadinessProbe] = Field(
        None,
        description='Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    resources: Optional[Resources] = Field(
        None,
        description='Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    securityContext: Optional[SecurityContext] = Field(
        None,
        description='SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/',
    )
    startupProbe: Optional[StartupProbe] = Field(
        None,
        description="StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    stdin: Optional[bool] = Field(
        None,
        description='Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
    )
    stdinOnce: Optional[bool] = Field(
        None,
        description='Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
    )
    terminationMessagePath: Optional[str] = Field(
        None,
        description="Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
    )
    terminationMessagePolicy: Optional[str] = Field(
        None,
        description='Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
    )
    tty: Optional[bool] = Field(
        None,
        description="Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
    )
    volumeDevices: Optional[List[VolumeDevice]] = Field(
        None,
        description='volumeDevices is the list of block devices to be used by the container.',
    )
    volumeMounts: Optional[List[VolumeMount]] = Field(
        None,
        description="Pod volumes to mount into the container's filesystem. Cannot be updated.",
    )
    workingDir: Optional[str] = Field(
        None,
        description="Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
    )


class HostAliase(BaseModel):
    hostnames: List[str] = Field(..., description='Hostnames for the above IP address.')
    ip: str = Field(..., description='IP address of the host file entry.')


class ImagePullSecret(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class ConfigMapKeyRefModel(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class FieldRefModel(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class SecretKeyRefModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ValueFromModel(BaseModel):
    configMapKeyRef: Optional[ConfigMapKeyRefModel] = Field(
        None, description='Selects a key of a ConfigMap.'
    )
    fieldRef: Optional[FieldRefModel] = Field(
        None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.',
    )
    secretKeyRef: Optional[SecretKeyRefModel] = Field(
        None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItemModel(BaseModel):
    name: str = Field(
        ..., description='Name of the environment variable. Must be a C_IDENTIFIER.'
    )
    value: Optional[str] = Field(
        None,
        description='Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
    )
    valueFrom: Optional[ValueFromModel] = Field(
        None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class ConfigMapRefModel(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap must be defined'
    )


class SecretRefModel(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret must be defined'
    )


class EnvFromItemModel(BaseModel):
    configMapRef: Optional[ConfigMapRefModel] = Field(
        None, description='The ConfigMap to select from'
    )
    prefix: Optional[str] = Field(
        None,
        description='An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
    )
    secretRef: Optional[SecretRefModel] = Field(
        None, description='The Secret to select from'
    )


class ExecModel4(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel4(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel4(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel4]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel4(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PostStartModel(BaseModel):
    exec: Optional[ExecModel4] = Field(
        None, description='Exec specifies the action to take.'
    )
    httpGet: Optional[HttpGetModel4] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel4] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class ExecModel5(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel5(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel5(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel5]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel5(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PreStopModel(BaseModel):
    exec: Optional[ExecModel5] = Field(
        None, description='Exec specifies the action to take.'
    )
    httpGet: Optional[HttpGetModel5] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel5] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class LifecycleModel(BaseModel):
    postStart: Optional[PostStartModel] = Field(
        None,
        description='PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks',
    )
    preStop: Optional[PreStopModel] = Field(
        None,
        description="PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    )


class ExecModel6(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel2(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel6(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel6(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel6]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel6(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class LivenessProbeModel(BaseModel):
    exec: Optional[ExecModel6] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel2] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel6] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel6] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class PortModel(BaseModel):
    containerPort: int = Field(
        ...,
        description="Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
    )
    hostIP: Optional[str] = Field(
        None, description='What host IP to bind the external port to.'
    )
    hostPort: Optional[int] = Field(
        None,
        description='Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
    )
    name: Optional[str] = Field(
        None,
        description='If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
    )
    protocol: Optional[str] = Field(
        None,
        description='Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".',
    )


class ExecModel7(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel3(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel7(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel7(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel7]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel7(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class ReadinessProbeModel(BaseModel):
    exec: Optional[ExecModel7] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel3] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel7] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel7] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class ResourcesModel(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class CapabilitiesModel(BaseModel):
    add: Optional[List[str]] = Field(None, description='Added capabilities')
    drop: Optional[List[str]] = Field(None, description='Removed capabilities')


class SeLinuxOptionsModel(BaseModel):
    level: Optional[str] = Field(
        None, description='Level is SELinux level label that applies to the container.'
    )
    role: Optional[str] = Field(
        None, description='Role is a SELinux role label that applies to the container.'
    )
    type: Optional[str] = Field(
        None, description='Type is a SELinux type label that applies to the container.'
    )
    user: Optional[str] = Field(
        None, description='User is a SELinux user label that applies to the container.'
    )


class SeccompProfileModel(BaseModel):
    localhostProfile: Optional[str] = Field(
        None,
        description='localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet\'s configured seccomp profile location. Must only be set if type is "Localhost".',
    )
    type: str = Field(
        ...,
        description='type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.',
    )


class WindowsOptionsModel(BaseModel):
    gmsaCredentialSpec: Optional[str] = Field(
        None,
        description='GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
    )
    gmsaCredentialSpecName: Optional[str] = Field(
        None,
        description='GMSACredentialSpecName is the name of the GMSA credential spec to use.',
    )
    hostProcess: Optional[bool] = Field(
        None,
        description="HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
    )
    runAsUserName: Optional[str] = Field(
        None,
        description='The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )


class SecurityContextModel(BaseModel):
    allowPrivilegeEscalation: Optional[bool] = Field(
        None,
        description='AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.',
    )
    capabilities: Optional[CapabilitiesModel] = Field(
        None,
        description='The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.',
    )
    privileged: Optional[bool] = Field(
        None,
        description='Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.',
    )
    procMount: Optional[str] = Field(
        None,
        description='procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.',
    )
    readOnlyRootFilesystem: Optional[bool] = Field(
        None,
        description='Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsGroup: Optional[int] = Field(
        None,
        description='The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsNonRoot: Optional[bool] = Field(
        None,
        description='Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    runAsUser: Optional[int] = Field(
        None,
        description='The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seLinuxOptions: Optional[SeLinuxOptionsModel] = Field(
        None,
        description='The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seccompProfile: Optional[SeccompProfileModel] = Field(
        None,
        description='The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.',
    )
    windowsOptions: Optional[WindowsOptionsModel] = Field(
        None,
        description='The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.',
    )


class ExecModel8(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel4(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel8(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel8(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel8]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel8(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class StartupProbeModel(BaseModel):
    exec: Optional[ExecModel8] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel4] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel8] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel8] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class VolumeDeviceModel(BaseModel):
    devicePath: str = Field(
        ...,
        description='devicePath is the path inside of the container that the device will be mapped to.',
    )
    name: str = Field(
        ...,
        description='name must match the name of a persistentVolumeClaim in the pod',
    )


class VolumeMountModel(BaseModel):
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted.  Must not contain ':'.",
    )
    mountPropagation: Optional[str] = Field(
        None,
        description='mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
    )
    name: str = Field(..., description='This must match the Name of a Volume.')
    readOnly: Optional[bool] = Field(
        None,
        description='Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
    )
    subPath: Optional[str] = Field(
        None,
        description='Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
    )
    subPathExpr: Optional[str] = Field(
        None,
        description='Expanded path within the volume from which the container\'s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container\'s environment. Defaults to "" (volume\'s root). SubPathExpr and SubPath are mutually exclusive.',
    )


class InitContainer(BaseModel):
    args: Optional[List[str]] = Field(
        None,
        description='Arguments to the entrypoint. The docker image\'s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    command: Optional[List[str]] = Field(
        None,
        description='Entrypoint array. Not executed within a shell. The docker image\'s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    env: Optional[List[EnvItemModel]] = Field(
        None,
        description='List of environment variables to set in the container. Cannot be updated.',
    )
    envFrom: Optional[List[EnvFromItemModel]] = Field(
        None,
        description='List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
    )
    image: Optional[str] = Field(
        None,
        description='Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
    )
    imagePullPolicy: Optional[str] = Field(
        None,
        description='Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
    )
    lifecycle: Optional[LifecycleModel] = Field(
        None,
        description='Actions that the management system should take in response to container lifecycle events. Cannot be updated.',
    )
    livenessProbe: Optional[LivenessProbeModel] = Field(
        None,
        description='Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    name: str = Field(
        ...,
        description='Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
    )
    ports: Optional[List[PortModel]] = Field(
        None,
        description='List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
    )
    readinessProbe: Optional[ReadinessProbeModel] = Field(
        None,
        description='Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    resources: Optional[ResourcesModel] = Field(
        None,
        description='Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    securityContext: Optional[SecurityContextModel] = Field(
        None,
        description='SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/',
    )
    startupProbe: Optional[StartupProbeModel] = Field(
        None,
        description="StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    stdin: Optional[bool] = Field(
        None,
        description='Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
    )
    stdinOnce: Optional[bool] = Field(
        None,
        description='Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
    )
    terminationMessagePath: Optional[str] = Field(
        None,
        description="Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
    )
    terminationMessagePolicy: Optional[str] = Field(
        None,
        description='Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
    )
    tty: Optional[bool] = Field(
        None,
        description="Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
    )
    volumeDevices: Optional[List[VolumeDeviceModel]] = Field(
        None,
        description='volumeDevices is the list of block devices to be used by the container.',
    )
    volumeMounts: Optional[List[VolumeMountModel]] = Field(
        None,
        description="Pod volumes to mount into the container's filesystem. Cannot be updated.",
    )
    workingDir: Optional[str] = Field(
        None,
        description="Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
    )


class LogFormat(Enum):
    _ = ''
    logfmt = 'logfmt'
    json = 'json'


class LogLevel(Enum):
    _ = ''
    debug = 'debug'
    info = 'info'
    warn = 'warn'
    error = 'error'


class PodMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description='Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
    )
    name: Optional[str] = Field(
        None,
        description='Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
    )


class ResourcesModel1(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class SeLinuxOptionsModel1(BaseModel):
    level: Optional[str] = Field(
        None, description='Level is SELinux level label that applies to the container.'
    )
    role: Optional[str] = Field(
        None, description='Role is a SELinux role label that applies to the container.'
    )
    type: Optional[str] = Field(
        None, description='Type is a SELinux type label that applies to the container.'
    )
    user: Optional[str] = Field(
        None, description='User is a SELinux user label that applies to the container.'
    )


class SeccompProfileModel1(BaseModel):
    localhostProfile: Optional[str] = Field(
        None,
        description='localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet\'s configured seccomp profile location. Must only be set if type is "Localhost".',
    )
    type: str = Field(
        ...,
        description='type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.',
    )


class Sysctl(BaseModel):
    name: str = Field(..., description='Name of a property to set')
    value: str = Field(..., description='Value of a property to set')


class WindowsOptionsModel1(BaseModel):
    gmsaCredentialSpec: Optional[str] = Field(
        None,
        description='GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
    )
    gmsaCredentialSpecName: Optional[str] = Field(
        None,
        description='GMSACredentialSpecName is the name of the GMSA credential spec to use.',
    )
    hostProcess: Optional[bool] = Field(
        None,
        description="HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
    )
    runAsUserName: Optional[str] = Field(
        None,
        description='The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )


class SecurityContextModel1(BaseModel):
    fsGroup: Optional[int] = Field(
        None,
        description="A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: \n 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- \n If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.",
    )
    fsGroupChangePolicy: Optional[str] = Field(
        None,
        description='fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsGroup: Optional[int] = Field(
        None,
        description='The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsNonRoot: Optional[bool] = Field(
        None,
        description='Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    runAsUser: Optional[int] = Field(
        None,
        description='The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.',
    )
    seLinuxOptions: Optional[SeLinuxOptionsModel1] = Field(
        None,
        description='The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.',
    )
    seccompProfile: Optional[SeccompProfileModel1] = Field(
        None,
        description='The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.',
    )
    supplementalGroups: Optional[List[int]] = Field(
        None,
        description="A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.",
    )
    sysctls: Optional[List[Sysctl]] = Field(
        None,
        description='Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.',
    )
    windowsOptions: Optional[WindowsOptionsModel1] = Field(
        None,
        description="The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.",
    )


class EmptyDir(BaseModel):
    medium: Optional[str] = Field(
        None,
        description='What type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
    )
    sizeLimit: Optional[Any] = Field(
        None,
        description='Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir',
    )


class DataSource(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class DataSourceRef(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class ResourcesModel2(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class MatchExpressionModel11(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class Selector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel11]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class Spec(BaseModel):
    accessModes: Optional[List[str]] = Field(
        None,
        description='AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
    )
    dataSource: Optional[DataSource] = Field(
        None,
        description='This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.',
    )
    dataSourceRef: Optional[DataSourceRef] = Field(
        None,
        description='Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.',
    )
    resources: Optional[ResourcesModel2] = Field(
        None,
        description='Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources',
    )
    selector: Optional[Selector] = Field(
        None, description='A label query over volumes to consider for binding.'
    )
    storageClassName: Optional[str] = Field(
        None,
        description='Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1',
    )
    volumeMode: Optional[str] = Field(
        None,
        description='volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='VolumeName is the binding reference to the PersistentVolume backing this claim.',
    )


class VolumeClaimTemplate(BaseModel):
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.',
    )
    spec: Spec = Field(
        ...,
        description='The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.',
    )


class Ephemeral(BaseModel):
    volumeClaimTemplate: Optional[VolumeClaimTemplate] = Field(
        None,
        description='Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). \n An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. \n This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. \n Required, must not be nil.',
    )


class Metadata(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description='Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
    )
    name: Optional[str] = Field(
        None,
        description='Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
    )


class DataSourceModel(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class DataSourceRefModel(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class ResourcesModel3(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class MatchExpressionModel12(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class SelectorModel(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel12]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class SpecModel(BaseModel):
    accessModes: Optional[List[str]] = Field(
        None,
        description='AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
    )
    dataSource: Optional[DataSourceModel] = Field(
        None,
        description='This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.',
    )
    dataSourceRef: Optional[DataSourceRefModel] = Field(
        None,
        description='Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.',
    )
    resources: Optional[ResourcesModel3] = Field(
        None,
        description='Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources',
    )
    selector: Optional[SelectorModel] = Field(
        None, description='A label query over volumes to consider for binding.'
    )
    storageClassName: Optional[str] = Field(
        None,
        description='Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1',
    )
    volumeMode: Optional[str] = Field(
        None,
        description='volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='VolumeName is the binding reference to the PersistentVolume backing this claim.',
    )


class Condition(BaseModel):
    lastProbeTime: Optional[datetime] = Field(
        None, description='Last time we probed the condition.'
    )
    lastTransitionTime: Optional[datetime] = Field(
        None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        None,
        description='Unique, this should be a short, machine understandable string that gives the reason for condition\'s last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.',
    )
    status: str
    type: str = Field(
        ...,
        description='PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type',
    )


class Status(BaseModel):
    accessModes: Optional[List[str]] = Field(
        None,
        description='AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
    )
    allocatedResources: Optional[Dict[str, Any]] = Field(
        None,
        description='The storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.',
    )
    capacity: Optional[Dict[str, Any]] = Field(
        None, description='Represents the actual resources of the underlying volume.'
    )
    conditions: Optional[List[Condition]] = Field(
        None,
        description="Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
    )
    phase: Optional[str] = Field(
        None, description='Phase represents the current phase of PersistentVolumeClaim.'
    )
    resizeStatus: Optional[str] = Field(
        None,
        description='ResizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.',
    )


class VolumeClaimTemplateModel(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[Metadata] = Field(
        None,
        description='EmbeddedMetadata contains metadata relevant to an EmbeddedResource.',
    )
    spec: Optional[SpecModel] = Field(
        None,
        description='Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
    )
    status: Optional[Status] = Field(
        None,
        description='Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
    )


class Storage(BaseModel):
    disableMountSubPath: Optional[bool] = Field(
        None,
        description='Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.',
    )
    emptyDir: Optional[EmptyDir] = Field(
        None,
        description='EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir',
    )
    ephemeral: Optional[Ephemeral] = Field(
        None,
        description='EphemeralVolumeSource to be used by the Prometheus StatefulSets. This is a beta field in k8s 1.21, for lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes',
    )
    volumeClaimTemplate: Optional[VolumeClaimTemplateModel] = Field(
        None, description='A PVC spec to be used by the Prometheus StatefulSets.'
    )


class Toleration(BaseModel):
    effect: Optional[str] = Field(
        None,
        description='Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
    )
    key: Optional[str] = Field(
        None,
        description='Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
    )
    operator: Optional[str] = Field(
        None,
        description="Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
    )
    tolerationSeconds: Optional[int] = Field(
        None,
        description='TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
    )
    value: Optional[str] = Field(
        None,
        description='Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
    )


class MatchExpressionModel13(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel3(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel13]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class TopologySpreadConstraint(BaseModel):
    labelSelector: Optional[LabelSelectorModel3] = Field(
        None,
        description='LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.',
    )
    maxSkew: int = Field(
        ...,
        description="MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
    )
    topologyKey: str = Field(
        ...,
        description='TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It\'s a required field.',
    )
    whenUnsatisfiable: str = Field(
        ...,
        description='WhenUnsatisfiable indicates how to deal with a pod if it doesn\'t satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won\'t make it *more* imbalanced. It\'s a required field.',
    )


class VolumeMountModel1(BaseModel):
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted.  Must not contain ':'.",
    )
    mountPropagation: Optional[str] = Field(
        None,
        description='mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
    )
    name: str = Field(..., description='This must match the Name of a Volume.')
    readOnly: Optional[bool] = Field(
        None,
        description='Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
    )
    subPath: Optional[str] = Field(
        None,
        description='Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
    )
    subPathExpr: Optional[str] = Field(
        None,
        description='Expanded path within the volume from which the container\'s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container\'s environment. Defaults to "" (volume\'s root). SubPathExpr and SubPath are mutually exclusive.',
    )


class AwsElasticBlockStore(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    partition: Optional[int] = Field(
        None,
        description='The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
    )
    volumeID: str = Field(
        ...,
        description='Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
    )


class AzureDisk(BaseModel):
    cachingMode: Optional[str] = Field(
        None, description='Host Caching mode: None, Read Only, Read Write.'
    )
    diskName: str = Field(
        ..., description='The Name of the data disk in the blob storage'
    )
    diskURI: str = Field(..., description='The URI the data disk in the blob storage')
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    kind: Optional[str] = Field(
        None,
        description='Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )


class AzureFile(BaseModel):
    readOnly: Optional[bool] = Field(
        None,
        description='Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretName: str = Field(
        ...,
        description='the name of secret that contains Azure Storage Account Name and Key',
    )
    shareName: str = Field(..., description='Share Name')


class SecretRefModel1(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class Cephfs(BaseModel):
    monitors: List[str] = Field(
        ...,
        description='Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    path: Optional[str] = Field(
        None,
        description='Optional: Used as the mounted root, rather than the full Ceph tree, default is /',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    secretFile: Optional[str] = Field(
        None,
        description='Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    secretRef: Optional[SecretRefModel1] = Field(
        None,
        description='Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    user: Optional[str] = Field(
        None,
        description='Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )


class SecretRefModel2(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class Cinder(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    secretRef: Optional[SecretRefModel2] = Field(
        None,
        description='Optional: points to a secret object containing parameters used to connect to OpenStack.',
    )
    volumeID: str = Field(
        ...,
        description='volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )


class Item(BaseModel):
    key: str = Field(..., description='The key to project.')
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class ConfigMap(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    items: Optional[List[Item]] = Field(
        None,
        description="If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its keys must be defined'
    )


class NodePublishSecretRef(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class Csi(BaseModel):
    driver: str = Field(
        ...,
        description='Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.',
    )
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.',
    )
    nodePublishSecretRef: Optional[NodePublishSecretRef] = Field(
        None,
        description='NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Specifies a read-only configuration for the volume. Defaults to false (read/write).',
    )
    volumeAttributes: Optional[Dict[str, str]] = Field(
        None,
        description="VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
    )


class FieldRefModel1(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel1(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class ItemModel(BaseModel):
    fieldRef: Optional[FieldRefModel1] = Field(
        None,
        description='Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.',
    )
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel1] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.',
    )


class DownwardAPI(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    items: Optional[List[ItemModel]] = Field(
        None, description='Items is a list of downward API volume file'
    )


class EmptyDirModel(BaseModel):
    medium: Optional[str] = Field(
        None,
        description='What type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
    )
    sizeLimit: Optional[Any] = Field(
        None,
        description='Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir',
    )


class DataSourceModel1(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class DataSourceRefModel1(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class ResourcesModel4(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class MatchExpressionModel14(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class SelectorModel1(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel14]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class SpecModel1(BaseModel):
    accessModes: Optional[List[str]] = Field(
        None,
        description='AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
    )
    dataSource: Optional[DataSourceModel1] = Field(
        None,
        description='This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.',
    )
    dataSourceRef: Optional[DataSourceRefModel1] = Field(
        None,
        description='Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.',
    )
    resources: Optional[ResourcesModel4] = Field(
        None,
        description='Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources',
    )
    selector: Optional[SelectorModel1] = Field(
        None, description='A label query over volumes to consider for binding.'
    )
    storageClassName: Optional[str] = Field(
        None,
        description='Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1',
    )
    volumeMode: Optional[str] = Field(
        None,
        description='volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='VolumeName is the binding reference to the PersistentVolume backing this claim.',
    )


class VolumeClaimTemplateModel1(BaseModel):
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.',
    )
    spec: SpecModel1 = Field(
        ...,
        description='The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.',
    )


class EphemeralModel(BaseModel):
    volumeClaimTemplate: Optional[VolumeClaimTemplateModel1] = Field(
        None,
        description='Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). \n An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. \n This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. \n Required, must not be nil.',
    )


class Fc(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    lun: Optional[int] = Field(None, description='Optional: FC target lun number')
    readOnly: Optional[bool] = Field(
        None,
        description='Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    targetWWNs: Optional[List[str]] = Field(
        None, description='Optional: FC target worldwide names (WWNs)'
    )
    wwids: Optional[List[str]] = Field(
        None,
        description='Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.',
    )


class SecretRefModel3(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class FlexVolume(BaseModel):
    driver: str = Field(
        ..., description='Driver is the name of the driver to use for this volume.'
    )
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
    )
    options: Optional[Dict[str, str]] = Field(
        None, description='Optional: Extra command options if any.'
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretRef: Optional[SecretRefModel3] = Field(
        None,
        description='Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.',
    )


class Flocker(BaseModel):
    datasetName: Optional[str] = Field(
        None,
        description='Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated',
    )
    datasetUUID: Optional[str] = Field(
        None,
        description='UUID of the dataset. This is unique identifier of a Flocker dataset',
    )


class GcePersistentDisk(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    partition: Optional[int] = Field(
        None,
        description='The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )
    pdName: str = Field(
        ...,
        description='Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )


class GitRepo(BaseModel):
    directory: Optional[str] = Field(
        None,
        description="Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
    )
    repository: str = Field(..., description='Repository URL')
    revision: Optional[str] = Field(
        None, description='Commit hash for the specified revision.'
    )


class Glusterfs(BaseModel):
    endpoints: str = Field(
        ...,
        description='EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
    )
    path: str = Field(
        ...,
        description='Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
    )


class HostPath(BaseModel):
    path: str = Field(
        ...,
        description='Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
    )
    type: Optional[str] = Field(
        None,
        description='Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
    )


class SecretRefModel4(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class Iscsi(BaseModel):
    chapAuthDiscovery: Optional[bool] = Field(
        None, description='whether support iSCSI Discovery CHAP authentication'
    )
    chapAuthSession: Optional[bool] = Field(
        None, description='whether support iSCSI Session CHAP authentication'
    )
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    initiatorName: Optional[str] = Field(
        None,
        description='Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.',
    )
    iqn: str = Field(..., description='Target iSCSI Qualified Name.')
    iscsiInterface: Optional[str] = Field(
        None,
        description="iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
    )
    lun: int = Field(..., description='iSCSI Target Lun number.')
    portals: Optional[List[str]] = Field(
        None,
        description='iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.',
    )
    secretRef: Optional[SecretRefModel4] = Field(
        None, description='CHAP Secret for iSCSI target and initiator authentication'
    )
    targetPortal: str = Field(
        ...,
        description='iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
    )


class Nfs(BaseModel):
    path: str = Field(
        ...,
        description='Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
    )
    server: str = Field(
        ...,
        description='Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
    )


class PersistentVolumeClaim(BaseModel):
    claimName: str = Field(
        ...,
        description='ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Will force the ReadOnly setting in VolumeMounts. Default false.',
    )


class PhotonPersistentDisk(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    pdID: str = Field(
        ..., description='ID that identifies Photon Controller persistent disk'
    )


class PortworxVolume(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    volumeID: str = Field(
        ..., description='VolumeID uniquely identifies a Portworx volume'
    )


class ItemModel1(BaseModel):
    key: str = Field(..., description='The key to project.')
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class ConfigMapModel(BaseModel):
    items: Optional[List[ItemModel1]] = Field(
        None,
        description="If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its keys must be defined'
    )


class FieldRefModel2(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel2(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class ItemModel2(BaseModel):
    fieldRef: Optional[FieldRefModel2] = Field(
        None,
        description='Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.',
    )
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel2] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.',
    )


class DownwardAPIModel(BaseModel):
    items: Optional[List[ItemModel2]] = Field(
        None, description='Items is a list of DownwardAPIVolume file'
    )


class ItemModel3(BaseModel):
    key: str = Field(..., description='The key to project.')
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class Secret(BaseModel):
    items: Optional[List[ItemModel3]] = Field(
        None,
        description="If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ServiceAccountToken(BaseModel):
    audience: Optional[str] = Field(
        None,
        description='Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.',
    )
    expirationSeconds: Optional[int] = Field(
        None,
        description='ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.',
    )
    path: str = Field(
        ...,
        description='Path is the path relative to the mount point of the file to project the token into.',
    )


class Source(BaseModel):
    configMap: Optional[ConfigMapModel] = Field(
        None, description='information about the configMap data to project'
    )
    downwardAPI: Optional[DownwardAPIModel] = Field(
        None, description='information about the downwardAPI data to project'
    )
    secret: Optional[Secret] = Field(
        None, description='information about the secret data to project'
    )
    serviceAccountToken: Optional[ServiceAccountToken] = Field(
        None, description='information about the serviceAccountToken data to project'
    )


class Projected(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    sources: Optional[List[Source]] = Field(
        None, description='list of volume projections'
    )


class Quobyte(BaseModel):
    group: Optional[str] = Field(
        None, description='Group to map volume access to Default is no group'
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.',
    )
    registry: str = Field(
        ...,
        description='Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes',
    )
    tenant: Optional[str] = Field(
        None,
        description='Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin',
    )
    user: Optional[str] = Field(
        None, description='User to map volume access to Defaults to serivceaccount user'
    )
    volume: str = Field(
        ...,
        description='Volume is a string that references an already created Quobyte volume by name.',
    )


class SecretRefModel5(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class Rbd(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    image: str = Field(
        ...,
        description='The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    keyring: Optional[str] = Field(
        None,
        description='Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    monitors: List[str] = Field(
        ...,
        description='A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    pool: Optional[str] = Field(
        None,
        description='The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    secretRef: Optional[SecretRefModel5] = Field(
        None,
        description='SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    user: Optional[str] = Field(
        None,
        description='The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )


class SecretRefModel6(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class ScaleIO(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".',
    )
    gateway: str = Field(
        ..., description='The host address of the ScaleIO API Gateway.'
    )
    protectionDomain: Optional[str] = Field(
        None,
        description='The name of the ScaleIO Protection Domain for the configured storage.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretRef: SecretRefModel6 = Field(
        ...,
        description='SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.',
    )
    sslEnabled: Optional[bool] = Field(
        None,
        description='Flag to enable/disable SSL communication with Gateway, default false',
    )
    storageMode: Optional[str] = Field(
        None,
        description='Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.',
    )
    storagePool: Optional[str] = Field(
        None,
        description='The ScaleIO Storage Pool associated with the protection domain.',
    )
    system: str = Field(
        ..., description='The name of the storage system as configured in ScaleIO.'
    )
    volumeName: Optional[str] = Field(
        None,
        description='The name of a volume already created in the ScaleIO system that is associated with this volume source.',
    )


class ItemModel4(BaseModel):
    key: str = Field(..., description='The key to project.')
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class SecretModel(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    items: Optional[List[ItemModel4]] = Field(
        None,
        description="If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its keys must be defined'
    )
    secretName: Optional[str] = Field(
        None,
        description="Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
    )


class SecretRefModel7(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class Storageos(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretRef: Optional[SecretRefModel7] = Field(
        None,
        description='SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.',
    )
    volumeNamespace: Optional[str] = Field(
        None,
        description='VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod\'s namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.',
    )


class VsphereVolume(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    storagePolicyID: Optional[str] = Field(
        None,
        description='Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.',
    )
    storagePolicyName: Optional[str] = Field(
        None, description='Storage Policy Based Management (SPBM) profile name.'
    )
    volumePath: str = Field(..., description='Path that identifies vSphere volume vmdk')


class Volume(BaseModel):
    awsElasticBlockStore: Optional[AwsElasticBlockStore] = Field(
        None,
        description="AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    )
    azureDisk: Optional[AzureDisk] = Field(
        None,
        description='AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.',
    )
    azureFile: Optional[AzureFile] = Field(
        None,
        description='AzureFile represents an Azure File Service mount on the host and bind mount to the pod.',
    )
    cephfs: Optional[Cephfs] = Field(
        None,
        description="CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
    )
    cinder: Optional[Cinder] = Field(
        None,
        description='Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    configMap: Optional[ConfigMap] = Field(
        None,
        description='ConfigMap represents a configMap that should populate this volume',
    )
    csi: Optional[Csi] = Field(
        None,
        description='CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).',
    )
    downwardAPI: Optional[DownwardAPI] = Field(
        None,
        description='DownwardAPI represents downward API about the pod that should populate this volume',
    )
    emptyDir: Optional[EmptyDirModel] = Field(
        None,
        description="EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    )
    ephemeral: Optional[EphemeralModel] = Field(
        None,
        description="Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. \n Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). \n Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. \n Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. \n A pod can use both types of ephemeral volumes and persistent volumes at the same time.",
    )
    fc: Optional[Fc] = Field(
        None,
        description="FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
    )
    flexVolume: Optional[FlexVolume] = Field(
        None,
        description='FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.',
    )
    flocker: Optional[Flocker] = Field(
        None,
        description="Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
    )
    gcePersistentDisk: Optional[GcePersistentDisk] = Field(
        None,
        description="GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    )
    gitRepo: Optional[GitRepo] = Field(
        None,
        description="GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
    )
    glusterfs: Optional[Glusterfs] = Field(
        None,
        description="Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
    )
    hostPath: Optional[HostPath] = Field(
        None,
        description='HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.',
    )
    iscsi: Optional[Iscsi] = Field(
        None,
        description="ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
    )
    name: str = Field(
        ...,
        description="Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    nfs: Optional[Nfs] = Field(
        None,
        description="NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    )
    persistentVolumeClaim: Optional[PersistentVolumeClaim] = Field(
        None,
        description='PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
    )
    photonPersistentDisk: Optional[PhotonPersistentDisk] = Field(
        None,
        description='PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine',
    )
    portworxVolume: Optional[PortworxVolume] = Field(
        None,
        description='PortworxVolume represents a portworx volume attached and mounted on kubelets host machine',
    )
    projected: Optional[Projected] = Field(
        None,
        description='Items for all in one resources secrets, configmaps, and downward API',
    )
    quobyte: Optional[Quobyte] = Field(
        None,
        description="Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
    )
    rbd: Optional[Rbd] = Field(
        None,
        description="RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
    )
    scaleIO: Optional[ScaleIO] = Field(
        None,
        description='ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.',
    )
    secret: Optional[SecretModel] = Field(
        None,
        description='Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret',
    )
    storageos: Optional[Storageos] = Field(
        None,
        description='StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.',
    )
    vsphereVolume: Optional[VsphereVolume] = Field(
        None,
        description='VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine',
    )


class SpecModel2(BaseModel):
    additionalPeers: Optional[List[str]] = Field(
        None,
        description='AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.',
    )
    affinity: Optional[Affinity] = Field(
        None, description="If specified, the pod's scheduling constraints."
    )
    alertmanagerConfigNamespaceSelector: Optional[
        AlertmanagerConfigNamespaceSelector
    ] = Field(
        None,
        description='Namespaces to be selected for AlertmanagerConfig discovery. If nil, only check own namespace.',
    )
    alertmanagerConfigSelector: Optional[AlertmanagerConfigSelector] = Field(
        None,
        description='AlertmanagerConfigs to be selected for to merge and configure Alertmanager with.',
    )
    alertmanagerConfiguration: Optional[AlertmanagerConfiguration] = Field(
        None,
        description='EXPERIMENTAL: alertmanagerConfiguration specifies the global Alertmanager configuration. If defined, it takes precedence over the `configSecret` field. This field may change in future releases.',
    )
    baseImage: Optional[str] = Field(
        None,
        description="Base image that is used to deploy pods, without tag. Deprecated: use 'image' instead",
    )
    clusterAdvertiseAddress: Optional[str] = Field(
        None,
        description='ClusterAdvertiseAddress is the explicit address to advertise in cluster. Needs to be provided for non RFC1918 [1] (public) addresses. [1] RFC1918: https://tools.ietf.org/html/rfc1918',
    )
    clusterGossipInterval: Optional[str] = Field(
        None, description='Interval between gossip attempts.'
    )
    clusterPeerTimeout: Optional[str] = Field(
        None, description='Timeout for cluster peering.'
    )
    clusterPushpullInterval: Optional[str] = Field(
        None, description='Interval between pushpull attempts.'
    )
    configMaps: Optional[List[str]] = Field(
        None,
        description='ConfigMaps is a list of ConfigMaps in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The ConfigMaps are mounted into /etc/alertmanager/configmaps/<configmap-name>.',
    )
    configSecret: Optional[str] = Field(
        None,
        description="ConfigSecret is the name of a Kubernetes Secret in the same namespace as the Alertmanager object, which contains the configuration for this Alertmanager instance. If empty, it defaults to 'alertmanager-<alertmanager-name>'. \n The Alertmanager configuration should be available under the `alertmanager.yaml` key. Additional keys from the original secret are copied to the generated secret. \n If either the secret or the `alertmanager.yaml` key is missing, the operator provisions an Alertmanager configuration with one empty receiver (effectively dropping alert notifications).",
    )
    containers: Optional[List[Container]] = Field(
        None,
        description='Containers allows injecting additional containers. This is meant to allow adding an authentication proxy to an Alertmanager pod. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `alertmanager` and `config-reloader`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.',
    )
    externalUrl: Optional[str] = Field(
        None,
        description='The external URL the Alertmanager instances will be available under. This is necessary to generate correct URLs. This is necessary if Alertmanager is not served from root of a DNS name.',
    )
    forceEnableClusterMode: Optional[bool] = Field(
        None,
        description='ForceEnableClusterMode ensures Alertmanager does not deactivate the cluster mode when running with a single replica. Use case is e.g. spanning an Alertmanager cluster across Kubernetes clusters with a single replica in each.',
    )
    hostAliases: Optional[List[HostAliase]] = Field(
        None, description="Pods' hostAliases configuration"
    )
    image: Optional[str] = Field(
        None,
        description='Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Alertmanager is being configured.',
    )
    imagePullSecrets: Optional[List[ImagePullSecret]] = Field(
        None,
        description='An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod',
    )
    initContainers: Optional[List[InitContainer]] = Field(
        None,
        description='InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Alertmanager configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.',
    )
    listenLocal: Optional[bool] = Field(
        None,
        description='ListenLocal makes the Alertmanager server listen on loopback, so that it does not bind against the Pod IP. Note this is only for the Alertmanager UI, not the gossip communication.',
    )
    logFormat: Optional[LogFormat] = Field(
        None, description='Log format for Alertmanager to be configured with.'
    )
    logLevel: Optional[LogLevel] = Field(
        None, description='Log level for Alertmanager to be configured with.'
    )
    minReadySeconds: Optional[int] = Field(
        None,
        description='Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field and requires enabling StatefulSetMinReadySeconds feature gate.',
    )
    nodeSelector: Optional[Dict[str, str]] = Field(
        None, description='Define which Nodes the Pods are scheduled on.'
    )
    paused: Optional[bool] = Field(
        None,
        description='If set to true all actions on the underlying managed objects are not goint to be performed, except for delete actions.',
    )
    podMetadata: Optional[PodMetadata] = Field(
        None,
        description='PodMetadata configures Labels and Annotations which are propagated to the alertmanager pods.',
    )
    portName: Optional[str] = Field(
        None,
        description='Port name used for the pods and governing service. This defaults to web',
    )
    priorityClassName: Optional[str] = Field(
        None, description='Priority class assigned to the Pods'
    )
    replicas: Optional[int] = Field(
        None,
        description='Size is the expected size of the alertmanager cluster. The controller will eventually make the size of the running cluster equal to the expected size.',
    )
    resources: Optional[ResourcesModel1] = Field(
        None, description='Define resources requests and limits for single Pods.'
    )
    retention: Optional[str] = Field(
        None,
        description="Time duration Alertmanager shall retain data for. Default is '120h', and must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).",
    )
    routePrefix: Optional[str] = Field(
        None,
        description='The route prefix Alertmanager registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.',
    )
    secrets: Optional[List[str]] = Field(
        None,
        description='Secrets is a list of Secrets in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The Secrets are mounted into /etc/alertmanager/secrets/<secret-name>.',
    )
    securityContext: Optional[SecurityContextModel1] = Field(
        None,
        description='SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.',
    )
    serviceAccountName: Optional[str] = Field(
        None,
        description='ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.',
    )
    sha: Optional[str] = Field(
        None,
        description="SHA of Alertmanager container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.",
    )
    storage: Optional[Storage] = Field(
        None,
        description='Storage is the definition of how storage will be used by the Alertmanager instances.',
    )
    tag: Optional[str] = Field(
        None,
        description="Tag of Alertmanager container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.",
    )
    tolerations: Optional[List[Toleration]] = Field(
        None, description="If specified, the pod's tolerations."
    )
    topologySpreadConstraints: Optional[List[TopologySpreadConstraint]] = Field(
        None, description="If specified, the pod's topology spread constraints."
    )
    version: Optional[str] = Field(
        None, description='Version the cluster should be on.'
    )
    volumeMounts: Optional[List[VolumeMountModel1]] = Field(
        None,
        description='VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container, that are generated as a result of StorageSpec objects.',
    )
    volumes: Optional[List[Volume]] = Field(
        None,
        description='Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.',
    )


class StatusModel(BaseModel):
    availableReplicas: int = Field(
        ...,
        description='Total number of available pods (ready for at least minReadySeconds) targeted by this Alertmanager cluster.',
    )
    paused: bool = Field(
        ...,
        description='Represents whether any actions on the underlying managed objects are being performed. Only delete actions will be performed.',
    )
    replicas: int = Field(
        ...,
        description='Total number of non-terminated pods targeted by this Alertmanager cluster (their labels match the selector).',
    )
    unavailableReplicas: int = Field(
        ...,
        description='Total number of unavailable pods targeted by this Alertmanager cluster.',
    )
    updatedReplicas: int = Field(
        ...,
        description='Total number of non-terminated pods targeted by this Alertmanager cluster that have the desired version spec.',
    )


class AttachMetadata(BaseModel):
    node: Optional[bool] = Field(
        None,
        description='When set to true, Prometheus must have permissions to get Nodes.',
    )


class NamespaceSelectorModel3(BaseModel):
    any: Optional[bool] = Field(
        None,
        description='Boolean describing whether all namespaces are selected in contrast to a list restricting them.',
    )
    matchNames: Optional[List[str]] = Field(
        None, description='List of namespace names to select from.'
    )


class Credentials(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Authorization(BaseModel):
    credentials: Optional[Credentials] = Field(
        None,
        description="The secret's key that contains the credentials of the request",
    )
    type: Optional[str] = Field(
        None,
        description='Set the authentication type. Defaults to Bearer, Basic will cause an error',
    )


class Password(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Username(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuth(BaseModel):
    password: Optional[Password] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[Username] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecret(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Action(Enum):
    replace = 'replace'
    keep = 'keep'
    drop = 'drop'
    hashmod = 'hashmod'
    labelmap = 'labelmap'
    labeldrop = 'labeldrop'
    labelkeep = 'labelkeep'


class MetricRelabeling(BaseModel):
    action: Optional[Action] = Field(
        None,
        description="Action to perform based on regex matching. Default is 'replace'",
    )
    modulus: Optional[int] = Field(
        None, description='Modulus to take of the hash of the source label values.'
    )
    regex: Optional[str] = Field(
        None,
        description="Regular expression against which the extracted value is matched. Default is '(.*)'",
    )
    replacement: Optional[str] = Field(
        None,
        description="Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
    )
    separator: Optional[str] = Field(
        None,
        description="Separator placed between concatenated source label values. default is ';'.",
    )
    sourceLabels: Optional[List[constr(regex=r'^[a-zA-Z_][a-zA-Z0-9_]*$')]] = Field(
        None,
        description='The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.',
    )
    targetLabel: Optional[str] = Field(
        None,
        description='Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.',
    )


class ConfigMapModel1(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ClientId(BaseModel):
    configMap: Optional[ConfigMapModel1] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel1] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ClientSecret(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Oauth2(BaseModel):
    clientId: ClientId = Field(
        ..., description='The secret or configmap containing the OAuth2 client id'
    )
    clientSecret: ClientSecret = Field(
        ..., description='The secret containing the OAuth2 client secret'
    )
    endpointParams: Optional[Dict[str, str]] = Field(
        None, description='Parameters to append to the token URL'
    )
    scopes: Optional[List[str]] = Field(
        None, description='OAuth2 scopes used for the token request'
    )
    tokenUrl: constr(min_length=1) = Field(
        ..., description='The URL to fetch the token from'
    )


class ActionModel(Enum):
    replace = 'replace'
    keep = 'keep'
    drop = 'drop'
    hashmod = 'hashmod'
    labelmap = 'labelmap'
    labeldrop = 'labeldrop'
    labelkeep = 'labelkeep'


class Relabeling(BaseModel):
    action: Optional[ActionModel] = Field(
        None,
        description="Action to perform based on regex matching. Default is 'replace'",
    )
    modulus: Optional[int] = Field(
        None, description='Modulus to take of the hash of the source label values.'
    )
    regex: Optional[str] = Field(
        None,
        description="Regular expression against which the extracted value is matched. Default is '(.*)'",
    )
    replacement: Optional[str] = Field(
        None,
        description="Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
    )
    separator: Optional[str] = Field(
        None,
        description="Separator placed between concatenated source label values. default is ';'.",
    )
    sourceLabels: Optional[List[constr(regex=r'^[a-zA-Z_][a-zA-Z0-9_]*$')]] = Field(
        None,
        description='The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.',
    )
    targetLabel: Optional[str] = Field(
        None,
        description='Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.',
    )


class ConfigMapModel2(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Ca(BaseModel):
    configMap: Optional[ConfigMapModel2] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel2] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel3(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Cert(BaseModel):
    configMap: Optional[ConfigMapModel3] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel3] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecret(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfig(BaseModel):
    ca: Optional[Ca] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[Cert] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecret] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class PodMetricsEndpoint(BaseModel):
    authorization: Optional[Authorization] = Field(
        None, description='Authorization section for this endpoint'
    )
    basicAuth: Optional[BasicAuth] = Field(
        None,
        description='BasicAuth allow an endpoint to authenticate over basic authentication. More info: https://prometheus.io/docs/operating/configuration/#endpoint',
    )
    bearerTokenSecret: Optional[BearerTokenSecret] = Field(
        None,
        description='Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the pod monitor and accessible by the Prometheus Operator.',
    )
    followRedirects: Optional[bool] = Field(
        None,
        description='FollowRedirects configures whether scrape requests follow HTTP 3xx redirects.',
    )
    honorLabels: Optional[bool] = Field(
        None,
        description="HonorLabels chooses the metric's labels on collisions with target labels.",
    )
    honorTimestamps: Optional[bool] = Field(
        None,
        description='HonorTimestamps controls whether Prometheus respects the timestamps present in scraped data.',
    )
    interval: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(
        None,
        description="Interval at which metrics should be scraped If not specified Prometheus' global scrape interval is used.",
    )
    metricRelabelings: Optional[List[MetricRelabeling]] = Field(
        None, description='MetricRelabelConfigs to apply to samples before ingestion.'
    )
    oauth2: Optional[Oauth2] = Field(
        None,
        description='OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    params: Optional[Dict[str, List[str]]] = Field(
        None, description='Optional HTTP URL parameters'
    )
    path: Optional[str] = Field(None, description='HTTP path to scrape for metrics.')
    port: Optional[str] = Field(
        None,
        description='Name of the pod port this endpoint refers to. Mutually exclusive with targetPort.',
    )
    proxyUrl: Optional[str] = Field(
        None,
        description='ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.',
    )
    relabelings: Optional[List[Relabeling]] = Field(
        None,
        description="RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few standard Kubernetes fields. The original scrape job's name is available via the `__tmp_prometheus_job_name` label. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
    )
    scheme: Optional[str] = Field(None, description='HTTP scheme to use for scraping.')
    scrapeTimeout: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(
        None,
        description='Timeout after which the scrape is ended If not specified, the Prometheus global scrape interval is used.',
    )
    targetPort: Optional[Any] = Field(
        None, description="Deprecated: Use 'port' instead."
    )
    tlsConfig: Optional[TlsConfig] = Field(
        None, description='TLS configuration to use when scraping the endpoint.'
    )


class MatchExpressionModel15(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class SelectorModel2(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel15]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class SpecModel3(BaseModel):
    attachMetadata: Optional[AttachMetadata] = Field(
        None,
        description='Attaches node metadata to discovered targets. Only valid for role: pod. Only valid in Prometheus versions 2.35.0 and newer.',
    )
    jobLabel: Optional[str] = Field(
        None, description='The label to use to retrieve the job name from.'
    )
    labelLimit: Optional[int] = Field(
        None,
        description='Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    labelNameLengthLimit: Optional[int] = Field(
        None,
        description='Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    labelValueLengthLimit: Optional[int] = Field(
        None,
        description='Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    namespaceSelector: Optional[NamespaceSelectorModel3] = Field(
        None,
        description='Selector to select which namespaces the Endpoints objects are discovered from.',
    )
    podMetricsEndpoints: List[PodMetricsEndpoint] = Field(
        ..., description='A list of endpoints allowed as part of this PodMonitor.'
    )
    podTargetLabels: Optional[List[str]] = Field(
        None,
        description='PodTargetLabels transfers labels on the Kubernetes Pod onto the target.',
    )
    sampleLimit: Optional[int] = Field(
        None,
        description='SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.',
    )
    selector: SelectorModel2 = Field(..., description='Selector to select Pod objects.')
    targetLimit: Optional[int] = Field(
        None,
        description='TargetLimit defines a limit on the number of scraped targets that will be accepted.',
    )


class CredentialsModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AuthorizationModel(BaseModel):
    credentials: Optional[CredentialsModel] = Field(
        None,
        description="The secret's key that contains the credentials of the request",
    )
    type: Optional[str] = Field(
        None,
        description='Set the authentication type. Defaults to Bearer, Basic will cause an error',
    )


class PasswordModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel(BaseModel):
    password: Optional[PasswordModel] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecretModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ActionModel1(Enum):
    replace = 'replace'
    keep = 'keep'
    drop = 'drop'
    hashmod = 'hashmod'
    labelmap = 'labelmap'
    labeldrop = 'labeldrop'
    labelkeep = 'labelkeep'


class MetricRelabelingModel(BaseModel):
    action: Optional[ActionModel1] = Field(
        None,
        description="Action to perform based on regex matching. Default is 'replace'",
    )
    modulus: Optional[int] = Field(
        None, description='Modulus to take of the hash of the source label values.'
    )
    regex: Optional[str] = Field(
        None,
        description="Regular expression against which the extracted value is matched. Default is '(.*)'",
    )
    replacement: Optional[str] = Field(
        None,
        description="Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
    )
    separator: Optional[str] = Field(
        None,
        description="Separator placed between concatenated source label values. default is ';'.",
    )
    sourceLabels: Optional[List[constr(regex=r'^[a-zA-Z_][a-zA-Z0-9_]*$')]] = Field(
        None,
        description='The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.',
    )
    targetLabel: Optional[str] = Field(
        None,
        description='Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.',
    )


class ConfigMapModel4(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ClientIdModel(BaseModel):
    configMap: Optional[ConfigMapModel4] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel4] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ClientSecretModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Oauth2Model(BaseModel):
    clientId: ClientIdModel = Field(
        ..., description='The secret or configmap containing the OAuth2 client id'
    )
    clientSecret: ClientSecretModel = Field(
        ..., description='The secret containing the OAuth2 client secret'
    )
    endpointParams: Optional[Dict[str, str]] = Field(
        None, description='Parameters to append to the token URL'
    )
    scopes: Optional[List[str]] = Field(
        None, description='OAuth2 scopes used for the token request'
    )
    tokenUrl: constr(min_length=1) = Field(
        ..., description='The URL to fetch the token from'
    )


class Prober(BaseModel):
    path: Optional[str] = Field(
        None, description='Path to collect metrics from. Defaults to `/probe`.'
    )
    proxyUrl: Optional[str] = Field(None, description='Optional ProxyURL.')
    scheme: Optional[str] = Field(
        None, description='HTTP scheme to use for scraping. Defaults to `http`.'
    )
    url: str = Field(..., description='Mandatory URL of the prober.')


class NamespaceSelectorModel4(BaseModel):
    any: Optional[bool] = Field(
        None,
        description='Boolean describing whether all namespaces are selected in contrast to a list restricting them.',
    )
    matchNames: Optional[List[str]] = Field(
        None, description='List of namespace names to select from.'
    )


class ActionModel2(Enum):
    replace = 'replace'
    keep = 'keep'
    drop = 'drop'
    hashmod = 'hashmod'
    labelmap = 'labelmap'
    labeldrop = 'labeldrop'
    labelkeep = 'labelkeep'


class RelabelingConfig(BaseModel):
    action: Optional[ActionModel2] = Field(
        None,
        description="Action to perform based on regex matching. Default is 'replace'",
    )
    modulus: Optional[int] = Field(
        None, description='Modulus to take of the hash of the source label values.'
    )
    regex: Optional[str] = Field(
        None,
        description="Regular expression against which the extracted value is matched. Default is '(.*)'",
    )
    replacement: Optional[str] = Field(
        None,
        description="Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
    )
    separator: Optional[str] = Field(
        None,
        description="Separator placed between concatenated source label values. default is ';'.",
    )
    sourceLabels: Optional[List[constr(regex=r'^[a-zA-Z_][a-zA-Z0-9_]*$')]] = Field(
        None,
        description='The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.',
    )
    targetLabel: Optional[str] = Field(
        None,
        description='Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.',
    )


class MatchExpressionModel16(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class SelectorModel3(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel16]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class Ingress(BaseModel):
    namespaceSelector: Optional[NamespaceSelectorModel4] = Field(
        None, description='From which namespaces to select Ingress objects.'
    )
    relabelingConfigs: Optional[List[RelabelingConfig]] = Field(
        None,
        description="RelabelConfigs to apply to the label set of the target before it gets scraped. The original ingress address is available via the `__tmp_prometheus_ingress_address` label. It can be used to customize the probed URL. The original scrape job's name is available via the `__tmp_prometheus_job_name` label. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
    )
    selector: Optional[SelectorModel3] = Field(
        None, description='Selector to select the Ingress objects.'
    )


class ActionModel3(Enum):
    replace = 'replace'
    keep = 'keep'
    drop = 'drop'
    hashmod = 'hashmod'
    labelmap = 'labelmap'
    labeldrop = 'labeldrop'
    labelkeep = 'labelkeep'


class RelabelingConfigModel(BaseModel):
    action: Optional[ActionModel3] = Field(
        None,
        description="Action to perform based on regex matching. Default is 'replace'",
    )
    modulus: Optional[int] = Field(
        None, description='Modulus to take of the hash of the source label values.'
    )
    regex: Optional[str] = Field(
        None,
        description="Regular expression against which the extracted value is matched. Default is '(.*)'",
    )
    replacement: Optional[str] = Field(
        None,
        description="Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
    )
    separator: Optional[str] = Field(
        None,
        description="Separator placed between concatenated source label values. default is ';'.",
    )
    sourceLabels: Optional[List[constr(regex=r'^[a-zA-Z_][a-zA-Z0-9_]*$')]] = Field(
        None,
        description='The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.',
    )
    targetLabel: Optional[str] = Field(
        None,
        description='Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.',
    )


class StaticConfig(BaseModel):
    labels: Optional[Dict[str, str]] = Field(
        None, description='Labels assigned to all metrics scraped from the targets.'
    )
    relabelingConfigs: Optional[List[RelabelingConfigModel]] = Field(
        None,
        description='RelabelConfigs to apply to the label set of the targets before it gets scraped. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config',
    )
    static: Optional[List[str]] = Field(None, description='The list of hosts to probe.')


class Targets(BaseModel):
    ingress: Optional[Ingress] = Field(
        None,
        description='ingress defines the Ingress objects to probe and the relabeling configuration. If `staticConfig` is also defined, `staticConfig` takes precedence.',
    )
    staticConfig: Optional[StaticConfig] = Field(
        None,
        description='staticConfig defines the static list of targets to probe and the relabeling configuration. If `ingress` is also defined, `staticConfig` takes precedence. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#static_config.',
    )


class ConfigMapModel5(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel5(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel(BaseModel):
    configMap: Optional[ConfigMapModel5] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel5] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel6(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel6(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel(BaseModel):
    configMap: Optional[ConfigMapModel6] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel6] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel(BaseModel):
    ca: Optional[CaModel] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    cert: Optional[CertModel] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keySecret: Optional[KeySecretModel] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class SpecModel4(BaseModel):
    authorization: Optional[AuthorizationModel] = Field(
        None, description='Authorization section for this endpoint'
    )
    basicAuth: Optional[BasicAuthModel] = Field(
        None,
        description='BasicAuth allow an endpoint to authenticate over basic authentication. More info: https://prometheus.io/docs/operating/configuration/#endpoint',
    )
    bearerTokenSecret: Optional[BearerTokenSecretModel] = Field(
        None,
        description='Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the probe and accessible by the Prometheus Operator.',
    )
    interval: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(
        None,
        description="Interval at which targets are probed using the configured prober. If not specified Prometheus' global scrape interval is used.",
    )
    jobName: Optional[str] = Field(
        None, description='The job name assigned to scraped metrics by default.'
    )
    labelLimit: Optional[int] = Field(
        None,
        description='Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    labelNameLengthLimit: Optional[int] = Field(
        None,
        description='Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    labelValueLengthLimit: Optional[int] = Field(
        None,
        description='Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    metricRelabelings: Optional[List[MetricRelabelingModel]] = Field(
        None, description='MetricRelabelConfigs to apply to samples before ingestion.'
    )
    module: Optional[str] = Field(
        None,
        description='The module to use for probing specifying how to probe the target. Example module configuring in the blackbox exporter: https://github.com/prometheus/blackbox_exporter/blob/master/example.yml',
    )
    oauth2: Optional[Oauth2Model] = Field(
        None,
        description='OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    prober: Optional[Prober] = Field(
        None,
        description='Specification for the prober to use for probing targets. The prober.URL parameter is required. Targets cannot be probed if left empty.',
    )
    sampleLimit: Optional[int] = Field(
        None,
        description='SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.',
    )
    scrapeTimeout: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(
        None,
        description='Timeout for scraping metrics from the Prometheus exporter. If not specified, the Prometheus global scrape interval is used.',
    )
    targetLimit: Optional[int] = Field(
        None,
        description='TargetLimit defines a limit on the number of scraped targets that will be accepted.',
    )
    targets: Optional[Targets] = Field(
        None,
        description='Targets defines a set of static or dynamically discovered targets to probe.',
    )
    tlsConfig: Optional[TlsConfigModel] = Field(
        None, description='TLS configuration to use when scraping the endpoint.'
    )


class AdditionalAlertManagerConfigs(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AdditionalAlertRelabelConfigs(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AdditionalScrapeConfigs(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class MatchExpressionModel17(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class MatchFieldModel1(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class PreferenceModel(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel17]] = Field(
        None, description="A list of node selector requirements by node's labels."
    )
    matchFields: Optional[List[MatchFieldModel1]] = Field(
        None, description="A list of node selector requirements by node's fields."
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItemModel2(BaseModel):
    preference: PreferenceModel = Field(
        ...,
        description='A node selector term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.',
    )


class MatchExpressionModel18(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class MatchFieldModel2(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class NodeSelectorTermModel(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel18]] = Field(
        None, description="A list of node selector requirements by node's labels."
    )
    matchFields: Optional[List[MatchFieldModel2]] = Field(
        None, description="A list of node selector requirements by node's fields."
    )


class RequiredDuringSchedulingIgnoredDuringExecutionModel(BaseModel):
    nodeSelectorTerms: List[NodeSelectorTermModel] = Field(
        ..., description='Required. A list of node selector terms. The terms are ORed.'
    )


class NodeAffinityModel(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItemModel2]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        RequiredDuringSchedulingIgnoredDuringExecutionModel
    ] = Field(
        None,
        description='If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.',
    )


class MatchExpressionModel19(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel4(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel19]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel20(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel5(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel20]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class PodAffinityTermModel1(BaseModel):
    labelSelector: Optional[LabelSelectorModel4] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel5] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace"',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItemModel3(BaseModel):
    podAffinityTerm: PodAffinityTermModel1 = Field(
        ...,
        description='Required. A pod affinity term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
    )


class MatchExpressionModel21(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel5(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel21]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel22(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel6(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel22]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class RequiredDuringSchedulingIgnoredDuringExecutionItemModel1(BaseModel):
    labelSelector: Optional[LabelSelectorModel5] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel6] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace"',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PodAffinityModel(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItemModel3]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        List[RequiredDuringSchedulingIgnoredDuringExecutionItemModel1]
    ] = Field(
        None,
        description='If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
    )


class MatchExpressionModel23(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel6(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel23]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel24(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel7(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel24]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class PodAffinityTermModel2(BaseModel):
    labelSelector: Optional[LabelSelectorModel6] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel7] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace"',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItemModel4(BaseModel):
    podAffinityTerm: PodAffinityTermModel2 = Field(
        ...,
        description='Required. A pod affinity term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
    )


class MatchExpressionModel25(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel7(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel25]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel26(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel8(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel26]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class RequiredDuringSchedulingIgnoredDuringExecutionItemModel2(BaseModel):
    labelSelector: Optional[LabelSelectorModel7] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel8] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace"',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PodAntiAffinityModel(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItemModel4]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        List[RequiredDuringSchedulingIgnoredDuringExecutionItemModel2]
    ] = Field(
        None,
        description='If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
    )


class AffinityModel(BaseModel):
    nodeAffinity: Optional[NodeAffinityModel] = Field(
        None, description='Describes node affinity scheduling rules for the pod.'
    )
    podAffinity: Optional[PodAffinityModel] = Field(
        None,
        description='Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).',
    )
    podAntiAffinity: Optional[PodAntiAffinityModel] = Field(
        None,
        description='Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).',
    )


class CredentialsModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AuthorizationModel1(BaseModel):
    credentials: Optional[CredentialsModel1] = Field(
        None,
        description="The secret's key that contains the credentials of the request",
    )
    type: Optional[str] = Field(
        None,
        description='Set the authentication type. Defaults to Bearer, Basic will cause an error',
    )


class ConfigMapModel7(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel7(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel1(BaseModel):
    configMap: Optional[ConfigMapModel7] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel7] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel8(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel8(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel1(BaseModel):
    configMap: Optional[ConfigMapModel8] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel8] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel1(BaseModel):
    ca: Optional[CaModel1] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    caFile: Optional[str] = Field(
        None,
        description='Path to the CA cert in the Prometheus container to use for the targets.',
    )
    cert: Optional[CertModel1] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    certFile: Optional[str] = Field(
        None,
        description='Path to the client cert file in the Prometheus container for the targets.',
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keyFile: Optional[str] = Field(
        None,
        description='Path to the client key file in the Prometheus container for the targets.',
    )
    keySecret: Optional[KeySecretModel1] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class Alertmanager(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the Alertmanager API that Prometheus uses to send alerts. It can be "v1" or "v2".',
    )
    authorization: Optional[AuthorizationModel1] = Field(
        None, description='Authorization section for this alertmanager endpoint'
    )
    bearerTokenFile: Optional[str] = Field(
        None,
        description='BearerTokenFile to read from filesystem to use when authenticating to Alertmanager.',
    )
    name: str = Field(..., description='Name of Endpoints object in Namespace.')
    namespace: str = Field(..., description='Namespace of Endpoints object.')
    pathPrefix: Optional[str] = Field(
        None, description='Prefix for the HTTP path alerts are pushed to.'
    )
    port: Any = Field(..., description='Port the Alertmanager API is exposed on.')
    scheme: Optional[str] = Field(None, description='Scheme to use when firing alerts.')
    timeout: Optional[str] = Field(
        None,
        description='Timeout is a per-target Alertmanager timeout when pushing alerts.',
    )
    tlsConfig: Optional[TlsConfigModel1] = Field(
        None, description='TLS Config to use for alertmanager connection.'
    )


class Alerting(BaseModel):
    alertmanagers: List[Alertmanager] = Field(
        ..., description='AlertmanagerEndpoints Prometheus should fire alerts against.'
    )


class CredentialsModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AuthorizationModel2(BaseModel):
    credentials: Optional[CredentialsModel2] = Field(
        None,
        description="The secret's key that contains the credentials of the request",
    )
    credentialsFile: Optional[str] = Field(
        None,
        description='File to read a secret from, mutually exclusive with Credentials (from SafeAuthorization)',
    )
    type: Optional[str] = Field(
        None,
        description='Set the authentication type. Defaults to Bearer, Basic will cause an error',
    )


class PasswordModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel1(BaseModel):
    password: Optional[PasswordModel1] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel1] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class ConfigMapModel9(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel9(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel2(BaseModel):
    configMap: Optional[ConfigMapModel9] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel9] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel10(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel10(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel2(BaseModel):
    configMap: Optional[ConfigMapModel10] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel10] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel2(BaseModel):
    ca: Optional[CaModel2] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    caFile: Optional[str] = Field(
        None,
        description='Path to the CA cert in the Prometheus container to use for the targets.',
    )
    cert: Optional[CertModel2] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    certFile: Optional[str] = Field(
        None,
        description='Path to the client cert file in the Prometheus container for the targets.',
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keyFile: Optional[str] = Field(
        None,
        description='Path to the client key file in the Prometheus container for the targets.',
    )
    keySecret: Optional[KeySecretModel2] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class ApiserverConfig(BaseModel):
    authorization: Optional[AuthorizationModel2] = Field(
        None, description='Authorization section for accessing apiserver'
    )
    basicAuth: Optional[BasicAuthModel1] = Field(
        None,
        description='BasicAuth allow an endpoint to authenticate over basic authentication',
    )
    bearerToken: Optional[str] = Field(
        None, description='Bearer token for accessing apiserver.'
    )
    bearerTokenFile: Optional[str] = Field(
        None, description='File to read bearer token for accessing apiserver.'
    )
    host: str = Field(
        ...,
        description='Host of apiserver. A valid string consisting of a hostname or IP followed by an optional port number',
    )
    tlsConfig: Optional[TlsConfigModel2] = Field(
        None, description='TLS Config to use for accessing apiserver.'
    )


class ArbitraryFSAccessThroughSMs(BaseModel):
    deny: Optional[bool] = None


class ConfigMapKeyRefModel1(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class FieldRefModel3(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel3(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class SecretKeyRefModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ValueFromModel1(BaseModel):
    configMapKeyRef: Optional[ConfigMapKeyRefModel1] = Field(
        None, description='Selects a key of a ConfigMap.'
    )
    fieldRef: Optional[FieldRefModel3] = Field(
        None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel3] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.',
    )
    secretKeyRef: Optional[SecretKeyRefModel1] = Field(
        None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItemModel1(BaseModel):
    name: str = Field(
        ..., description='Name of the environment variable. Must be a C_IDENTIFIER.'
    )
    value: Optional[str] = Field(
        None,
        description='Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
    )
    valueFrom: Optional[ValueFromModel1] = Field(
        None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class ConfigMapRefModel1(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap must be defined'
    )


class SecretRefModel8(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret must be defined'
    )


class EnvFromItemModel1(BaseModel):
    configMapRef: Optional[ConfigMapRefModel1] = Field(
        None, description='The ConfigMap to select from'
    )
    prefix: Optional[str] = Field(
        None,
        description='An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
    )
    secretRef: Optional[SecretRefModel8] = Field(
        None, description='The Secret to select from'
    )


class ExecModel9(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel9(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel9(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel9]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel9(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PostStartModel1(BaseModel):
    exec: Optional[ExecModel9] = Field(
        None, description='Exec specifies the action to take.'
    )
    httpGet: Optional[HttpGetModel9] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel9] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class ExecModel10(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel10(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel10(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel10]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel10(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PreStopModel1(BaseModel):
    exec: Optional[ExecModel10] = Field(
        None, description='Exec specifies the action to take.'
    )
    httpGet: Optional[HttpGetModel10] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel10] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class LifecycleModel1(BaseModel):
    postStart: Optional[PostStartModel1] = Field(
        None,
        description='PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks',
    )
    preStop: Optional[PreStopModel1] = Field(
        None,
        description="PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    )


class ExecModel11(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel5(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel11(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel11(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel11]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel11(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class LivenessProbeModel1(BaseModel):
    exec: Optional[ExecModel11] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel5] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel11] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel11] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class PortModel1(BaseModel):
    containerPort: int = Field(
        ...,
        description="Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
    )
    hostIP: Optional[str] = Field(
        None, description='What host IP to bind the external port to.'
    )
    hostPort: Optional[int] = Field(
        None,
        description='Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
    )
    name: Optional[str] = Field(
        None,
        description='If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
    )
    protocol: Optional[str] = Field(
        None,
        description='Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".',
    )


class ExecModel12(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel6(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel12(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel12(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel12]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel12(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class ReadinessProbeModel1(BaseModel):
    exec: Optional[ExecModel12] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel6] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel12] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel12] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class ResourcesModel5(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class CapabilitiesModel1(BaseModel):
    add: Optional[List[str]] = Field(None, description='Added capabilities')
    drop: Optional[List[str]] = Field(None, description='Removed capabilities')


class SeLinuxOptionsModel2(BaseModel):
    level: Optional[str] = Field(
        None, description='Level is SELinux level label that applies to the container.'
    )
    role: Optional[str] = Field(
        None, description='Role is a SELinux role label that applies to the container.'
    )
    type: Optional[str] = Field(
        None, description='Type is a SELinux type label that applies to the container.'
    )
    user: Optional[str] = Field(
        None, description='User is a SELinux user label that applies to the container.'
    )


class SeccompProfileModel2(BaseModel):
    localhostProfile: Optional[str] = Field(
        None,
        description='localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet\'s configured seccomp profile location. Must only be set if type is "Localhost".',
    )
    type: str = Field(
        ...,
        description='type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.',
    )


class WindowsOptionsModel2(BaseModel):
    gmsaCredentialSpec: Optional[str] = Field(
        None,
        description='GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
    )
    gmsaCredentialSpecName: Optional[str] = Field(
        None,
        description='GMSACredentialSpecName is the name of the GMSA credential spec to use.',
    )
    hostProcess: Optional[bool] = Field(
        None,
        description="HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
    )
    runAsUserName: Optional[str] = Field(
        None,
        description='The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )


class SecurityContextModel2(BaseModel):
    allowPrivilegeEscalation: Optional[bool] = Field(
        None,
        description='AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.',
    )
    capabilities: Optional[CapabilitiesModel1] = Field(
        None,
        description='The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.',
    )
    privileged: Optional[bool] = Field(
        None,
        description='Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.',
    )
    procMount: Optional[str] = Field(
        None,
        description='procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.',
    )
    readOnlyRootFilesystem: Optional[bool] = Field(
        None,
        description='Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsGroup: Optional[int] = Field(
        None,
        description='The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsNonRoot: Optional[bool] = Field(
        None,
        description='Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    runAsUser: Optional[int] = Field(
        None,
        description='The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seLinuxOptions: Optional[SeLinuxOptionsModel2] = Field(
        None,
        description='The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seccompProfile: Optional[SeccompProfileModel2] = Field(
        None,
        description='The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.',
    )
    windowsOptions: Optional[WindowsOptionsModel2] = Field(
        None,
        description='The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.',
    )


class ExecModel13(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel7(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel13(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel13(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel13]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel13(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class StartupProbeModel1(BaseModel):
    exec: Optional[ExecModel13] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel7] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel13] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel13] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class VolumeDeviceModel1(BaseModel):
    devicePath: str = Field(
        ...,
        description='devicePath is the path inside of the container that the device will be mapped to.',
    )
    name: str = Field(
        ...,
        description='name must match the name of a persistentVolumeClaim in the pod',
    )


class VolumeMountModel2(BaseModel):
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted.  Must not contain ':'.",
    )
    mountPropagation: Optional[str] = Field(
        None,
        description='mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
    )
    name: str = Field(..., description='This must match the Name of a Volume.')
    readOnly: Optional[bool] = Field(
        None,
        description='Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
    )
    subPath: Optional[str] = Field(
        None,
        description='Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
    )
    subPathExpr: Optional[str] = Field(
        None,
        description='Expanded path within the volume from which the container\'s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container\'s environment. Defaults to "" (volume\'s root). SubPathExpr and SubPath are mutually exclusive.',
    )


class ContainerModel(BaseModel):
    args: Optional[List[str]] = Field(
        None,
        description='Arguments to the entrypoint. The docker image\'s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    command: Optional[List[str]] = Field(
        None,
        description='Entrypoint array. Not executed within a shell. The docker image\'s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    env: Optional[List[EnvItemModel1]] = Field(
        None,
        description='List of environment variables to set in the container. Cannot be updated.',
    )
    envFrom: Optional[List[EnvFromItemModel1]] = Field(
        None,
        description='List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
    )
    image: Optional[str] = Field(
        None,
        description='Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
    )
    imagePullPolicy: Optional[str] = Field(
        None,
        description='Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
    )
    lifecycle: Optional[LifecycleModel1] = Field(
        None,
        description='Actions that the management system should take in response to container lifecycle events. Cannot be updated.',
    )
    livenessProbe: Optional[LivenessProbeModel1] = Field(
        None,
        description='Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    name: str = Field(
        ...,
        description='Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
    )
    ports: Optional[List[PortModel1]] = Field(
        None,
        description='List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
    )
    readinessProbe: Optional[ReadinessProbeModel1] = Field(
        None,
        description='Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    resources: Optional[ResourcesModel5] = Field(
        None,
        description='Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    securityContext: Optional[SecurityContextModel2] = Field(
        None,
        description='SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/',
    )
    startupProbe: Optional[StartupProbeModel1] = Field(
        None,
        description="StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    stdin: Optional[bool] = Field(
        None,
        description='Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
    )
    stdinOnce: Optional[bool] = Field(
        None,
        description='Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
    )
    terminationMessagePath: Optional[str] = Field(
        None,
        description="Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
    )
    terminationMessagePolicy: Optional[str] = Field(
        None,
        description='Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
    )
    tty: Optional[bool] = Field(
        None,
        description="Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
    )
    volumeDevices: Optional[List[VolumeDeviceModel1]] = Field(
        None,
        description='volumeDevices is the list of block devices to be used by the container.',
    )
    volumeMounts: Optional[List[VolumeMountModel2]] = Field(
        None,
        description="Pod volumes to mount into the container's filesystem. Cannot be updated.",
    )
    workingDir: Optional[str] = Field(
        None,
        description="Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
    )


class Group(Enum):
    monitoring_coreos_com = 'monitoring.coreos.com'


class Resource(Enum):
    prometheusrules = 'prometheusrules'
    servicemonitors = 'servicemonitors'
    podmonitors = 'podmonitors'
    probes = 'probes'


class ExcludedFromEnforcementItem(BaseModel):
    group: Optional[Group] = Field(
        None,
        description='Group of the referent. When not specified, it defaults to `monitoring.coreos.com`',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. When not set, all resources are matched.',
    )
    namespace: constr(min_length=1) = Field(
        ...,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )
    resource: Resource = Field(..., description='Resource of the referent.')


class HostAliaseModel(BaseModel):
    hostnames: List[str] = Field(..., description='Hostnames for the above IP address.')
    ip: str = Field(..., description='IP address of the host file entry.')


class ImagePullSecretModel(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class ConfigMapKeyRefModel2(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class FieldRefModel4(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel4(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class SecretKeyRefModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ValueFromModel2(BaseModel):
    configMapKeyRef: Optional[ConfigMapKeyRefModel2] = Field(
        None, description='Selects a key of a ConfigMap.'
    )
    fieldRef: Optional[FieldRefModel4] = Field(
        None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel4] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.',
    )
    secretKeyRef: Optional[SecretKeyRefModel2] = Field(
        None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItemModel2(BaseModel):
    name: str = Field(
        ..., description='Name of the environment variable. Must be a C_IDENTIFIER.'
    )
    value: Optional[str] = Field(
        None,
        description='Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
    )
    valueFrom: Optional[ValueFromModel2] = Field(
        None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class ConfigMapRefModel2(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap must be defined'
    )


class SecretRefModel9(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret must be defined'
    )


class EnvFromItemModel2(BaseModel):
    configMapRef: Optional[ConfigMapRefModel2] = Field(
        None, description='The ConfigMap to select from'
    )
    prefix: Optional[str] = Field(
        None,
        description='An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
    )
    secretRef: Optional[SecretRefModel9] = Field(
        None, description='The Secret to select from'
    )


class ExecModel14(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel14(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel14(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel14]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel14(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PostStartModel2(BaseModel):
    exec: Optional[ExecModel14] = Field(
        None, description='Exec specifies the action to take.'
    )
    httpGet: Optional[HttpGetModel14] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel14] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class ExecModel15(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel15(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel15(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel15]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel15(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PreStopModel2(BaseModel):
    exec: Optional[ExecModel15] = Field(
        None, description='Exec specifies the action to take.'
    )
    httpGet: Optional[HttpGetModel15] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel15] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class LifecycleModel2(BaseModel):
    postStart: Optional[PostStartModel2] = Field(
        None,
        description='PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks',
    )
    preStop: Optional[PreStopModel2] = Field(
        None,
        description="PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    )


class ExecModel16(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel8(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel16(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel16(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel16]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel16(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class LivenessProbeModel2(BaseModel):
    exec: Optional[ExecModel16] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel8] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel16] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel16] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class PortModel2(BaseModel):
    containerPort: int = Field(
        ...,
        description="Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
    )
    hostIP: Optional[str] = Field(
        None, description='What host IP to bind the external port to.'
    )
    hostPort: Optional[int] = Field(
        None,
        description='Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
    )
    name: Optional[str] = Field(
        None,
        description='If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
    )
    protocol: Optional[str] = Field(
        None,
        description='Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".',
    )


class ExecModel17(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel9(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel17(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel17(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel17]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel17(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class ReadinessProbeModel2(BaseModel):
    exec: Optional[ExecModel17] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel9] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel17] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel17] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class ResourcesModel6(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class CapabilitiesModel2(BaseModel):
    add: Optional[List[str]] = Field(None, description='Added capabilities')
    drop: Optional[List[str]] = Field(None, description='Removed capabilities')


class SeLinuxOptionsModel3(BaseModel):
    level: Optional[str] = Field(
        None, description='Level is SELinux level label that applies to the container.'
    )
    role: Optional[str] = Field(
        None, description='Role is a SELinux role label that applies to the container.'
    )
    type: Optional[str] = Field(
        None, description='Type is a SELinux type label that applies to the container.'
    )
    user: Optional[str] = Field(
        None, description='User is a SELinux user label that applies to the container.'
    )


class SeccompProfileModel3(BaseModel):
    localhostProfile: Optional[str] = Field(
        None,
        description='localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet\'s configured seccomp profile location. Must only be set if type is "Localhost".',
    )
    type: str = Field(
        ...,
        description='type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.',
    )


class WindowsOptionsModel3(BaseModel):
    gmsaCredentialSpec: Optional[str] = Field(
        None,
        description='GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
    )
    gmsaCredentialSpecName: Optional[str] = Field(
        None,
        description='GMSACredentialSpecName is the name of the GMSA credential spec to use.',
    )
    hostProcess: Optional[bool] = Field(
        None,
        description="HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
    )
    runAsUserName: Optional[str] = Field(
        None,
        description='The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )


class SecurityContextModel3(BaseModel):
    allowPrivilegeEscalation: Optional[bool] = Field(
        None,
        description='AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.',
    )
    capabilities: Optional[CapabilitiesModel2] = Field(
        None,
        description='The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.',
    )
    privileged: Optional[bool] = Field(
        None,
        description='Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.',
    )
    procMount: Optional[str] = Field(
        None,
        description='procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.',
    )
    readOnlyRootFilesystem: Optional[bool] = Field(
        None,
        description='Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsGroup: Optional[int] = Field(
        None,
        description='The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsNonRoot: Optional[bool] = Field(
        None,
        description='Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    runAsUser: Optional[int] = Field(
        None,
        description='The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seLinuxOptions: Optional[SeLinuxOptionsModel3] = Field(
        None,
        description='The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seccompProfile: Optional[SeccompProfileModel3] = Field(
        None,
        description='The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.',
    )
    windowsOptions: Optional[WindowsOptionsModel3] = Field(
        None,
        description='The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.',
    )


class ExecModel18(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel10(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel18(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel18(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel18]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel18(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class StartupProbeModel2(BaseModel):
    exec: Optional[ExecModel18] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel10] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel18] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel18] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class VolumeDeviceModel2(BaseModel):
    devicePath: str = Field(
        ...,
        description='devicePath is the path inside of the container that the device will be mapped to.',
    )
    name: str = Field(
        ...,
        description='name must match the name of a persistentVolumeClaim in the pod',
    )


class VolumeMountModel3(BaseModel):
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted.  Must not contain ':'.",
    )
    mountPropagation: Optional[str] = Field(
        None,
        description='mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
    )
    name: str = Field(..., description='This must match the Name of a Volume.')
    readOnly: Optional[bool] = Field(
        None,
        description='Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
    )
    subPath: Optional[str] = Field(
        None,
        description='Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
    )
    subPathExpr: Optional[str] = Field(
        None,
        description='Expanded path within the volume from which the container\'s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container\'s environment. Defaults to "" (volume\'s root). SubPathExpr and SubPath are mutually exclusive.',
    )


class InitContainerModel(BaseModel):
    args: Optional[List[str]] = Field(
        None,
        description='Arguments to the entrypoint. The docker image\'s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    command: Optional[List[str]] = Field(
        None,
        description='Entrypoint array. Not executed within a shell. The docker image\'s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    env: Optional[List[EnvItemModel2]] = Field(
        None,
        description='List of environment variables to set in the container. Cannot be updated.',
    )
    envFrom: Optional[List[EnvFromItemModel2]] = Field(
        None,
        description='List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
    )
    image: Optional[str] = Field(
        None,
        description='Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
    )
    imagePullPolicy: Optional[str] = Field(
        None,
        description='Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
    )
    lifecycle: Optional[LifecycleModel2] = Field(
        None,
        description='Actions that the management system should take in response to container lifecycle events. Cannot be updated.',
    )
    livenessProbe: Optional[LivenessProbeModel2] = Field(
        None,
        description='Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    name: str = Field(
        ...,
        description='Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
    )
    ports: Optional[List[PortModel2]] = Field(
        None,
        description='List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
    )
    readinessProbe: Optional[ReadinessProbeModel2] = Field(
        None,
        description='Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    resources: Optional[ResourcesModel6] = Field(
        None,
        description='Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    securityContext: Optional[SecurityContextModel3] = Field(
        None,
        description='SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/',
    )
    startupProbe: Optional[StartupProbeModel2] = Field(
        None,
        description="StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    stdin: Optional[bool] = Field(
        None,
        description='Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
    )
    stdinOnce: Optional[bool] = Field(
        None,
        description='Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
    )
    terminationMessagePath: Optional[str] = Field(
        None,
        description="Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
    )
    terminationMessagePolicy: Optional[str] = Field(
        None,
        description='Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
    )
    tty: Optional[bool] = Field(
        None,
        description="Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
    )
    volumeDevices: Optional[List[VolumeDeviceModel2]] = Field(
        None,
        description='volumeDevices is the list of block devices to be used by the container.',
    )
    volumeMounts: Optional[List[VolumeMountModel3]] = Field(
        None,
        description="Pod volumes to mount into the container's filesystem. Cannot be updated.",
    )
    workingDir: Optional[str] = Field(
        None,
        description="Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
    )


class LogFormatModel(Enum):
    _ = ''
    logfmt = 'logfmt'
    json = 'json'


class LogLevelModel(Enum):
    _ = ''
    debug = 'debug'
    info = 'info'
    warn = 'warn'
    error = 'error'


class PodMetadataModel(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description='Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
    )
    name: Optional[str] = Field(
        None,
        description='Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
    )


class MatchExpressionModel27(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class PodMonitorNamespaceSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel27]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel28(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class PodMonitorSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel28]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel29(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class ProbeNamespaceSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel29]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel30(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class ProbeSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel30]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class PrometheusRulesExcludedFromEnforceItem(BaseModel):
    ruleName: str = Field(..., description='RuleNamespace - name of excluded rule')
    ruleNamespace: str = Field(
        ..., description='RuleNamespace - namespace of excluded rule'
    )


class Query(BaseModel):
    lookbackDelta: Optional[str] = Field(
        None,
        description='The delta difference allowed for retrieving metrics during expression evaluations.',
    )
    maxConcurrency: Optional[int] = Field(
        None, description='Number of concurrent queries that can be run at once.'
    )
    maxSamples: Optional[int] = Field(
        None,
        description='Maximum number of samples a single query can load into memory. Note that queries will fail if they would load more samples than this into memory, so this also limits the number of samples a query can return.',
    )
    timeout: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(None, description='Maximum time a query may take before being aborted.')


class CredentialsModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AuthorizationModel3(BaseModel):
    credentials: Optional[CredentialsModel3] = Field(
        None,
        description="The secret's key that contains the credentials of the request",
    )
    credentialsFile: Optional[str] = Field(
        None,
        description='File to read a secret from, mutually exclusive with Credentials (from SafeAuthorization)',
    )
    type: Optional[str] = Field(
        None,
        description='Set the authentication type. Defaults to Bearer, Basic will cause an error',
    )


class PasswordModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel2(BaseModel):
    password: Optional[PasswordModel2] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel2] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class ConfigMapModel11(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel11(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ClientIdModel1(BaseModel):
    configMap: Optional[ConfigMapModel11] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel11] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ClientSecretModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Oauth2Model1(BaseModel):
    clientId: ClientIdModel1 = Field(
        ..., description='The secret or configmap containing the OAuth2 client id'
    )
    clientSecret: ClientSecretModel1 = Field(
        ..., description='The secret containing the OAuth2 client secret'
    )
    endpointParams: Optional[Dict[str, str]] = Field(
        None, description='Parameters to append to the token URL'
    )
    scopes: Optional[List[str]] = Field(
        None, description='OAuth2 scopes used for the token request'
    )
    tokenUrl: constr(min_length=1) = Field(
        ..., description='The URL to fetch the token from'
    )


class ConfigMapModel12(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel12(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel3(BaseModel):
    configMap: Optional[ConfigMapModel12] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel12] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel13(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel13(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel3(BaseModel):
    configMap: Optional[ConfigMapModel13] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel13] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel3(BaseModel):
    ca: Optional[CaModel3] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    caFile: Optional[str] = Field(
        None,
        description='Path to the CA cert in the Prometheus container to use for the targets.',
    )
    cert: Optional[CertModel3] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    certFile: Optional[str] = Field(
        None,
        description='Path to the client cert file in the Prometheus container for the targets.',
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keyFile: Optional[str] = Field(
        None,
        description='Path to the client key file in the Prometheus container for the targets.',
    )
    keySecret: Optional[KeySecretModel3] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class RemoteReadItem(BaseModel):
    authorization: Optional[AuthorizationModel3] = Field(
        None, description='Authorization section for remote read'
    )
    basicAuth: Optional[BasicAuthModel2] = Field(
        None, description='BasicAuth for the URL.'
    )
    bearerToken: Optional[str] = Field(
        None, description='Bearer token for remote read.'
    )
    bearerTokenFile: Optional[str] = Field(
        None, description='File to read bearer token for remote read.'
    )
    headers: Optional[Dict[str, str]] = Field(
        None,
        description="Custom HTTP headers to be sent along with each remote read request. Be aware that headers that are set by Prometheus itself can't be overwritten. Only valid in Prometheus versions 2.26.0 and newer.",
    )
    name: Optional[str] = Field(
        None,
        description='The name of the remote read queue, it must be unique if specified. The name is used in metrics and logging in order to differentiate read configurations.  Only valid in Prometheus versions 2.15.0 and newer.',
    )
    oauth2: Optional[Oauth2Model1] = Field(
        None,
        description='OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    proxyUrl: Optional[str] = Field(None, description='Optional ProxyURL.')
    readRecent: Optional[bool] = Field(
        None,
        description='Whether reads should be made for queries for time ranges that the local storage should have complete data for.',
    )
    remoteTimeout: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(None, description='Timeout for requests to the remote read endpoint.')
    requiredMatchers: Optional[Dict[str, str]] = Field(
        None,
        description='An optional list of equality matchers which have to be present in a selector to query the remote read endpoint.',
    )
    tlsConfig: Optional[TlsConfigModel3] = Field(
        None, description='TLS Config to use for remote read.'
    )
    url: str = Field(..., description='The URL of the endpoint to query from.')


class CredentialsModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AuthorizationModel4(BaseModel):
    credentials: Optional[CredentialsModel4] = Field(
        None,
        description="The secret's key that contains the credentials of the request",
    )
    credentialsFile: Optional[str] = Field(
        None,
        description='File to read a secret from, mutually exclusive with Credentials (from SafeAuthorization)',
    )
    type: Optional[str] = Field(
        None,
        description='Set the authentication type. Defaults to Bearer, Basic will cause an error',
    )


class PasswordModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel3(BaseModel):
    password: Optional[PasswordModel3] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel3] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class MetadataConfig(BaseModel):
    send: Optional[bool] = Field(
        None,
        description='Whether metric metadata is sent to the remote storage or not.',
    )
    sendInterval: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(
        None,
        description='How frequently metric metadata is sent to the remote storage.',
    )


class ConfigMapModel14(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel14(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ClientIdModel2(BaseModel):
    configMap: Optional[ConfigMapModel14] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel14] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ClientSecretModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Oauth2Model2(BaseModel):
    clientId: ClientIdModel2 = Field(
        ..., description='The secret or configmap containing the OAuth2 client id'
    )
    clientSecret: ClientSecretModel2 = Field(
        ..., description='The secret containing the OAuth2 client secret'
    )
    endpointParams: Optional[Dict[str, str]] = Field(
        None, description='Parameters to append to the token URL'
    )
    scopes: Optional[List[str]] = Field(
        None, description='OAuth2 scopes used for the token request'
    )
    tokenUrl: constr(min_length=1) = Field(
        ..., description='The URL to fetch the token from'
    )


class QueueConfig(BaseModel):
    batchSendDeadline: Optional[str] = Field(
        None,
        description='BatchSendDeadline is the maximum time a sample will wait in buffer.',
    )
    capacity: Optional[int] = Field(
        None,
        description='Capacity is the number of samples to buffer per shard before we start dropping them.',
    )
    maxBackoff: Optional[str] = Field(
        None, description='MaxBackoff is the maximum retry delay.'
    )
    maxRetries: Optional[int] = Field(
        None,
        description='MaxRetries is the maximum number of times to retry a batch on recoverable errors.',
    )
    maxSamplesPerSend: Optional[int] = Field(
        None, description='MaxSamplesPerSend is the maximum number of samples per send.'
    )
    maxShards: Optional[int] = Field(
        None,
        description='MaxShards is the maximum number of shards, i.e. amount of concurrency.',
    )
    minBackoff: Optional[str] = Field(
        None,
        description='MinBackoff is the initial retry delay. Gets doubled for every retry.',
    )
    minShards: Optional[int] = Field(
        None,
        description='MinShards is the minimum number of shards, i.e. amount of concurrency.',
    )
    retryOnRateLimit: Optional[bool] = Field(
        None,
        description='Retry upon receiving a 429 status code from the remote-write storage. This is experimental feature and might change in the future.',
    )


class AccessKey(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class SecretKey(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Sigv4(BaseModel):
    accessKey: Optional[AccessKey] = Field(
        None,
        description='AccessKey is the AWS API key. If blank, the environment variable `AWS_ACCESS_KEY_ID` is used.',
    )
    profile: Optional[str] = Field(
        None, description='Profile is the named AWS profile used to authenticate.'
    )
    region: Optional[str] = Field(
        None,
        description='Region is the AWS region. If blank, the region from the default credentials chain used.',
    )
    roleArn: Optional[str] = Field(
        None, description='RoleArn is the named AWS profile used to authenticate.'
    )
    secretKey: Optional[SecretKey] = Field(
        None,
        description='SecretKey is the AWS API secret. If blank, the environment variable `AWS_SECRET_ACCESS_KEY` is used.',
    )


class ConfigMapModel15(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel15(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel4(BaseModel):
    configMap: Optional[ConfigMapModel15] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel15] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel16(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel16(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel4(BaseModel):
    configMap: Optional[ConfigMapModel16] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel16] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel4(BaseModel):
    ca: Optional[CaModel4] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    caFile: Optional[str] = Field(
        None,
        description='Path to the CA cert in the Prometheus container to use for the targets.',
    )
    cert: Optional[CertModel4] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    certFile: Optional[str] = Field(
        None,
        description='Path to the client cert file in the Prometheus container for the targets.',
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keyFile: Optional[str] = Field(
        None,
        description='Path to the client key file in the Prometheus container for the targets.',
    )
    keySecret: Optional[KeySecretModel4] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class ActionModel4(Enum):
    replace = 'replace'
    keep = 'keep'
    drop = 'drop'
    hashmod = 'hashmod'
    labelmap = 'labelmap'
    labeldrop = 'labeldrop'
    labelkeep = 'labelkeep'


class WriteRelabelConfig(BaseModel):
    action: Optional[ActionModel4] = Field(
        None,
        description="Action to perform based on regex matching. Default is 'replace'",
    )
    modulus: Optional[int] = Field(
        None, description='Modulus to take of the hash of the source label values.'
    )
    regex: Optional[str] = Field(
        None,
        description="Regular expression against which the extracted value is matched. Default is '(.*)'",
    )
    replacement: Optional[str] = Field(
        None,
        description="Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
    )
    separator: Optional[str] = Field(
        None,
        description="Separator placed between concatenated source label values. default is ';'.",
    )
    sourceLabels: Optional[List[constr(regex=r'^[a-zA-Z_][a-zA-Z0-9_]*$')]] = Field(
        None,
        description='The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.',
    )
    targetLabel: Optional[str] = Field(
        None,
        description='Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.',
    )


class RemoteWriteItem(BaseModel):
    authorization: Optional[AuthorizationModel4] = Field(
        None, description='Authorization section for remote write'
    )
    basicAuth: Optional[BasicAuthModel3] = Field(
        None, description='BasicAuth for the URL.'
    )
    bearerToken: Optional[str] = Field(
        None, description='Bearer token for remote write.'
    )
    bearerTokenFile: Optional[str] = Field(
        None, description='File to read bearer token for remote write.'
    )
    headers: Optional[Dict[str, str]] = Field(
        None,
        description="Custom HTTP headers to be sent along with each remote write request. Be aware that headers that are set by Prometheus itself can't be overwritten. Only valid in Prometheus versions 2.25.0 and newer.",
    )
    metadataConfig: Optional[MetadataConfig] = Field(
        None,
        description='MetadataConfig configures the sending of series metadata to the remote storage.',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the remote write queue, it must be unique if specified. The name is used in metrics and logging in order to differentiate queues. Only valid in Prometheus versions 2.15.0 and newer.',
    )
    oauth2: Optional[Oauth2Model2] = Field(
        None,
        description='OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    proxyUrl: Optional[str] = Field(None, description='Optional ProxyURL.')
    queueConfig: Optional[QueueConfig] = Field(
        None,
        description='QueueConfig allows tuning of the remote write queue parameters.',
    )
    remoteTimeout: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(None, description='Timeout for requests to the remote write endpoint.')
    sendExemplars: Optional[bool] = Field(
        None,
        description='Enables sending of exemplars over remote write. Note that exemplar-storage itself must be enabled using the enableFeature option for exemplars to be scraped in the first place.  Only valid in Prometheus versions 2.27.0 and newer.',
    )
    sigv4: Optional[Sigv4] = Field(
        None, description="Sigv4 allows to configures AWS's Signature Verification 4"
    )
    tlsConfig: Optional[TlsConfigModel4] = Field(
        None, description='TLS Config to use for remote write.'
    )
    url: str = Field(..., description='The URL of the endpoint to send samples to.')
    writeRelabelConfigs: Optional[List[WriteRelabelConfig]] = Field(
        None, description='The list of remote write relabel configurations.'
    )


class ResourcesModel7(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class MatchExpressionModel31(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class RuleNamespaceSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel31]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel32(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class RuleSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel32]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class Alert(BaseModel):
    forGracePeriod: Optional[str] = Field(
        None,
        description="Minimum duration between alert and restored 'for' state. This is maintained only for alerts with configured 'for' time greater than grace period.",
    )
    forOutageTolerance: Optional[str] = Field(
        None,
        description="Max time to tolerate prometheus outage for restoring 'for' state of alert.",
    )
    resendDelay: Optional[str] = Field(
        None,
        description='Minimum amount of time to wait before resending an alert to Alertmanager.',
    )


class Rules(BaseModel):
    alert: Optional[Alert] = Field(
        None, description='/--rules.alert.*/ command-line arguments'
    )


class SeLinuxOptionsModel4(BaseModel):
    level: Optional[str] = Field(
        None, description='Level is SELinux level label that applies to the container.'
    )
    role: Optional[str] = Field(
        None, description='Role is a SELinux role label that applies to the container.'
    )
    type: Optional[str] = Field(
        None, description='Type is a SELinux type label that applies to the container.'
    )
    user: Optional[str] = Field(
        None, description='User is a SELinux user label that applies to the container.'
    )


class SeccompProfileModel4(BaseModel):
    localhostProfile: Optional[str] = Field(
        None,
        description='localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet\'s configured seccomp profile location. Must only be set if type is "Localhost".',
    )
    type: str = Field(
        ...,
        description='type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.',
    )


class SysctlModel(BaseModel):
    name: str = Field(..., description='Name of a property to set')
    value: str = Field(..., description='Value of a property to set')


class WindowsOptionsModel4(BaseModel):
    gmsaCredentialSpec: Optional[str] = Field(
        None,
        description='GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
    )
    gmsaCredentialSpecName: Optional[str] = Field(
        None,
        description='GMSACredentialSpecName is the name of the GMSA credential spec to use.',
    )
    hostProcess: Optional[bool] = Field(
        None,
        description="HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
    )
    runAsUserName: Optional[str] = Field(
        None,
        description='The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )


class SecurityContextModel4(BaseModel):
    fsGroup: Optional[int] = Field(
        None,
        description="A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: \n 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- \n If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.",
    )
    fsGroupChangePolicy: Optional[str] = Field(
        None,
        description='fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsGroup: Optional[int] = Field(
        None,
        description='The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsNonRoot: Optional[bool] = Field(
        None,
        description='Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    runAsUser: Optional[int] = Field(
        None,
        description='The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.',
    )
    seLinuxOptions: Optional[SeLinuxOptionsModel4] = Field(
        None,
        description='The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.',
    )
    seccompProfile: Optional[SeccompProfileModel4] = Field(
        None,
        description='The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.',
    )
    supplementalGroups: Optional[List[int]] = Field(
        None,
        description="A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.",
    )
    sysctls: Optional[List[SysctlModel]] = Field(
        None,
        description='Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.',
    )
    windowsOptions: Optional[WindowsOptionsModel4] = Field(
        None,
        description="The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.",
    )


class MatchExpressionModel33(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class ServiceMonitorNamespaceSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel33]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel34(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class ServiceMonitorSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel34]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class EmptyDirModel1(BaseModel):
    medium: Optional[str] = Field(
        None,
        description='What type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
    )
    sizeLimit: Optional[Any] = Field(
        None,
        description='Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir',
    )


class DataSourceModel2(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class DataSourceRefModel2(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class ResourcesModel8(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class MatchExpressionModel35(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class SelectorModel4(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel35]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class SpecModel5(BaseModel):
    accessModes: Optional[List[str]] = Field(
        None,
        description='AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
    )
    dataSource: Optional[DataSourceModel2] = Field(
        None,
        description='This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.',
    )
    dataSourceRef: Optional[DataSourceRefModel2] = Field(
        None,
        description='Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.',
    )
    resources: Optional[ResourcesModel8] = Field(
        None,
        description='Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources',
    )
    selector: Optional[SelectorModel4] = Field(
        None, description='A label query over volumes to consider for binding.'
    )
    storageClassName: Optional[str] = Field(
        None,
        description='Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1',
    )
    volumeMode: Optional[str] = Field(
        None,
        description='volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='VolumeName is the binding reference to the PersistentVolume backing this claim.',
    )


class VolumeClaimTemplateModel2(BaseModel):
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.',
    )
    spec: SpecModel5 = Field(
        ...,
        description='The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.',
    )


class EphemeralModel1(BaseModel):
    volumeClaimTemplate: Optional[VolumeClaimTemplateModel2] = Field(
        None,
        description='Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). \n An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. \n This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. \n Required, must not be nil.',
    )


class MetadataModel(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description='Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
    )
    name: Optional[str] = Field(
        None,
        description='Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
    )


class DataSourceModel3(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class DataSourceRefModel3(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class ResourcesModel9(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class MatchExpressionModel36(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class SelectorModel5(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel36]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class SpecModel6(BaseModel):
    accessModes: Optional[List[str]] = Field(
        None,
        description='AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
    )
    dataSource: Optional[DataSourceModel3] = Field(
        None,
        description='This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.',
    )
    dataSourceRef: Optional[DataSourceRefModel3] = Field(
        None,
        description='Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.',
    )
    resources: Optional[ResourcesModel9] = Field(
        None,
        description='Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources',
    )
    selector: Optional[SelectorModel5] = Field(
        None, description='A label query over volumes to consider for binding.'
    )
    storageClassName: Optional[str] = Field(
        None,
        description='Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1',
    )
    volumeMode: Optional[str] = Field(
        None,
        description='volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='VolumeName is the binding reference to the PersistentVolume backing this claim.',
    )


class ConditionModel(BaseModel):
    lastProbeTime: Optional[datetime] = Field(
        None, description='Last time we probed the condition.'
    )
    lastTransitionTime: Optional[datetime] = Field(
        None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        None,
        description='Unique, this should be a short, machine understandable string that gives the reason for condition\'s last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.',
    )
    status: str
    type: str = Field(
        ...,
        description='PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type',
    )


class StatusModel1(BaseModel):
    accessModes: Optional[List[str]] = Field(
        None,
        description='AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
    )
    allocatedResources: Optional[Dict[str, Any]] = Field(
        None,
        description='The storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.',
    )
    capacity: Optional[Dict[str, Any]] = Field(
        None, description='Represents the actual resources of the underlying volume.'
    )
    conditions: Optional[List[ConditionModel]] = Field(
        None,
        description="Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
    )
    phase: Optional[str] = Field(
        None, description='Phase represents the current phase of PersistentVolumeClaim.'
    )
    resizeStatus: Optional[str] = Field(
        None,
        description='ResizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.',
    )


class VolumeClaimTemplateModel3(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[MetadataModel] = Field(
        None,
        description='EmbeddedMetadata contains metadata relevant to an EmbeddedResource.',
    )
    spec: Optional[SpecModel6] = Field(
        None,
        description='Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
    )
    status: Optional[StatusModel1] = Field(
        None,
        description='Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
    )


class StorageModel(BaseModel):
    disableMountSubPath: Optional[bool] = Field(
        None,
        description='Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.',
    )
    emptyDir: Optional[EmptyDirModel1] = Field(
        None,
        description='EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir',
    )
    ephemeral: Optional[EphemeralModel1] = Field(
        None,
        description='EphemeralVolumeSource to be used by the Prometheus StatefulSets. This is a beta field in k8s 1.21, for lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes',
    )
    volumeClaimTemplate: Optional[VolumeClaimTemplateModel3] = Field(
        None, description='A PVC spec to be used by the Prometheus StatefulSets.'
    )


class ConfigMapModel17(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel17(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel5(BaseModel):
    configMap: Optional[ConfigMapModel17] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel17] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel18(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel18(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel5(BaseModel):
    configMap: Optional[ConfigMapModel18] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel18] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel5(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class GrpcServerTlsConfig(BaseModel):
    ca: Optional[CaModel5] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    caFile: Optional[str] = Field(
        None,
        description='Path to the CA cert in the Prometheus container to use for the targets.',
    )
    cert: Optional[CertModel5] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    certFile: Optional[str] = Field(
        None,
        description='Path to the client cert file in the Prometheus container for the targets.',
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keyFile: Optional[str] = Field(
        None,
        description='Path to the client key file in the Prometheus container for the targets.',
    )
    keySecret: Optional[KeySecretModel5] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class LogFormatModel1(Enum):
    _ = ''
    logfmt = 'logfmt'
    json = 'json'


class LogLevelModel1(Enum):
    _ = ''
    debug = 'debug'
    info = 'info'
    warn = 'warn'
    error = 'error'


class ObjectStorageConfig(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ResourcesModel10(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class TracingConfig(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class VolumeMountModel4(BaseModel):
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted.  Must not contain ':'.",
    )
    mountPropagation: Optional[str] = Field(
        None,
        description='mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
    )
    name: str = Field(..., description='This must match the Name of a Volume.')
    readOnly: Optional[bool] = Field(
        None,
        description='Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
    )
    subPath: Optional[str] = Field(
        None,
        description='Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
    )
    subPathExpr: Optional[str] = Field(
        None,
        description='Expanded path within the volume from which the container\'s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container\'s environment. Defaults to "" (volume\'s root). SubPathExpr and SubPath are mutually exclusive.',
    )


class Thanos(BaseModel):
    baseImage: Optional[str] = Field(
        None,
        description="Thanos base image if other than default. Deprecated: use 'image' instead",
    )
    grpcServerTlsConfig: Optional[GrpcServerTlsConfig] = Field(
        None,
        description="GRPCServerTLSConfig configures the gRPC server from which Thanos Querier reads recorded rule data. Note: Currently only the CAFile, CertFile, and KeyFile fields are supported. Maps to the '--grpc-server-tls-*' CLI args.",
    )
    image: Optional[str] = Field(
        None,
        description='Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Thanos is being configured.',
    )
    listenLocal: Optional[bool] = Field(
        None,
        description='ListenLocal makes the Thanos sidecar listen on loopback, so that it does not bind against the Pod IP.',
    )
    logFormat: Optional[LogFormatModel1] = Field(
        None, description='LogFormat for Thanos sidecar to be configured with.'
    )
    logLevel: Optional[LogLevelModel1] = Field(
        None, description='LogLevel for Thanos sidecar to be configured with.'
    )
    minTime: Optional[str] = Field(
        None,
        description='MinTime for Thanos sidecar to be configured with. Option can be a constant time in RFC3339 format or time duration relative to current time, such as -1d or 2h45m. Valid duration units are ms, s, m, h, d, w, y.',
    )
    objectStorageConfig: Optional[ObjectStorageConfig] = Field(
        None,
        description='ObjectStorageConfig configures object storage in Thanos. Alternative to ObjectStorageConfigFile, and lower order priority.',
    )
    objectStorageConfigFile: Optional[str] = Field(
        None,
        description='ObjectStorageConfigFile specifies the path of the object storage configuration file. When used alongside with ObjectStorageConfig, ObjectStorageConfigFile takes precedence.',
    )
    readyTimeout: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(
        None,
        description='ReadyTimeout is the maximum time Thanos sidecar will wait for Prometheus to start. Eg 10m',
    )
    resources: Optional[ResourcesModel10] = Field(
        None,
        description='Resources defines the resource requirements for the Thanos sidecar. If not provided, no requests/limits will be set',
    )
    sha: Optional[str] = Field(
        None,
        description="SHA of Thanos container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.",
    )
    tag: Optional[str] = Field(
        None,
        description="Tag of Thanos sidecar container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.",
    )
    tracingConfig: Optional[TracingConfig] = Field(
        None,
        description='TracingConfig configures tracing in Thanos. This is an experimental feature, it may change in any upcoming release in a breaking way.',
    )
    tracingConfigFile: Optional[str] = Field(
        None,
        description='TracingConfig specifies the path of the tracing configuration file. When used alongside with TracingConfig, TracingConfigFile takes precedence.',
    )
    version: Optional[str] = Field(
        None, description='Version describes the version of Thanos to use.'
    )
    volumeMounts: Optional[List[VolumeMountModel4]] = Field(
        None,
        description='VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the thanos-sidecar container.',
    )


class TolerationModel(BaseModel):
    effect: Optional[str] = Field(
        None,
        description='Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
    )
    key: Optional[str] = Field(
        None,
        description='Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
    )
    operator: Optional[str] = Field(
        None,
        description="Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
    )
    tolerationSeconds: Optional[int] = Field(
        None,
        description='TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
    )
    value: Optional[str] = Field(
        None,
        description='Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
    )


class MatchExpressionModel37(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel8(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel37]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class TopologySpreadConstraintModel(BaseModel):
    labelSelector: Optional[LabelSelectorModel8] = Field(
        None,
        description='LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.',
    )
    maxSkew: int = Field(
        ...,
        description="MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
    )
    topologyKey: str = Field(
        ...,
        description='TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It\'s a required field.',
    )
    whenUnsatisfiable: str = Field(
        ...,
        description='WhenUnsatisfiable indicates how to deal with a pod if it doesn\'t satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won\'t make it *more* imbalanced. It\'s a required field.',
    )


class VolumeMountModel5(BaseModel):
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted.  Must not contain ':'.",
    )
    mountPropagation: Optional[str] = Field(
        None,
        description='mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
    )
    name: str = Field(..., description='This must match the Name of a Volume.')
    readOnly: Optional[bool] = Field(
        None,
        description='Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
    )
    subPath: Optional[str] = Field(
        None,
        description='Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
    )
    subPathExpr: Optional[str] = Field(
        None,
        description='Expanded path within the volume from which the container\'s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container\'s environment. Defaults to "" (volume\'s root). SubPathExpr and SubPath are mutually exclusive.',
    )


class AwsElasticBlockStoreModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    partition: Optional[int] = Field(
        None,
        description='The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
    )
    volumeID: str = Field(
        ...,
        description='Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
    )


class AzureDiskModel(BaseModel):
    cachingMode: Optional[str] = Field(
        None, description='Host Caching mode: None, Read Only, Read Write.'
    )
    diskName: str = Field(
        ..., description='The Name of the data disk in the blob storage'
    )
    diskURI: str = Field(..., description='The URI the data disk in the blob storage')
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    kind: Optional[str] = Field(
        None,
        description='Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )


class AzureFileModel(BaseModel):
    readOnly: Optional[bool] = Field(
        None,
        description='Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretName: str = Field(
        ...,
        description='the name of secret that contains Azure Storage Account Name and Key',
    )
    shareName: str = Field(..., description='Share Name')


class SecretRefModel10(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class CephfsModel(BaseModel):
    monitors: List[str] = Field(
        ...,
        description='Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    path: Optional[str] = Field(
        None,
        description='Optional: Used as the mounted root, rather than the full Ceph tree, default is /',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    secretFile: Optional[str] = Field(
        None,
        description='Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    secretRef: Optional[SecretRefModel10] = Field(
        None,
        description='Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    user: Optional[str] = Field(
        None,
        description='Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )


class SecretRefModel11(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class CinderModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    secretRef: Optional[SecretRefModel11] = Field(
        None,
        description='Optional: points to a secret object containing parameters used to connect to OpenStack.',
    )
    volumeID: str = Field(
        ...,
        description='volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )


class ItemModel5(BaseModel):
    key: str = Field(..., description='The key to project.')
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class ConfigMapModel19(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    items: Optional[List[ItemModel5]] = Field(
        None,
        description="If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its keys must be defined'
    )


class NodePublishSecretRefModel(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class CsiModel(BaseModel):
    driver: str = Field(
        ...,
        description='Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.',
    )
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.',
    )
    nodePublishSecretRef: Optional[NodePublishSecretRefModel] = Field(
        None,
        description='NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Specifies a read-only configuration for the volume. Defaults to false (read/write).',
    )
    volumeAttributes: Optional[Dict[str, str]] = Field(
        None,
        description="VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
    )


class FieldRefModel5(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel5(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class ItemModel6(BaseModel):
    fieldRef: Optional[FieldRefModel5] = Field(
        None,
        description='Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.',
    )
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel5] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.',
    )


class DownwardAPIModel1(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    items: Optional[List[ItemModel6]] = Field(
        None, description='Items is a list of downward API volume file'
    )


class EmptyDirModel2(BaseModel):
    medium: Optional[str] = Field(
        None,
        description='What type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
    )
    sizeLimit: Optional[Any] = Field(
        None,
        description='Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir',
    )


class DataSourceModel4(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class DataSourceRefModel4(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class ResourcesModel11(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class MatchExpressionModel38(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class SelectorModel6(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel38]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class SpecModel7(BaseModel):
    accessModes: Optional[List[str]] = Field(
        None,
        description='AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
    )
    dataSource: Optional[DataSourceModel4] = Field(
        None,
        description='This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.',
    )
    dataSourceRef: Optional[DataSourceRefModel4] = Field(
        None,
        description='Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.',
    )
    resources: Optional[ResourcesModel11] = Field(
        None,
        description='Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources',
    )
    selector: Optional[SelectorModel6] = Field(
        None, description='A label query over volumes to consider for binding.'
    )
    storageClassName: Optional[str] = Field(
        None,
        description='Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1',
    )
    volumeMode: Optional[str] = Field(
        None,
        description='volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='VolumeName is the binding reference to the PersistentVolume backing this claim.',
    )


class VolumeClaimTemplateModel4(BaseModel):
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.',
    )
    spec: SpecModel7 = Field(
        ...,
        description='The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.',
    )


class EphemeralModel2(BaseModel):
    volumeClaimTemplate: Optional[VolumeClaimTemplateModel4] = Field(
        None,
        description='Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). \n An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. \n This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. \n Required, must not be nil.',
    )


class FcModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    lun: Optional[int] = Field(None, description='Optional: FC target lun number')
    readOnly: Optional[bool] = Field(
        None,
        description='Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    targetWWNs: Optional[List[str]] = Field(
        None, description='Optional: FC target worldwide names (WWNs)'
    )
    wwids: Optional[List[str]] = Field(
        None,
        description='Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.',
    )


class SecretRefModel12(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class FlexVolumeModel(BaseModel):
    driver: str = Field(
        ..., description='Driver is the name of the driver to use for this volume.'
    )
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
    )
    options: Optional[Dict[str, str]] = Field(
        None, description='Optional: Extra command options if any.'
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretRef: Optional[SecretRefModel12] = Field(
        None,
        description='Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.',
    )


class FlockerModel(BaseModel):
    datasetName: Optional[str] = Field(
        None,
        description='Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated',
    )
    datasetUUID: Optional[str] = Field(
        None,
        description='UUID of the dataset. This is unique identifier of a Flocker dataset',
    )


class GcePersistentDiskModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    partition: Optional[int] = Field(
        None,
        description='The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )
    pdName: str = Field(
        ...,
        description='Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )


class GitRepoModel(BaseModel):
    directory: Optional[str] = Field(
        None,
        description="Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
    )
    repository: str = Field(..., description='Repository URL')
    revision: Optional[str] = Field(
        None, description='Commit hash for the specified revision.'
    )


class GlusterfsModel(BaseModel):
    endpoints: str = Field(
        ...,
        description='EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
    )
    path: str = Field(
        ...,
        description='Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
    )


class HostPathModel(BaseModel):
    path: str = Field(
        ...,
        description='Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
    )
    type: Optional[str] = Field(
        None,
        description='Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
    )


class SecretRefModel13(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class IscsiModel(BaseModel):
    chapAuthDiscovery: Optional[bool] = Field(
        None, description='whether support iSCSI Discovery CHAP authentication'
    )
    chapAuthSession: Optional[bool] = Field(
        None, description='whether support iSCSI Session CHAP authentication'
    )
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    initiatorName: Optional[str] = Field(
        None,
        description='Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.',
    )
    iqn: str = Field(..., description='Target iSCSI Qualified Name.')
    iscsiInterface: Optional[str] = Field(
        None,
        description="iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
    )
    lun: int = Field(..., description='iSCSI Target Lun number.')
    portals: Optional[List[str]] = Field(
        None,
        description='iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.',
    )
    secretRef: Optional[SecretRefModel13] = Field(
        None, description='CHAP Secret for iSCSI target and initiator authentication'
    )
    targetPortal: str = Field(
        ...,
        description='iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
    )


class NfsModel(BaseModel):
    path: str = Field(
        ...,
        description='Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
    )
    server: str = Field(
        ...,
        description='Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
    )


class PersistentVolumeClaimModel(BaseModel):
    claimName: str = Field(
        ...,
        description='ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Will force the ReadOnly setting in VolumeMounts. Default false.',
    )


class PhotonPersistentDiskModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    pdID: str = Field(
        ..., description='ID that identifies Photon Controller persistent disk'
    )


class PortworxVolumeModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    volumeID: str = Field(
        ..., description='VolumeID uniquely identifies a Portworx volume'
    )


class ItemModel7(BaseModel):
    key: str = Field(..., description='The key to project.')
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class ConfigMapModel20(BaseModel):
    items: Optional[List[ItemModel7]] = Field(
        None,
        description="If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its keys must be defined'
    )


class FieldRefModel6(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel6(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class ItemModel8(BaseModel):
    fieldRef: Optional[FieldRefModel6] = Field(
        None,
        description='Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.',
    )
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel6] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.',
    )


class DownwardAPIModel2(BaseModel):
    items: Optional[List[ItemModel8]] = Field(
        None, description='Items is a list of DownwardAPIVolume file'
    )


class ItemModel9(BaseModel):
    key: str = Field(..., description='The key to project.')
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class SecretModel19(BaseModel):
    items: Optional[List[ItemModel9]] = Field(
        None,
        description="If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ServiceAccountTokenModel(BaseModel):
    audience: Optional[str] = Field(
        None,
        description='Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.',
    )
    expirationSeconds: Optional[int] = Field(
        None,
        description='ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.',
    )
    path: str = Field(
        ...,
        description='Path is the path relative to the mount point of the file to project the token into.',
    )


class SourceModel(BaseModel):
    configMap: Optional[ConfigMapModel20] = Field(
        None, description='information about the configMap data to project'
    )
    downwardAPI: Optional[DownwardAPIModel2] = Field(
        None, description='information about the downwardAPI data to project'
    )
    secret: Optional[SecretModel19] = Field(
        None, description='information about the secret data to project'
    )
    serviceAccountToken: Optional[ServiceAccountTokenModel] = Field(
        None, description='information about the serviceAccountToken data to project'
    )


class ProjectedModel(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    sources: Optional[List[SourceModel]] = Field(
        None, description='list of volume projections'
    )


class QuobyteModel(BaseModel):
    group: Optional[str] = Field(
        None, description='Group to map volume access to Default is no group'
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.',
    )
    registry: str = Field(
        ...,
        description='Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes',
    )
    tenant: Optional[str] = Field(
        None,
        description='Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin',
    )
    user: Optional[str] = Field(
        None, description='User to map volume access to Defaults to serivceaccount user'
    )
    volume: str = Field(
        ...,
        description='Volume is a string that references an already created Quobyte volume by name.',
    )


class SecretRefModel14(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class RbdModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    image: str = Field(
        ...,
        description='The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    keyring: Optional[str] = Field(
        None,
        description='Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    monitors: List[str] = Field(
        ...,
        description='A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    pool: Optional[str] = Field(
        None,
        description='The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    secretRef: Optional[SecretRefModel14] = Field(
        None,
        description='SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    user: Optional[str] = Field(
        None,
        description='The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )


class SecretRefModel15(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class ScaleIOModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".',
    )
    gateway: str = Field(
        ..., description='The host address of the ScaleIO API Gateway.'
    )
    protectionDomain: Optional[str] = Field(
        None,
        description='The name of the ScaleIO Protection Domain for the configured storage.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretRef: SecretRefModel15 = Field(
        ...,
        description='SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.',
    )
    sslEnabled: Optional[bool] = Field(
        None,
        description='Flag to enable/disable SSL communication with Gateway, default false',
    )
    storageMode: Optional[str] = Field(
        None,
        description='Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.',
    )
    storagePool: Optional[str] = Field(
        None,
        description='The ScaleIO Storage Pool associated with the protection domain.',
    )
    system: str = Field(
        ..., description='The name of the storage system as configured in ScaleIO.'
    )
    volumeName: Optional[str] = Field(
        None,
        description='The name of a volume already created in the ScaleIO system that is associated with this volume source.',
    )


class ItemModel10(BaseModel):
    key: str = Field(..., description='The key to project.')
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class SecretModel20(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    items: Optional[List[ItemModel10]] = Field(
        None,
        description="If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its keys must be defined'
    )
    secretName: Optional[str] = Field(
        None,
        description="Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
    )


class SecretRefModel16(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class StorageosModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretRef: Optional[SecretRefModel16] = Field(
        None,
        description='SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.',
    )
    volumeNamespace: Optional[str] = Field(
        None,
        description='VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod\'s namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.',
    )


class VsphereVolumeModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    storagePolicyID: Optional[str] = Field(
        None,
        description='Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.',
    )
    storagePolicyName: Optional[str] = Field(
        None, description='Storage Policy Based Management (SPBM) profile name.'
    )
    volumePath: str = Field(..., description='Path that identifies vSphere volume vmdk')


class VolumeModel(BaseModel):
    awsElasticBlockStore: Optional[AwsElasticBlockStoreModel] = Field(
        None,
        description="AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    )
    azureDisk: Optional[AzureDiskModel] = Field(
        None,
        description='AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.',
    )
    azureFile: Optional[AzureFileModel] = Field(
        None,
        description='AzureFile represents an Azure File Service mount on the host and bind mount to the pod.',
    )
    cephfs: Optional[CephfsModel] = Field(
        None,
        description="CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
    )
    cinder: Optional[CinderModel] = Field(
        None,
        description='Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    configMap: Optional[ConfigMapModel19] = Field(
        None,
        description='ConfigMap represents a configMap that should populate this volume',
    )
    csi: Optional[CsiModel] = Field(
        None,
        description='CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).',
    )
    downwardAPI: Optional[DownwardAPIModel1] = Field(
        None,
        description='DownwardAPI represents downward API about the pod that should populate this volume',
    )
    emptyDir: Optional[EmptyDirModel2] = Field(
        None,
        description="EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    )
    ephemeral: Optional[EphemeralModel2] = Field(
        None,
        description="Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. \n Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). \n Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. \n Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. \n A pod can use both types of ephemeral volumes and persistent volumes at the same time.",
    )
    fc: Optional[FcModel] = Field(
        None,
        description="FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
    )
    flexVolume: Optional[FlexVolumeModel] = Field(
        None,
        description='FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.',
    )
    flocker: Optional[FlockerModel] = Field(
        None,
        description="Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
    )
    gcePersistentDisk: Optional[GcePersistentDiskModel] = Field(
        None,
        description="GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    )
    gitRepo: Optional[GitRepoModel] = Field(
        None,
        description="GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
    )
    glusterfs: Optional[GlusterfsModel] = Field(
        None,
        description="Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
    )
    hostPath: Optional[HostPathModel] = Field(
        None,
        description='HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.',
    )
    iscsi: Optional[IscsiModel] = Field(
        None,
        description="ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
    )
    name: str = Field(
        ...,
        description="Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    nfs: Optional[NfsModel] = Field(
        None,
        description="NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    )
    persistentVolumeClaim: Optional[PersistentVolumeClaimModel] = Field(
        None,
        description='PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
    )
    photonPersistentDisk: Optional[PhotonPersistentDiskModel] = Field(
        None,
        description='PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine',
    )
    portworxVolume: Optional[PortworxVolumeModel] = Field(
        None,
        description='PortworxVolume represents a portworx volume attached and mounted on kubelets host machine',
    )
    projected: Optional[ProjectedModel] = Field(
        None,
        description='Items for all in one resources secrets, configmaps, and downward API',
    )
    quobyte: Optional[QuobyteModel] = Field(
        None,
        description="Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
    )
    rbd: Optional[RbdModel] = Field(
        None,
        description="RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
    )
    scaleIO: Optional[ScaleIOModel] = Field(
        None,
        description='ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.',
    )
    secret: Optional[SecretModel20] = Field(
        None,
        description='Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret',
    )
    storageos: Optional[StorageosModel] = Field(
        None,
        description='StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.',
    )
    vsphereVolume: Optional[VsphereVolumeModel] = Field(
        None,
        description='VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine',
    )


class ConfigMapModel21(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel21(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel6(BaseModel):
    configMap: Optional[ConfigMapModel21] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel21] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel22(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel22(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ClientCa(BaseModel):
    configMap: Optional[ConfigMapModel22] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel22] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel6(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel5(BaseModel):
    cert: CertModel6 = Field(
        ..., description='Contains the TLS certificate for the server.'
    )
    cipherSuites: Optional[List[str]] = Field(
        None,
        description='List of supported cipher suites for TLS versions up to TLS 1.2. If empty, Go default cipher suites are used. Available cipher suites are documented in the go documentation: https://golang.org/pkg/crypto/tls/#pkg-constants',
    )
    clientAuthType: Optional[str] = Field(
        None,
        description='Server policy for client authentication. Maps to ClientAuth Policies. For more detail on clientAuth options: https://golang.org/pkg/crypto/tls/#ClientAuthType',
    )
    client_ca: Optional[ClientCa] = Field(
        None,
        description='Contains the CA certificate for client certificate authentication to the server.',
    )
    curvePreferences: Optional[List[str]] = Field(
        None,
        description='Elliptic curves that will be used in an ECDHE handshake, in preference order. Available curves are documented in the go documentation: https://golang.org/pkg/crypto/tls/#CurveID',
    )
    keySecret: KeySecretModel6 = Field(
        ..., description='Secret containing the TLS key for the server.'
    )
    maxVersion: Optional[str] = Field(
        None, description='Maximum TLS version that is acceptable. Defaults to TLS13.'
    )
    minVersion: Optional[str] = Field(
        None, description='Minimum TLS version that is acceptable. Defaults to TLS12.'
    )
    preferServerCipherSuites: Optional[bool] = Field(
        None,
        description="Controls whether the server selects the client's most preferred cipher suite, or the server's most preferred cipher suite. If true then the server's preference, as expressed in the order of elements in cipherSuites, is used.",
    )


class Web(BaseModel):
    pageTitle: Optional[str] = Field(None, description='The prometheus web page title')
    tlsConfig: Optional[TlsConfigModel5] = Field(
        None, description='WebTLSConfig defines the TLS parameters for HTTPS.'
    )


class SpecModel8(BaseModel):
    additionalAlertManagerConfigs: Optional[AdditionalAlertManagerConfigs] = Field(
        None,
        description='AdditionalAlertManagerConfigs allows specifying a key of a Secret containing additional Prometheus AlertManager configurations. AlertManager configurations specified are appended to the configurations generated by the Prometheus Operator. Job configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alertmanager_config. As AlertManager configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible AlertManager configs are going to break Prometheus after the upgrade.',
    )
    additionalAlertRelabelConfigs: Optional[AdditionalAlertRelabelConfigs] = Field(
        None,
        description='AdditionalAlertRelabelConfigs allows specifying a key of a Secret containing additional Prometheus alert relabel configurations. Alert relabel configurations specified are appended to the configurations generated by the Prometheus Operator. Alert relabel configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs. As alert relabel configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible alert relabel configs are going to break Prometheus after the upgrade.',
    )
    additionalScrapeConfigs: Optional[AdditionalScrapeConfigs] = Field(
        None,
        description='AdditionalScrapeConfigs allows specifying a key of a Secret containing additional Prometheus scrape configurations. Scrape configurations specified are appended to the configurations generated by the Prometheus Operator. Job configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config. As scrape configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible scrape configs are going to break Prometheus after the upgrade.',
    )
    affinity: Optional[AffinityModel] = Field(
        None, description="If specified, the pod's scheduling constraints."
    )
    alerting: Optional[Alerting] = Field(
        None, description='Define details regarding alerting.'
    )
    allowOverlappingBlocks: Optional[bool] = Field(
        None,
        description='AllowOverlappingBlocks enables vertical compaction and vertical query merge in Prometheus. This is still experimental in Prometheus so it may change in any upcoming release.',
    )
    apiserverConfig: Optional[ApiserverConfig] = Field(
        None,
        description="APIServerConfig allows specifying a host and auth methods to access apiserver. If left empty, Prometheus is assumed to run inside of the cluster and will discover API servers automatically and use the pod's CA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.",
    )
    arbitraryFSAccessThroughSMs: Optional[ArbitraryFSAccessThroughSMs] = Field(
        None,
        description='ArbitraryFSAccessThroughSMs configures whether configuration based on a service monitor can access arbitrary files on the file system of the Prometheus container e.g. bearer token files.',
    )
    baseImage: Optional[str] = Field(
        None,
        description="Base image to use for a Prometheus deployment. Deprecated: use 'image' instead",
    )
    configMaps: Optional[List[str]] = Field(
        None,
        description='ConfigMaps is a list of ConfigMaps in the same namespace as the Prometheus object, which shall be mounted into the Prometheus Pods. The ConfigMaps are mounted into /etc/prometheus/configmaps/<configmap-name>.',
    )
    containers: Optional[List[ContainerModel]] = Field(
        None,
        description='Containers allows injecting additional containers or modifying operator generated containers. This can be used to allow adding an authentication proxy to a Prometheus pod or to change the behavior of an operator generated container. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `prometheus`, `config-reloader`, and `thanos-sidecar`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.',
    )
    disableCompaction: Optional[bool] = Field(
        None, description='Disable prometheus compaction.'
    )
    enableAdminAPI: Optional[bool] = Field(
        None,
        description='Enable access to prometheus web admin API. Defaults to the value of `false`. WARNING: Enabling the admin APIs enables mutating endpoints, to delete data, shutdown Prometheus, and more. Enabling this should be done with care and the user is advised to add additional authentication authorization via a proxy to ensure only clients authorized to perform these actions can do so. For more information see https://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-admin-apis',
    )
    enableFeatures: Optional[List[str]] = Field(
        None,
        description='Enable access to Prometheus disabled features. By default, no features are enabled. Enabling disabled features is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice. For more information see https://prometheus.io/docs/prometheus/latest/disabled_features/',
    )
    enableRemoteWriteReceiver: Optional[bool] = Field(
        None,
        description='Enable Prometheus to be used as a receiver for the Prometheus remote write protocol. Defaults to the value of `false`. WARNING: This is not considered an efficient way of ingesting samples. Use it with caution for specific low-volume use cases. It is not suitable for replacing the ingestion via scraping and turning Prometheus into a push-based metrics collection system. For more information see https://prometheus.io/docs/prometheus/latest/querying/api/#remote-write-receiver Only valid in Prometheus versions 2.33.0 and newer.',
    )
    enforcedBodySizeLimit: Optional[
        constr(regex=r'(^0|([0-9]*[.])?[0-9]+((K|M|G|T|E|P)i?)?B)$')
    ] = Field(
        None,
        description='EnforcedBodySizeLimit defines the maximum size of uncompressed response body that will be accepted by Prometheus. Targets responding with a body larger than this many bytes will cause the scrape to fail. Example: 100MB. If defined, the limit will apply to all service/pod monitors and probes. This is an experimental feature, this behaviour could change or be removed in the future. Only valid in Prometheus versions 2.28.0 and newer.',
    )
    enforcedLabelLimit: Optional[int] = Field(
        None,
        description='Per-scrape limit on number of labels that will be accepted for a sample. If more than this number of labels are present post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    enforcedLabelNameLengthLimit: Optional[int] = Field(
        None,
        description='Per-scrape limit on length of labels name that will be accepted for a sample. If a label name is longer than this number post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    enforcedLabelValueLengthLimit: Optional[int] = Field(
        None,
        description='Per-scrape limit on length of labels value that will be accepted for a sample. If a label value is longer than this number post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    enforcedNamespaceLabel: Optional[str] = Field(
        None,
        description="EnforcedNamespaceLabel If set, a label will be added to \n 1. all user-metrics (created by `ServiceMonitor`, `PodMonitor` and `Probe` objects) and 2. in all `PrometheusRule` objects (except the ones excluded in `prometheusRulesExcludedFromEnforce`) to * alerting & recording rules and * the metrics used in their expressions (`expr`). \n Label name is this field's value. Label value is the namespace of the created object (mentioned above).",
    )
    enforcedSampleLimit: Optional[int] = Field(
        None,
        description='EnforcedSampleLimit defines global limit on number of scraped samples that will be accepted. This overrides any SampleLimit set per ServiceMonitor or/and PodMonitor. It is meant to be used by admins to enforce the SampleLimit to keep overall number of samples/series under the desired limit. Note that if SampleLimit is lower that value will be taken instead.',
    )
    enforcedTargetLimit: Optional[int] = Field(
        None,
        description='EnforcedTargetLimit defines a global limit on the number of scraped targets.  This overrides any TargetLimit set per ServiceMonitor or/and PodMonitor.  It is meant to be used by admins to enforce the TargetLimit to keep the overall number of targets under the desired limit. Note that if TargetLimit is lower, that value will be taken instead, except if either value is zero, in which case the non-zero value will be used.  If both values are zero, no limit is enforced.',
    )
    evaluationInterval: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(
        None, description='Interval between consecutive evaluations. Default: `30s`'
    )
    excludedFromEnforcement: Optional[List[ExcludedFromEnforcementItem]] = Field(
        None,
        description='List of references to PodMonitor, ServiceMonitor, Probe and PrometheusRule objects to be excluded from enforcing a namespace label of origin. Applies only if enforcedNamespaceLabel set to true.',
    )
    externalLabels: Optional[Dict[str, str]] = Field(
        None,
        description='The labels to add to any time series or alerts when communicating with external systems (federation, remote storage, Alertmanager).',
    )
    externalUrl: Optional[str] = Field(
        None,
        description='The external URL the Prometheus instances will be available under. This is necessary to generate correct URLs. This is necessary if Prometheus is not served from root of a DNS name.',
    )
    hostAliases: Optional[List[HostAliaseModel]] = Field(
        None, description="Pods' hostAliases configuration"
    )
    ignoreNamespaceSelectors: Optional[bool] = Field(
        None,
        description='IgnoreNamespaceSelectors if set to true will ignore NamespaceSelector settings from all PodMonitor, ServiceMonitor and Probe objects. They will only discover endpoints within their current namespace. Defaults to false.',
    )
    image: Optional[str] = Field(
        None,
        description='Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Prometheus is being configured.',
    )
    imagePullSecrets: Optional[List[ImagePullSecretModel]] = Field(
        None,
        description='An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod',
    )
    initContainers: Optional[List[InitContainerModel]] = Field(
        None,
        description='InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Prometheus configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ InitContainers described here modify an operator generated init containers if they share the same name and modifications are done via a strategic merge patch. The current init container name is: `init-config-reloader`. Overriding init containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.',
    )
    listenLocal: Optional[bool] = Field(
        None,
        description='ListenLocal makes the Prometheus server listen on loopback, so that it does not bind against the Pod IP.',
    )
    logFormat: Optional[LogFormatModel] = Field(
        None, description='Log format for Prometheus to be configured with.'
    )
    logLevel: Optional[LogLevelModel] = Field(
        None, description='Log level for Prometheus to be configured with.'
    )
    minReadySeconds: Optional[int] = Field(
        None,
        description='Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field and requires enabling StatefulSetMinReadySeconds feature gate.',
    )
    nodeSelector: Optional[Dict[str, str]] = Field(
        None, description='Define which Nodes the Pods are scheduled on.'
    )
    overrideHonorLabels: Optional[bool] = Field(
        None,
        description='When true, Prometheus resolves label conflicts by renaming the labels in the scraped data to "exported_<label value>" for all targets created from service and pod monitors. Otherwise the HonorLabels field of the service or pod monitor applies.',
    )
    overrideHonorTimestamps: Optional[bool] = Field(
        None,
        description='When true, Prometheus ignores the timestamps for all the targets created from service and pod monitors. Otherwise the HonorTimestamps field of the service or pod monitor applies.',
    )
    paused: Optional[bool] = Field(
        None,
        description='When a Prometheus deployment is paused, no actions except for deletion will be performed on the underlying objects.',
    )
    podMetadata: Optional[PodMetadataModel] = Field(
        None,
        description='PodMetadata configures Labels and Annotations which are propagated to the prometheus pods.',
    )
    podMonitorNamespaceSelector: Optional[PodMonitorNamespaceSelector] = Field(
        None,
        description="Namespace's labels to match for PodMonitor discovery. If nil, only check own namespace.",
    )
    podMonitorSelector: Optional[PodMonitorSelector] = Field(
        None,
        description='*Experimental* PodMonitors to be selected for target discovery. *Deprecated:* if neither this nor serviceMonitorSelector are specified, configuration is unmanaged.',
    )
    portName: Optional[str] = Field(
        None,
        description='Port name used for the pods and governing service. This defaults to web',
    )
    priorityClassName: Optional[str] = Field(
        None, description='Priority class assigned to the Pods'
    )
    probeNamespaceSelector: Optional[ProbeNamespaceSelector] = Field(
        None,
        description='*Experimental* Namespaces to be selected for Probe discovery. If nil, only check own namespace.',
    )
    probeSelector: Optional[ProbeSelector] = Field(
        None, description='*Experimental* Probes to be selected for target discovery.'
    )
    prometheusExternalLabelName: Optional[str] = Field(
        None,
        description='Name of Prometheus external label used to denote Prometheus instance name. Defaults to the value of `prometheus`. External label will _not_ be added when value is set to empty string (`""`).',
    )
    prometheusRulesExcludedFromEnforce: Optional[
        List[PrometheusRulesExcludedFromEnforceItem]
    ] = Field(
        None,
        description='PrometheusRulesExcludedFromEnforce - list of prometheus rules to be excluded from enforcing of adding namespace labels. Works only if enforcedNamespaceLabel set to true. Make sure both ruleNamespace and ruleName are set for each pair. Deprecated: use excludedFromEnforcement instead.',
    )
    query: Optional[Query] = Field(
        None,
        description='QuerySpec defines the query command line flags when starting Prometheus.',
    )
    queryLogFile: Optional[str] = Field(
        None,
        description="QueryLogFile specifies the file to which PromQL queries are logged. If the filename has an empty path, e.g. 'query.log', prometheus-operator will mount the file into an emptyDir volume at `/var/log/prometheus`. If a full path is provided, e.g. /var/log/prometheus/query.log, you must mount a volume in the specified directory and it must be writable. This is because the prometheus container runs with a read-only root filesystem for security reasons. Alternatively, the location can be set to a stdout location such as `/dev/stdout` to log query information to the default Prometheus log stream. This is only available in versions of Prometheus >= 2.16.0. For more details, see the Prometheus docs (https://prometheus.io/docs/guides/query-log/)",
    )
    remoteRead: Optional[List[RemoteReadItem]] = Field(
        None, description='remoteRead is the list of remote read configurations.'
    )
    remoteWrite: Optional[List[RemoteWriteItem]] = Field(
        None, description='remoteWrite is the list of remote write configurations.'
    )
    replicaExternalLabelName: Optional[str] = Field(
        None,
        description='Name of Prometheus external label used to denote replica name. Defaults to the value of `prometheus_replica`. External label will _not_ be added when value is set to empty string (`""`).',
    )
    replicas: Optional[int] = Field(
        None,
        description='Number of replicas of each shard to deploy for a Prometheus deployment. Number of replicas multiplied by shards is the total number of Pods created.',
    )
    resources: Optional[ResourcesModel7] = Field(
        None, description='Define resources requests and limits for single Pods.'
    )
    retention: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(
        None,
        description="Time duration Prometheus shall retain data for. Default is '24h' if retentionSize is not set, and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).",
    )
    retentionSize: Optional[
        constr(regex=r'(^0|([0-9]*[.])?[0-9]+((K|M|G|T|E|P)i?)?B)$')
    ] = Field(None, description='Maximum amount of disk space used by blocks.')
    routePrefix: Optional[str] = Field(
        None,
        description='The route prefix Prometheus registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.',
    )
    ruleNamespaceSelector: Optional[RuleNamespaceSelector] = Field(
        None,
        description='Namespaces to be selected for PrometheusRules discovery. If unspecified, only the same namespace as the Prometheus object is in is used.',
    )
    ruleSelector: Optional[RuleSelector] = Field(
        None,
        description='A selector to select which PrometheusRules to mount for loading alerting/recording rules from. Until (excluding) Prometheus Operator v0.24.0 Prometheus Operator will migrate any legacy rule ConfigMaps to PrometheusRule custom resources selected by RuleSelector. Make sure it does not match any config maps that you do not want to be migrated.',
    )
    rules: Optional[Rules] = Field(
        None, description='/--rules.*/ command-line arguments.'
    )
    scrapeInterval: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(None, description='Interval between consecutive scrapes. Default: `30s`')
    scrapeTimeout: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(
        None,
        description='Number of seconds to wait for target to respond before erroring.',
    )
    secrets: Optional[List[str]] = Field(
        None,
        description='Secrets is a list of Secrets in the same namespace as the Prometheus object, which shall be mounted into the Prometheus Pods. The Secrets are mounted into /etc/prometheus/secrets/<secret-name>.',
    )
    securityContext: Optional[SecurityContextModel4] = Field(
        None,
        description='SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.',
    )
    serviceAccountName: Optional[str] = Field(
        None,
        description='ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.',
    )
    serviceMonitorNamespaceSelector: Optional[ServiceMonitorNamespaceSelector] = Field(
        None,
        description="Namespace's labels to match for ServiceMonitor discovery. If nil, only check own namespace.",
    )
    serviceMonitorSelector: Optional[ServiceMonitorSelector] = Field(
        None,
        description='ServiceMonitors to be selected for target discovery. *Deprecated:* if neither this nor podMonitorSelector are specified, configuration is unmanaged.',
    )
    sha: Optional[str] = Field(
        None,
        description="SHA of Prometheus container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.",
    )
    shards: Optional[int] = Field(
        None,
        description='EXPERIMENTAL: Number of shards to distribute targets onto. Number of replicas multiplied by shards is the total number of Pods created. Note that scaling down shards will not reshard data onto remaining instances, it must be manually moved. Increasing shards will not reshard data either but it will continue to be available from the same instances. To query globally use Thanos sidecar and Thanos querier or remote write data to a central location. Sharding is done on the content of the `__address__` target meta-label.',
    )
    storage: Optional[StorageModel] = Field(
        None, description='Storage spec to specify how storage shall be used.'
    )
    tag: Optional[str] = Field(
        None,
        description="Tag of Prometheus container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.",
    )
    thanos: Optional[Thanos] = Field(
        None,
        description='Thanos configuration allows configuring various aspects of a Prometheus server in a Thanos environment. \n This section is experimental, it may change significantly without deprecation notice in any release. \n This is experimental and may change significantly without backward compatibility in any release.',
    )
    tolerations: Optional[List[TolerationModel]] = Field(
        None, description="If specified, the pod's tolerations."
    )
    topologySpreadConstraints: Optional[List[TopologySpreadConstraintModel]] = Field(
        None, description="If specified, the pod's topology spread constraints."
    )
    version: Optional[str] = Field(
        None, description='Version of Prometheus to be deployed.'
    )
    volumeMounts: Optional[List[VolumeMountModel5]] = Field(
        None,
        description='VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the prometheus container, that are generated as a result of StorageSpec objects.',
    )
    volumes: Optional[List[VolumeModel]] = Field(
        None,
        description='Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.',
    )
    walCompression: Optional[bool] = Field(
        None,
        description='Enable compression of the write-ahead log using Snappy. This flag is only available in versions of Prometheus >= 2.11.0.',
    )
    web: Optional[Web] = Field(
        None,
        description='WebSpec defines the web command line flags when starting Prometheus.',
    )


class ConditionModel1(BaseModel):
    lastTransitionTime: datetime = Field(
        ...,
        description='lastTransitionTime is the time of the last update to the current status property.',
    )
    message: Optional[str] = Field(
        None,
        description="Human-readable message indicating details for the condition's last transition.",
    )
    reason: Optional[str] = Field(
        None, description="Reason for the condition's last transition."
    )
    status: str = Field(..., description='status of the condition.')
    type: str = Field(..., description='Type of the condition being reported.')


class ShardStatus(BaseModel):
    availableReplicas: int = Field(
        ...,
        description='Total number of available pods (ready for at least minReadySeconds) targeted by this shard.',
    )
    replicas: int = Field(
        ..., description='Total number of pods targeted by this shard.'
    )
    shardID: str = Field(..., description='Identifier of the shard.')
    unavailableReplicas: int = Field(
        ..., description='Total number of unavailable pods targeted by this shard.'
    )
    updatedReplicas: int = Field(
        ...,
        description='Total number of non-terminated pods targeted by this shard that have the desired spec.',
    )


class StatusModel2(BaseModel):
    availableReplicas: int = Field(
        ...,
        description='Total number of available pods (ready for at least minReadySeconds) targeted by this Prometheus deployment.',
    )
    conditions: Optional[List[ConditionModel1]] = Field(
        None, description='The current state of the Prometheus deployment.'
    )
    paused: bool = Field(
        ...,
        description='Represents whether any actions on the underlying managed objects are being performed. Only delete actions will be performed.',
    )
    replicas: int = Field(
        ...,
        description='Total number of non-terminated pods targeted by this Prometheus deployment (their labels match the selector).',
    )
    shardStatuses: Optional[List[ShardStatus]] = Field(
        None,
        description='The list has one entry per shard. Each entry provides a summary of the shard status.',
    )
    unavailableReplicas: int = Field(
        ...,
        description='Total number of unavailable pods targeted by this Prometheus deployment.',
    )
    updatedReplicas: int = Field(
        ...,
        description='Total number of non-terminated pods targeted by this Prometheus deployment that have the desired version spec.',
    )


class Rule(BaseModel):
    alert: Optional[str] = None
    annotations: Optional[Dict[str, str]] = None
    expr: Any
    for_: Optional[str] = Field(None, alias='for')
    labels: Optional[Dict[str, str]] = None
    record: Optional[str] = None


class GroupModel(BaseModel):
    interval: Optional[str] = None
    name: str
    partial_response_strategy: Optional[str] = None
    rules: List[Rule]


class SpecModel9(BaseModel):
    groups: Optional[List[GroupModel]] = Field(
        None, description='Content of Prometheus rule file'
    )


class CredentialsModel5(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AuthorizationModel5(BaseModel):
    credentials: Optional[CredentialsModel5] = Field(
        None,
        description="The secret's key that contains the credentials of the request",
    )
    type: Optional[str] = Field(
        None,
        description='Set the authentication type. Defaults to Bearer, Basic will cause an error',
    )


class PasswordModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class UsernameModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class BasicAuthModel4(BaseModel):
    password: Optional[PasswordModel4] = Field(
        None,
        description='The secret in the service monitor namespace that contains the password for authentication.',
    )
    username: Optional[UsernameModel4] = Field(
        None,
        description='The secret in the service monitor namespace that contains the username for authentication.',
    )


class BearerTokenSecretModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ActionModel5(Enum):
    replace = 'replace'
    keep = 'keep'
    drop = 'drop'
    hashmod = 'hashmod'
    labelmap = 'labelmap'
    labeldrop = 'labeldrop'
    labelkeep = 'labelkeep'


class MetricRelabelingModel1(BaseModel):
    action: Optional[ActionModel5] = Field(
        None,
        description="Action to perform based on regex matching. Default is 'replace'",
    )
    modulus: Optional[int] = Field(
        None, description='Modulus to take of the hash of the source label values.'
    )
    regex: Optional[str] = Field(
        None,
        description="Regular expression against which the extracted value is matched. Default is '(.*)'",
    )
    replacement: Optional[str] = Field(
        None,
        description="Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
    )
    separator: Optional[str] = Field(
        None,
        description="Separator placed between concatenated source label values. default is ';'.",
    )
    sourceLabels: Optional[List[constr(regex=r'^[a-zA-Z_][a-zA-Z0-9_]*$')]] = Field(
        None,
        description='The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.',
    )
    targetLabel: Optional[str] = Field(
        None,
        description='Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.',
    )


class ConfigMapModel23(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel23(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ClientIdModel3(BaseModel):
    configMap: Optional[ConfigMapModel23] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel23] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ClientSecretModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class Oauth2Model3(BaseModel):
    clientId: ClientIdModel3 = Field(
        ..., description='The secret or configmap containing the OAuth2 client id'
    )
    clientSecret: ClientSecretModel3 = Field(
        ..., description='The secret containing the OAuth2 client secret'
    )
    endpointParams: Optional[Dict[str, str]] = Field(
        None, description='Parameters to append to the token URL'
    )
    scopes: Optional[List[str]] = Field(
        None, description='OAuth2 scopes used for the token request'
    )
    tokenUrl: constr(min_length=1) = Field(
        ..., description='The URL to fetch the token from'
    )


class ActionModel6(Enum):
    replace = 'replace'
    keep = 'keep'
    drop = 'drop'
    hashmod = 'hashmod'
    labelmap = 'labelmap'
    labeldrop = 'labeldrop'
    labelkeep = 'labelkeep'


class RelabelingModel(BaseModel):
    action: Optional[ActionModel6] = Field(
        None,
        description="Action to perform based on regex matching. Default is 'replace'",
    )
    modulus: Optional[int] = Field(
        None, description='Modulus to take of the hash of the source label values.'
    )
    regex: Optional[str] = Field(
        None,
        description="Regular expression against which the extracted value is matched. Default is '(.*)'",
    )
    replacement: Optional[str] = Field(
        None,
        description="Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
    )
    separator: Optional[str] = Field(
        None,
        description="Separator placed between concatenated source label values. default is ';'.",
    )
    sourceLabels: Optional[List[constr(regex=r'^[a-zA-Z_][a-zA-Z0-9_]*$')]] = Field(
        None,
        description='The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.',
    )
    targetLabel: Optional[str] = Field(
        None,
        description='Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.',
    )


class ConfigMapModel24(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel24(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel6(BaseModel):
    configMap: Optional[ConfigMapModel24] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel24] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel25(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel25(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel7(BaseModel):
    configMap: Optional[ConfigMapModel25] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel25] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel7(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class TlsConfigModel6(BaseModel):
    ca: Optional[CaModel6] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    caFile: Optional[str] = Field(
        None,
        description='Path to the CA cert in the Prometheus container to use for the targets.',
    )
    cert: Optional[CertModel7] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    certFile: Optional[str] = Field(
        None,
        description='Path to the client cert file in the Prometheus container for the targets.',
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keyFile: Optional[str] = Field(
        None,
        description='Path to the client key file in the Prometheus container for the targets.',
    )
    keySecret: Optional[KeySecretModel7] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class Endpoint(BaseModel):
    authorization: Optional[AuthorizationModel5] = Field(
        None, description='Authorization section for this endpoint'
    )
    basicAuth: Optional[BasicAuthModel4] = Field(
        None,
        description='BasicAuth allow an endpoint to authenticate over basic authentication More info: https://prometheus.io/docs/operating/configuration/#endpoints',
    )
    bearerTokenFile: Optional[str] = Field(
        None, description='File to read bearer token for scraping targets.'
    )
    bearerTokenSecret: Optional[BearerTokenSecretModel1] = Field(
        None,
        description='Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the service monitor and accessible by the Prometheus Operator.',
    )
    followRedirects: Optional[bool] = Field(
        None,
        description='FollowRedirects configures whether scrape requests follow HTTP 3xx redirects.',
    )
    honorLabels: Optional[bool] = Field(
        None,
        description="HonorLabels chooses the metric's labels on collisions with target labels.",
    )
    honorTimestamps: Optional[bool] = Field(
        None,
        description='HonorTimestamps controls whether Prometheus respects the timestamps present in scraped data.',
    )
    interval: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(
        None,
        description="Interval at which metrics should be scraped If not specified Prometheus' global scrape interval is used.",
    )
    metricRelabelings: Optional[List[MetricRelabelingModel1]] = Field(
        None, description='MetricRelabelConfigs to apply to samples before ingestion.'
    )
    oauth2: Optional[Oauth2Model3] = Field(
        None,
        description='OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    params: Optional[Dict[str, List[str]]] = Field(
        None, description='Optional HTTP URL parameters'
    )
    path: Optional[str] = Field(None, description='HTTP path to scrape for metrics.')
    port: Optional[str] = Field(
        None,
        description='Name of the service port this endpoint refers to. Mutually exclusive with targetPort.',
    )
    proxyUrl: Optional[str] = Field(
        None,
        description='ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.',
    )
    relabelings: Optional[List[RelabelingModel]] = Field(
        None,
        description="RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few standard Kubernetes fields. The original scrape job's name is available via the `__tmp_prometheus_job_name` label. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
    )
    scheme: Optional[str] = Field(None, description='HTTP scheme to use for scraping.')
    scrapeTimeout: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(
        None,
        description='Timeout after which the scrape is ended If not specified, the Prometheus global scrape timeout is used unless it is less than `Interval` in which the latter is used.',
    )
    targetPort: Optional[Any] = Field(
        None,
        description='Name or number of the target port of the Pod behind the Service, the port must be specified with container port property. Mutually exclusive with port.',
    )
    tlsConfig: Optional[TlsConfigModel6] = Field(
        None, description='TLS configuration to use when scraping the endpoint'
    )


class NamespaceSelectorModel9(BaseModel):
    any: Optional[bool] = Field(
        None,
        description='Boolean describing whether all namespaces are selected in contrast to a list restricting them.',
    )
    matchNames: Optional[List[str]] = Field(
        None, description='List of namespace names to select from.'
    )


class MatchExpressionModel39(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class SelectorModel7(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel39]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class SpecModel10(BaseModel):
    endpoints: List[Endpoint] = Field(
        ..., description='A list of endpoints allowed as part of this ServiceMonitor.'
    )
    jobLabel: Optional[str] = Field(
        None,
        description="Chooses the label of the Kubernetes `Endpoints`. Its value will be used for the `job`-label's value of the created metrics. \n Default & fallback value: the name of the respective Kubernetes `Endpoint`.",
    )
    labelLimit: Optional[int] = Field(
        None,
        description='Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    labelNameLengthLimit: Optional[int] = Field(
        None,
        description='Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    labelValueLengthLimit: Optional[int] = Field(
        None,
        description='Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.',
    )
    namespaceSelector: Optional[NamespaceSelectorModel9] = Field(
        None,
        description='Selector to select which namespaces the Kubernetes Endpoints objects are discovered from.',
    )
    podTargetLabels: Optional[List[str]] = Field(
        None,
        description='PodTargetLabels transfers labels on the Kubernetes `Pod` onto the created metrics.',
    )
    sampleLimit: Optional[int] = Field(
        None,
        description='SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.',
    )
    selector: SelectorModel7 = Field(
        ..., description='Selector to select Endpoints objects.'
    )
    targetLabels: Optional[List[str]] = Field(
        None,
        description='TargetLabels transfers labels from the Kubernetes `Service` onto the created metrics.',
    )
    targetLimit: Optional[int] = Field(
        None,
        description='TargetLimit defines a limit on the number of scraped targets that will be accepted.',
    )


class MatchExpressionModel40(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class MatchFieldModel3(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class PreferenceModel1(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel40]] = Field(
        None, description="A list of node selector requirements by node's labels."
    )
    matchFields: Optional[List[MatchFieldModel3]] = Field(
        None, description="A list of node selector requirements by node's fields."
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItemModel5(BaseModel):
    preference: PreferenceModel1 = Field(
        ...,
        description='A node selector term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.',
    )


class MatchExpressionModel41(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class MatchFieldModel4(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class NodeSelectorTermModel1(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel41]] = Field(
        None, description="A list of node selector requirements by node's labels."
    )
    matchFields: Optional[List[MatchFieldModel4]] = Field(
        None, description="A list of node selector requirements by node's fields."
    )


class RequiredDuringSchedulingIgnoredDuringExecutionModel1(BaseModel):
    nodeSelectorTerms: List[NodeSelectorTermModel1] = Field(
        ..., description='Required. A list of node selector terms. The terms are ORed.'
    )


class NodeAffinityModel1(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItemModel5]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        RequiredDuringSchedulingIgnoredDuringExecutionModel1
    ] = Field(
        None,
        description='If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.',
    )


class MatchExpressionModel42(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel9(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel42]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel43(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel10(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel43]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class PodAffinityTermModel3(BaseModel):
    labelSelector: Optional[LabelSelectorModel9] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel10] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace"',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItemModel6(BaseModel):
    podAffinityTerm: PodAffinityTermModel3 = Field(
        ...,
        description='Required. A pod affinity term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
    )


class MatchExpressionModel44(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel10(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel44]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel45(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel11(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel45]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class RequiredDuringSchedulingIgnoredDuringExecutionItemModel3(BaseModel):
    labelSelector: Optional[LabelSelectorModel10] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel11] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace"',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PodAffinityModel1(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItemModel6]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        List[RequiredDuringSchedulingIgnoredDuringExecutionItemModel3]
    ] = Field(
        None,
        description='If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
    )


class MatchExpressionModel46(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel11(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel46]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel47(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel12(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel47]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class PodAffinityTermModel4(BaseModel):
    labelSelector: Optional[LabelSelectorModel11] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel12] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace"',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItemModel7(BaseModel):
    podAffinityTerm: PodAffinityTermModel4 = Field(
        ...,
        description='Required. A pod affinity term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
    )


class MatchExpressionModel48(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel12(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel48]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel49(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel13(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel49]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class RequiredDuringSchedulingIgnoredDuringExecutionItemModel4(BaseModel):
    labelSelector: Optional[LabelSelectorModel12] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel13] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace"',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PodAntiAffinityModel1(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItemModel7]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        List[RequiredDuringSchedulingIgnoredDuringExecutionItemModel4]
    ] = Field(
        None,
        description='If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
    )


class AffinityModel1(BaseModel):
    nodeAffinity: Optional[NodeAffinityModel1] = Field(
        None, description='Describes node affinity scheduling rules for the pod.'
    )
    podAffinity: Optional[PodAffinityModel1] = Field(
        None,
        description='Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).',
    )
    podAntiAffinity: Optional[PodAntiAffinityModel1] = Field(
        None,
        description='Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).',
    )


class AlertRelabelConfigs(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AlertmanagersConfig(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ConfigMapKeyRefModel3(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class FieldRefModel7(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel7(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class SecretKeyRefModel3(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ValueFromModel3(BaseModel):
    configMapKeyRef: Optional[ConfigMapKeyRefModel3] = Field(
        None, description='Selects a key of a ConfigMap.'
    )
    fieldRef: Optional[FieldRefModel7] = Field(
        None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel7] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.',
    )
    secretKeyRef: Optional[SecretKeyRefModel3] = Field(
        None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItemModel3(BaseModel):
    name: str = Field(
        ..., description='Name of the environment variable. Must be a C_IDENTIFIER.'
    )
    value: Optional[str] = Field(
        None,
        description='Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
    )
    valueFrom: Optional[ValueFromModel3] = Field(
        None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class ConfigMapRefModel3(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap must be defined'
    )


class SecretRefModel17(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret must be defined'
    )


class EnvFromItemModel3(BaseModel):
    configMapRef: Optional[ConfigMapRefModel3] = Field(
        None, description='The ConfigMap to select from'
    )
    prefix: Optional[str] = Field(
        None,
        description='An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
    )
    secretRef: Optional[SecretRefModel17] = Field(
        None, description='The Secret to select from'
    )


class ExecModel19(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel19(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel19(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel19]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel19(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PostStartModel3(BaseModel):
    exec: Optional[ExecModel19] = Field(
        None, description='Exec specifies the action to take.'
    )
    httpGet: Optional[HttpGetModel19] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel19] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class ExecModel20(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel20(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel20(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel20]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel20(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PreStopModel3(BaseModel):
    exec: Optional[ExecModel20] = Field(
        None, description='Exec specifies the action to take.'
    )
    httpGet: Optional[HttpGetModel20] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel20] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class LifecycleModel3(BaseModel):
    postStart: Optional[PostStartModel3] = Field(
        None,
        description='PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks',
    )
    preStop: Optional[PreStopModel3] = Field(
        None,
        description="PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    )


class ExecModel21(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel11(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel21(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel21(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel21]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel21(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class LivenessProbeModel3(BaseModel):
    exec: Optional[ExecModel21] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel11] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel21] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel21] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class PortModel3(BaseModel):
    containerPort: int = Field(
        ...,
        description="Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
    )
    hostIP: Optional[str] = Field(
        None, description='What host IP to bind the external port to.'
    )
    hostPort: Optional[int] = Field(
        None,
        description='Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
    )
    name: Optional[str] = Field(
        None,
        description='If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
    )
    protocol: Optional[str] = Field(
        None,
        description='Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".',
    )


class ExecModel22(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel12(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel22(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel22(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel22]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel22(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class ReadinessProbeModel3(BaseModel):
    exec: Optional[ExecModel22] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel12] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel22] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel22] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class ResourcesModel12(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class CapabilitiesModel3(BaseModel):
    add: Optional[List[str]] = Field(None, description='Added capabilities')
    drop: Optional[List[str]] = Field(None, description='Removed capabilities')


class SeLinuxOptionsModel5(BaseModel):
    level: Optional[str] = Field(
        None, description='Level is SELinux level label that applies to the container.'
    )
    role: Optional[str] = Field(
        None, description='Role is a SELinux role label that applies to the container.'
    )
    type: Optional[str] = Field(
        None, description='Type is a SELinux type label that applies to the container.'
    )
    user: Optional[str] = Field(
        None, description='User is a SELinux user label that applies to the container.'
    )


class SeccompProfileModel5(BaseModel):
    localhostProfile: Optional[str] = Field(
        None,
        description='localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet\'s configured seccomp profile location. Must only be set if type is "Localhost".',
    )
    type: str = Field(
        ...,
        description='type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.',
    )


class WindowsOptionsModel5(BaseModel):
    gmsaCredentialSpec: Optional[str] = Field(
        None,
        description='GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
    )
    gmsaCredentialSpecName: Optional[str] = Field(
        None,
        description='GMSACredentialSpecName is the name of the GMSA credential spec to use.',
    )
    hostProcess: Optional[bool] = Field(
        None,
        description="HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
    )
    runAsUserName: Optional[str] = Field(
        None,
        description='The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )


class SecurityContextModel5(BaseModel):
    allowPrivilegeEscalation: Optional[bool] = Field(
        None,
        description='AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.',
    )
    capabilities: Optional[CapabilitiesModel3] = Field(
        None,
        description='The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.',
    )
    privileged: Optional[bool] = Field(
        None,
        description='Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.',
    )
    procMount: Optional[str] = Field(
        None,
        description='procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.',
    )
    readOnlyRootFilesystem: Optional[bool] = Field(
        None,
        description='Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsGroup: Optional[int] = Field(
        None,
        description='The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsNonRoot: Optional[bool] = Field(
        None,
        description='Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    runAsUser: Optional[int] = Field(
        None,
        description='The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seLinuxOptions: Optional[SeLinuxOptionsModel5] = Field(
        None,
        description='The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seccompProfile: Optional[SeccompProfileModel5] = Field(
        None,
        description='The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.',
    )
    windowsOptions: Optional[WindowsOptionsModel5] = Field(
        None,
        description='The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.',
    )


class ExecModel23(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel13(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel23(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel23(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel23]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel23(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class StartupProbeModel3(BaseModel):
    exec: Optional[ExecModel23] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel13] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel23] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel23] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class VolumeDeviceModel3(BaseModel):
    devicePath: str = Field(
        ...,
        description='devicePath is the path inside of the container that the device will be mapped to.',
    )
    name: str = Field(
        ...,
        description='name must match the name of a persistentVolumeClaim in the pod',
    )


class VolumeMountModel6(BaseModel):
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted.  Must not contain ':'.",
    )
    mountPropagation: Optional[str] = Field(
        None,
        description='mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
    )
    name: str = Field(..., description='This must match the Name of a Volume.')
    readOnly: Optional[bool] = Field(
        None,
        description='Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
    )
    subPath: Optional[str] = Field(
        None,
        description='Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
    )
    subPathExpr: Optional[str] = Field(
        None,
        description='Expanded path within the volume from which the container\'s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container\'s environment. Defaults to "" (volume\'s root). SubPathExpr and SubPath are mutually exclusive.',
    )


class ContainerModel1(BaseModel):
    args: Optional[List[str]] = Field(
        None,
        description='Arguments to the entrypoint. The docker image\'s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    command: Optional[List[str]] = Field(
        None,
        description='Entrypoint array. Not executed within a shell. The docker image\'s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    env: Optional[List[EnvItemModel3]] = Field(
        None,
        description='List of environment variables to set in the container. Cannot be updated.',
    )
    envFrom: Optional[List[EnvFromItemModel3]] = Field(
        None,
        description='List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
    )
    image: Optional[str] = Field(
        None,
        description='Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
    )
    imagePullPolicy: Optional[str] = Field(
        None,
        description='Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
    )
    lifecycle: Optional[LifecycleModel3] = Field(
        None,
        description='Actions that the management system should take in response to container lifecycle events. Cannot be updated.',
    )
    livenessProbe: Optional[LivenessProbeModel3] = Field(
        None,
        description='Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    name: str = Field(
        ...,
        description='Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
    )
    ports: Optional[List[PortModel3]] = Field(
        None,
        description='List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
    )
    readinessProbe: Optional[ReadinessProbeModel3] = Field(
        None,
        description='Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    resources: Optional[ResourcesModel12] = Field(
        None,
        description='Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    securityContext: Optional[SecurityContextModel5] = Field(
        None,
        description='SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/',
    )
    startupProbe: Optional[StartupProbeModel3] = Field(
        None,
        description="StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    stdin: Optional[bool] = Field(
        None,
        description='Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
    )
    stdinOnce: Optional[bool] = Field(
        None,
        description='Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
    )
    terminationMessagePath: Optional[str] = Field(
        None,
        description="Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
    )
    terminationMessagePolicy: Optional[str] = Field(
        None,
        description='Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
    )
    tty: Optional[bool] = Field(
        None,
        description="Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
    )
    volumeDevices: Optional[List[VolumeDeviceModel3]] = Field(
        None,
        description='volumeDevices is the list of block devices to be used by the container.',
    )
    volumeMounts: Optional[List[VolumeMountModel6]] = Field(
        None,
        description="Pod volumes to mount into the container's filesystem. Cannot be updated.",
    )
    workingDir: Optional[str] = Field(
        None,
        description="Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
    )


class GroupModel1(Enum):
    monitoring_coreos_com = 'monitoring.coreos.com'


class ResourceModel(Enum):
    prometheusrules = 'prometheusrules'
    servicemonitors = 'servicemonitors'
    podmonitors = 'podmonitors'
    probes = 'probes'


class ExcludedFromEnforcementItemModel(BaseModel):
    group: Optional[GroupModel1] = Field(
        None,
        description='Group of the referent. When not specified, it defaults to `monitoring.coreos.com`',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. When not set, all resources are matched.',
    )
    namespace: constr(min_length=1) = Field(
        ...,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )
    resource: ResourceModel = Field(..., description='Resource of the referent.')


class ConfigMapModel26(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel26(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CaModel7(BaseModel):
    configMap: Optional[ConfigMapModel26] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel26] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class ConfigMapModel27(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class SecretModel27(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class CertModel8(BaseModel):
    configMap: Optional[ConfigMapModel27] = Field(
        None, description='ConfigMap containing data to use for the targets.'
    )
    secret: Optional[SecretModel27] = Field(
        None, description='Secret containing data to use for the targets.'
    )


class KeySecretModel8(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class GrpcServerTlsConfigModel(BaseModel):
    ca: Optional[CaModel7] = Field(
        None, description='Struct containing the CA cert to use for the targets.'
    )
    caFile: Optional[str] = Field(
        None,
        description='Path to the CA cert in the Prometheus container to use for the targets.',
    )
    cert: Optional[CertModel8] = Field(
        None, description='Struct containing the client cert file for the targets.'
    )
    certFile: Optional[str] = Field(
        None,
        description='Path to the client cert file in the Prometheus container for the targets.',
    )
    insecureSkipVerify: Optional[bool] = Field(
        None, description='Disable target certificate validation.'
    )
    keyFile: Optional[str] = Field(
        None,
        description='Path to the client key file in the Prometheus container for the targets.',
    )
    keySecret: Optional[KeySecretModel8] = Field(
        None, description='Secret containing the client key file for the targets.'
    )
    serverName: Optional[str] = Field(
        None, description='Used to verify the hostname for the targets.'
    )


class HostAliaseModel1(BaseModel):
    hostnames: List[str] = Field(..., description='Hostnames for the above IP address.')
    ip: str = Field(..., description='IP address of the host file entry.')


class ImagePullSecretModel1(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class ConfigMapKeyRefModel4(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class FieldRefModel8(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel8(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class SecretKeyRefModel4(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ValueFromModel4(BaseModel):
    configMapKeyRef: Optional[ConfigMapKeyRefModel4] = Field(
        None, description='Selects a key of a ConfigMap.'
    )
    fieldRef: Optional[FieldRefModel8] = Field(
        None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel8] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.',
    )
    secretKeyRef: Optional[SecretKeyRefModel4] = Field(
        None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItemModel4(BaseModel):
    name: str = Field(
        ..., description='Name of the environment variable. Must be a C_IDENTIFIER.'
    )
    value: Optional[str] = Field(
        None,
        description='Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
    )
    valueFrom: Optional[ValueFromModel4] = Field(
        None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class ConfigMapRefModel4(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap must be defined'
    )


class SecretRefModel18(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret must be defined'
    )


class EnvFromItemModel4(BaseModel):
    configMapRef: Optional[ConfigMapRefModel4] = Field(
        None, description='The ConfigMap to select from'
    )
    prefix: Optional[str] = Field(
        None,
        description='An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
    )
    secretRef: Optional[SecretRefModel18] = Field(
        None, description='The Secret to select from'
    )


class ExecModel24(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel24(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel24(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel24]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel24(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PostStartModel4(BaseModel):
    exec: Optional[ExecModel24] = Field(
        None, description='Exec specifies the action to take.'
    )
    httpGet: Optional[HttpGetModel24] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel24] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class ExecModel25(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel25(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel25(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel25]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel25(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PreStopModel4(BaseModel):
    exec: Optional[ExecModel25] = Field(
        None, description='Exec specifies the action to take.'
    )
    httpGet: Optional[HttpGetModel25] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel25] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class LifecycleModel4(BaseModel):
    postStart: Optional[PostStartModel4] = Field(
        None,
        description='PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks',
    )
    preStop: Optional[PreStopModel4] = Field(
        None,
        description="PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    )


class ExecModel26(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel14(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel26(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel26(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel26]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel26(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class LivenessProbeModel4(BaseModel):
    exec: Optional[ExecModel26] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel14] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel26] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel26] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class PortModel4(BaseModel):
    containerPort: int = Field(
        ...,
        description="Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
    )
    hostIP: Optional[str] = Field(
        None, description='What host IP to bind the external port to.'
    )
    hostPort: Optional[int] = Field(
        None,
        description='Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
    )
    name: Optional[str] = Field(
        None,
        description='If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
    )
    protocol: Optional[str] = Field(
        None,
        description='Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".',
    )


class ExecModel27(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel15(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel27(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel27(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel27]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel27(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class ReadinessProbeModel4(BaseModel):
    exec: Optional[ExecModel27] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel15] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel27] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel27] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class ResourcesModel13(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class CapabilitiesModel4(BaseModel):
    add: Optional[List[str]] = Field(None, description='Added capabilities')
    drop: Optional[List[str]] = Field(None, description='Removed capabilities')


class SeLinuxOptionsModel6(BaseModel):
    level: Optional[str] = Field(
        None, description='Level is SELinux level label that applies to the container.'
    )
    role: Optional[str] = Field(
        None, description='Role is a SELinux role label that applies to the container.'
    )
    type: Optional[str] = Field(
        None, description='Type is a SELinux type label that applies to the container.'
    )
    user: Optional[str] = Field(
        None, description='User is a SELinux user label that applies to the container.'
    )


class SeccompProfileModel6(BaseModel):
    localhostProfile: Optional[str] = Field(
        None,
        description='localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet\'s configured seccomp profile location. Must only be set if type is "Localhost".',
    )
    type: str = Field(
        ...,
        description='type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.',
    )


class WindowsOptionsModel6(BaseModel):
    gmsaCredentialSpec: Optional[str] = Field(
        None,
        description='GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
    )
    gmsaCredentialSpecName: Optional[str] = Field(
        None,
        description='GMSACredentialSpecName is the name of the GMSA credential spec to use.',
    )
    hostProcess: Optional[bool] = Field(
        None,
        description="HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
    )
    runAsUserName: Optional[str] = Field(
        None,
        description='The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )


class SecurityContextModel6(BaseModel):
    allowPrivilegeEscalation: Optional[bool] = Field(
        None,
        description='AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.',
    )
    capabilities: Optional[CapabilitiesModel4] = Field(
        None,
        description='The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.',
    )
    privileged: Optional[bool] = Field(
        None,
        description='Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.',
    )
    procMount: Optional[str] = Field(
        None,
        description='procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.',
    )
    readOnlyRootFilesystem: Optional[bool] = Field(
        None,
        description='Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsGroup: Optional[int] = Field(
        None,
        description='The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsNonRoot: Optional[bool] = Field(
        None,
        description='Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    runAsUser: Optional[int] = Field(
        None,
        description='The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seLinuxOptions: Optional[SeLinuxOptionsModel6] = Field(
        None,
        description='The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seccompProfile: Optional[SeccompProfileModel6] = Field(
        None,
        description='The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.',
    )
    windowsOptions: Optional[WindowsOptionsModel6] = Field(
        None,
        description='The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.',
    )


class ExecModel28(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel16(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel28(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel28(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel28]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel28(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class StartupProbeModel4(BaseModel):
    exec: Optional[ExecModel28] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel16] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel28] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel28] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class VolumeDeviceModel4(BaseModel):
    devicePath: str = Field(
        ...,
        description='devicePath is the path inside of the container that the device will be mapped to.',
    )
    name: str = Field(
        ...,
        description='name must match the name of a persistentVolumeClaim in the pod',
    )


class VolumeMountModel7(BaseModel):
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted.  Must not contain ':'.",
    )
    mountPropagation: Optional[str] = Field(
        None,
        description='mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
    )
    name: str = Field(..., description='This must match the Name of a Volume.')
    readOnly: Optional[bool] = Field(
        None,
        description='Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
    )
    subPath: Optional[str] = Field(
        None,
        description='Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
    )
    subPathExpr: Optional[str] = Field(
        None,
        description='Expanded path within the volume from which the container\'s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container\'s environment. Defaults to "" (volume\'s root). SubPathExpr and SubPath are mutually exclusive.',
    )


class InitContainerModel1(BaseModel):
    args: Optional[List[str]] = Field(
        None,
        description='Arguments to the entrypoint. The docker image\'s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    command: Optional[List[str]] = Field(
        None,
        description='Entrypoint array. Not executed within a shell. The docker image\'s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    env: Optional[List[EnvItemModel4]] = Field(
        None,
        description='List of environment variables to set in the container. Cannot be updated.',
    )
    envFrom: Optional[List[EnvFromItemModel4]] = Field(
        None,
        description='List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
    )
    image: Optional[str] = Field(
        None,
        description='Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
    )
    imagePullPolicy: Optional[str] = Field(
        None,
        description='Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
    )
    lifecycle: Optional[LifecycleModel4] = Field(
        None,
        description='Actions that the management system should take in response to container lifecycle events. Cannot be updated.',
    )
    livenessProbe: Optional[LivenessProbeModel4] = Field(
        None,
        description='Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    name: str = Field(
        ...,
        description='Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
    )
    ports: Optional[List[PortModel4]] = Field(
        None,
        description='List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
    )
    readinessProbe: Optional[ReadinessProbeModel4] = Field(
        None,
        description='Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    resources: Optional[ResourcesModel13] = Field(
        None,
        description='Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    securityContext: Optional[SecurityContextModel6] = Field(
        None,
        description='SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/',
    )
    startupProbe: Optional[StartupProbeModel4] = Field(
        None,
        description="StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    stdin: Optional[bool] = Field(
        None,
        description='Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
    )
    stdinOnce: Optional[bool] = Field(
        None,
        description='Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
    )
    terminationMessagePath: Optional[str] = Field(
        None,
        description="Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
    )
    terminationMessagePolicy: Optional[str] = Field(
        None,
        description='Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
    )
    tty: Optional[bool] = Field(
        None,
        description="Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
    )
    volumeDevices: Optional[List[VolumeDeviceModel4]] = Field(
        None,
        description='volumeDevices is the list of block devices to be used by the container.',
    )
    volumeMounts: Optional[List[VolumeMountModel7]] = Field(
        None,
        description="Pod volumes to mount into the container's filesystem. Cannot be updated.",
    )
    workingDir: Optional[str] = Field(
        None,
        description="Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
    )


class LogFormatModel2(Enum):
    _ = ''
    logfmt = 'logfmt'
    json = 'json'


class LogLevelModel2(Enum):
    _ = ''
    debug = 'debug'
    info = 'info'
    warn = 'warn'
    error = 'error'


class ObjectStorageConfigModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class PodMetadataModel1(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description='Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
    )
    name: Optional[str] = Field(
        None,
        description='Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
    )


class PrometheusRulesExcludedFromEnforceItemModel(BaseModel):
    ruleName: str = Field(..., description='RuleNamespace - name of excluded rule')
    ruleNamespace: str = Field(
        ..., description='RuleNamespace - namespace of excluded rule'
    )


class QueryConfig(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ResourcesModel14(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class MatchExpressionModel50(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class RuleNamespaceSelectorModel(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel50]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel51(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class RuleSelectorModel(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel51]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class SeLinuxOptionsModel7(BaseModel):
    level: Optional[str] = Field(
        None, description='Level is SELinux level label that applies to the container.'
    )
    role: Optional[str] = Field(
        None, description='Role is a SELinux role label that applies to the container.'
    )
    type: Optional[str] = Field(
        None, description='Type is a SELinux type label that applies to the container.'
    )
    user: Optional[str] = Field(
        None, description='User is a SELinux user label that applies to the container.'
    )


class SeccompProfileModel7(BaseModel):
    localhostProfile: Optional[str] = Field(
        None,
        description='localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet\'s configured seccomp profile location. Must only be set if type is "Localhost".',
    )
    type: str = Field(
        ...,
        description='type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.',
    )


class SysctlModel1(BaseModel):
    name: str = Field(..., description='Name of a property to set')
    value: str = Field(..., description='Value of a property to set')


class WindowsOptionsModel7(BaseModel):
    gmsaCredentialSpec: Optional[str] = Field(
        None,
        description='GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
    )
    gmsaCredentialSpecName: Optional[str] = Field(
        None,
        description='GMSACredentialSpecName is the name of the GMSA credential spec to use.',
    )
    hostProcess: Optional[bool] = Field(
        None,
        description="HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
    )
    runAsUserName: Optional[str] = Field(
        None,
        description='The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )


class SecurityContextModel7(BaseModel):
    fsGroup: Optional[int] = Field(
        None,
        description="A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: \n 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- \n If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.",
    )
    fsGroupChangePolicy: Optional[str] = Field(
        None,
        description='fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsGroup: Optional[int] = Field(
        None,
        description='The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsNonRoot: Optional[bool] = Field(
        None,
        description='Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    runAsUser: Optional[int] = Field(
        None,
        description='The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.',
    )
    seLinuxOptions: Optional[SeLinuxOptionsModel7] = Field(
        None,
        description='The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.',
    )
    seccompProfile: Optional[SeccompProfileModel7] = Field(
        None,
        description='The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.',
    )
    supplementalGroups: Optional[List[int]] = Field(
        None,
        description="A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.",
    )
    sysctls: Optional[List[SysctlModel1]] = Field(
        None,
        description='Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.',
    )
    windowsOptions: Optional[WindowsOptionsModel7] = Field(
        None,
        description="The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.",
    )


class EmptyDirModel3(BaseModel):
    medium: Optional[str] = Field(
        None,
        description='What type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
    )
    sizeLimit: Optional[Any] = Field(
        None,
        description='Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir',
    )


class DataSourceModel5(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class DataSourceRefModel5(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class ResourcesModel15(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class MatchExpressionModel52(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class SelectorModel8(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel52]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class SpecModel11(BaseModel):
    accessModes: Optional[List[str]] = Field(
        None,
        description='AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
    )
    dataSource: Optional[DataSourceModel5] = Field(
        None,
        description='This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.',
    )
    dataSourceRef: Optional[DataSourceRefModel5] = Field(
        None,
        description='Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.',
    )
    resources: Optional[ResourcesModel15] = Field(
        None,
        description='Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources',
    )
    selector: Optional[SelectorModel8] = Field(
        None, description='A label query over volumes to consider for binding.'
    )
    storageClassName: Optional[str] = Field(
        None,
        description='Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1',
    )
    volumeMode: Optional[str] = Field(
        None,
        description='volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='VolumeName is the binding reference to the PersistentVolume backing this claim.',
    )


class VolumeClaimTemplateModel5(BaseModel):
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.',
    )
    spec: SpecModel11 = Field(
        ...,
        description='The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.',
    )


class EphemeralModel3(BaseModel):
    volumeClaimTemplate: Optional[VolumeClaimTemplateModel5] = Field(
        None,
        description='Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). \n An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. \n This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. \n Required, must not be nil.',
    )


class MetadataModel1(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description='Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels',
    )
    name: Optional[str] = Field(
        None,
        description='Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names',
    )


class DataSourceModel6(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class DataSourceRefModel6(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class ResourcesModel16(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class MatchExpressionModel53(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class SelectorModel9(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel53]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class SpecModel12(BaseModel):
    accessModes: Optional[List[str]] = Field(
        None,
        description='AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
    )
    dataSource: Optional[DataSourceModel6] = Field(
        None,
        description='This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.',
    )
    dataSourceRef: Optional[DataSourceRefModel6] = Field(
        None,
        description='Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.',
    )
    resources: Optional[ResourcesModel16] = Field(
        None,
        description='Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources',
    )
    selector: Optional[SelectorModel9] = Field(
        None, description='A label query over volumes to consider for binding.'
    )
    storageClassName: Optional[str] = Field(
        None,
        description='Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1',
    )
    volumeMode: Optional[str] = Field(
        None,
        description='volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='VolumeName is the binding reference to the PersistentVolume backing this claim.',
    )


class ConditionModel2(BaseModel):
    lastProbeTime: Optional[datetime] = Field(
        None, description='Last time we probed the condition.'
    )
    lastTransitionTime: Optional[datetime] = Field(
        None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        None,
        description='Unique, this should be a short, machine understandable string that gives the reason for condition\'s last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.',
    )
    status: str
    type: str = Field(
        ...,
        description='PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type',
    )


class StatusModel3(BaseModel):
    accessModes: Optional[List[str]] = Field(
        None,
        description='AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
    )
    allocatedResources: Optional[Dict[str, Any]] = Field(
        None,
        description='The storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.',
    )
    capacity: Optional[Dict[str, Any]] = Field(
        None, description='Represents the actual resources of the underlying volume.'
    )
    conditions: Optional[List[ConditionModel2]] = Field(
        None,
        description="Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
    )
    phase: Optional[str] = Field(
        None, description='Phase represents the current phase of PersistentVolumeClaim.'
    )
    resizeStatus: Optional[str] = Field(
        None,
        description='ResizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.',
    )


class VolumeClaimTemplateModel6(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[MetadataModel1] = Field(
        None,
        description='EmbeddedMetadata contains metadata relevant to an EmbeddedResource.',
    )
    spec: Optional[SpecModel12] = Field(
        None,
        description='Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
    )
    status: Optional[StatusModel3] = Field(
        None,
        description='Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
    )


class StorageModel1(BaseModel):
    disableMountSubPath: Optional[bool] = Field(
        None,
        description='Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.',
    )
    emptyDir: Optional[EmptyDirModel3] = Field(
        None,
        description='EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir',
    )
    ephemeral: Optional[EphemeralModel3] = Field(
        None,
        description='EphemeralVolumeSource to be used by the Prometheus StatefulSets. This is a beta field in k8s 1.21, for lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes',
    )
    volumeClaimTemplate: Optional[VolumeClaimTemplateModel6] = Field(
        None, description='A PVC spec to be used by the Prometheus StatefulSets.'
    )


class TolerationModel1(BaseModel):
    effect: Optional[str] = Field(
        None,
        description='Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
    )
    key: Optional[str] = Field(
        None,
        description='Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
    )
    operator: Optional[str] = Field(
        None,
        description="Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
    )
    tolerationSeconds: Optional[int] = Field(
        None,
        description='TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
    )
    value: Optional[str] = Field(
        None,
        description='Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
    )


class MatchExpressionModel54(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel13(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel54]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class TopologySpreadConstraintModel1(BaseModel):
    labelSelector: Optional[LabelSelectorModel13] = Field(
        None,
        description='LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.',
    )
    maxSkew: int = Field(
        ...,
        description="MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
    )
    topologyKey: str = Field(
        ...,
        description='TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It\'s a required field.',
    )
    whenUnsatisfiable: str = Field(
        ...,
        description='WhenUnsatisfiable indicates how to deal with a pod if it doesn\'t satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won\'t make it *more* imbalanced. It\'s a required field.',
    )


class TracingConfigModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class AwsElasticBlockStoreModel1(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    partition: Optional[int] = Field(
        None,
        description='The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
    )
    volumeID: str = Field(
        ...,
        description='Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
    )


class AzureDiskModel1(BaseModel):
    cachingMode: Optional[str] = Field(
        None, description='Host Caching mode: None, Read Only, Read Write.'
    )
    diskName: str = Field(
        ..., description='The Name of the data disk in the blob storage'
    )
    diskURI: str = Field(..., description='The URI the data disk in the blob storage')
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    kind: Optional[str] = Field(
        None,
        description='Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )


class AzureFileModel1(BaseModel):
    readOnly: Optional[bool] = Field(
        None,
        description='Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretName: str = Field(
        ...,
        description='the name of secret that contains Azure Storage Account Name and Key',
    )
    shareName: str = Field(..., description='Share Name')


class SecretRefModel19(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class CephfsModel1(BaseModel):
    monitors: List[str] = Field(
        ...,
        description='Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    path: Optional[str] = Field(
        None,
        description='Optional: Used as the mounted root, rather than the full Ceph tree, default is /',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    secretFile: Optional[str] = Field(
        None,
        description='Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    secretRef: Optional[SecretRefModel19] = Field(
        None,
        description='Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    user: Optional[str] = Field(
        None,
        description='Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )


class SecretRefModel20(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class CinderModel1(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    secretRef: Optional[SecretRefModel20] = Field(
        None,
        description='Optional: points to a secret object containing parameters used to connect to OpenStack.',
    )
    volumeID: str = Field(
        ...,
        description='volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )


class ItemModel11(BaseModel):
    key: str = Field(..., description='The key to project.')
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class ConfigMapModel28(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    items: Optional[List[ItemModel11]] = Field(
        None,
        description="If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its keys must be defined'
    )


class NodePublishSecretRefModel1(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class CsiModel1(BaseModel):
    driver: str = Field(
        ...,
        description='Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.',
    )
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.',
    )
    nodePublishSecretRef: Optional[NodePublishSecretRefModel1] = Field(
        None,
        description='NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Specifies a read-only configuration for the volume. Defaults to false (read/write).',
    )
    volumeAttributes: Optional[Dict[str, str]] = Field(
        None,
        description="VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
    )


class FieldRefModel9(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel9(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class ItemModel12(BaseModel):
    fieldRef: Optional[FieldRefModel9] = Field(
        None,
        description='Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.',
    )
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel9] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.',
    )


class DownwardAPIModel3(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    items: Optional[List[ItemModel12]] = Field(
        None, description='Items is a list of downward API volume file'
    )


class EmptyDirModel4(BaseModel):
    medium: Optional[str] = Field(
        None,
        description='What type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
    )
    sizeLimit: Optional[Any] = Field(
        None,
        description='Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir',
    )


class DataSourceModel7(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class DataSourceRefModel7(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class ResourcesModel17(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class MatchExpressionModel55(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class SelectorModel10(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel55]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class SpecModel13(BaseModel):
    accessModes: Optional[List[str]] = Field(
        None,
        description='AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
    )
    dataSource: Optional[DataSourceModel7] = Field(
        None,
        description='This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.',
    )
    dataSourceRef: Optional[DataSourceRefModel7] = Field(
        None,
        description='Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.',
    )
    resources: Optional[ResourcesModel17] = Field(
        None,
        description='Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources',
    )
    selector: Optional[SelectorModel10] = Field(
        None, description='A label query over volumes to consider for binding.'
    )
    storageClassName: Optional[str] = Field(
        None,
        description='Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1',
    )
    volumeMode: Optional[str] = Field(
        None,
        description='volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='VolumeName is the binding reference to the PersistentVolume backing this claim.',
    )


class VolumeClaimTemplateModel7(BaseModel):
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.',
    )
    spec: SpecModel13 = Field(
        ...,
        description='The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.',
    )


class EphemeralModel4(BaseModel):
    volumeClaimTemplate: Optional[VolumeClaimTemplateModel7] = Field(
        None,
        description='Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). \n An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. \n This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. \n Required, must not be nil.',
    )


class FcModel1(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    lun: Optional[int] = Field(None, description='Optional: FC target lun number')
    readOnly: Optional[bool] = Field(
        None,
        description='Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    targetWWNs: Optional[List[str]] = Field(
        None, description='Optional: FC target worldwide names (WWNs)'
    )
    wwids: Optional[List[str]] = Field(
        None,
        description='Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.',
    )


class SecretRefModel21(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class FlexVolumeModel1(BaseModel):
    driver: str = Field(
        ..., description='Driver is the name of the driver to use for this volume.'
    )
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
    )
    options: Optional[Dict[str, str]] = Field(
        None, description='Optional: Extra command options if any.'
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretRef: Optional[SecretRefModel21] = Field(
        None,
        description='Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.',
    )


class FlockerModel1(BaseModel):
    datasetName: Optional[str] = Field(
        None,
        description='Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated',
    )
    datasetUUID: Optional[str] = Field(
        None,
        description='UUID of the dataset. This is unique identifier of a Flocker dataset',
    )


class GcePersistentDiskModel1(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    partition: Optional[int] = Field(
        None,
        description='The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )
    pdName: str = Field(
        ...,
        description='Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )


class GitRepoModel1(BaseModel):
    directory: Optional[str] = Field(
        None,
        description="Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
    )
    repository: str = Field(..., description='Repository URL')
    revision: Optional[str] = Field(
        None, description='Commit hash for the specified revision.'
    )


class GlusterfsModel1(BaseModel):
    endpoints: str = Field(
        ...,
        description='EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
    )
    path: str = Field(
        ...,
        description='Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
    )


class HostPathModel1(BaseModel):
    path: str = Field(
        ...,
        description='Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
    )
    type: Optional[str] = Field(
        None,
        description='Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
    )


class SecretRefModel22(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class IscsiModel1(BaseModel):
    chapAuthDiscovery: Optional[bool] = Field(
        None, description='whether support iSCSI Discovery CHAP authentication'
    )
    chapAuthSession: Optional[bool] = Field(
        None, description='whether support iSCSI Session CHAP authentication'
    )
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    initiatorName: Optional[str] = Field(
        None,
        description='Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.',
    )
    iqn: str = Field(..., description='Target iSCSI Qualified Name.')
    iscsiInterface: Optional[str] = Field(
        None,
        description="iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
    )
    lun: int = Field(..., description='iSCSI Target Lun number.')
    portals: Optional[List[str]] = Field(
        None,
        description='iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.',
    )
    secretRef: Optional[SecretRefModel22] = Field(
        None, description='CHAP Secret for iSCSI target and initiator authentication'
    )
    targetPortal: str = Field(
        ...,
        description='iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
    )


class NfsModel1(BaseModel):
    path: str = Field(
        ...,
        description='Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
    )
    server: str = Field(
        ...,
        description='Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
    )


class PersistentVolumeClaimModel1(BaseModel):
    claimName: str = Field(
        ...,
        description='ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Will force the ReadOnly setting in VolumeMounts. Default false.',
    )


class PhotonPersistentDiskModel1(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    pdID: str = Field(
        ..., description='ID that identifies Photon Controller persistent disk'
    )


class PortworxVolumeModel1(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    volumeID: str = Field(
        ..., description='VolumeID uniquely identifies a Portworx volume'
    )


class ItemModel13(BaseModel):
    key: str = Field(..., description='The key to project.')
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class ConfigMapModel29(BaseModel):
    items: Optional[List[ItemModel13]] = Field(
        None,
        description="If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its keys must be defined'
    )


class FieldRefModel10(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel10(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class ItemModel14(BaseModel):
    fieldRef: Optional[FieldRefModel10] = Field(
        None,
        description='Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.',
    )
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel10] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.',
    )


class DownwardAPIModel4(BaseModel):
    items: Optional[List[ItemModel14]] = Field(
        None, description='Items is a list of DownwardAPIVolume file'
    )


class ItemModel15(BaseModel):
    key: str = Field(..., description='The key to project.')
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class SecretModel28(BaseModel):
    items: Optional[List[ItemModel15]] = Field(
        None,
        description="If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ServiceAccountTokenModel1(BaseModel):
    audience: Optional[str] = Field(
        None,
        description='Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.',
    )
    expirationSeconds: Optional[int] = Field(
        None,
        description='ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.',
    )
    path: str = Field(
        ...,
        description='Path is the path relative to the mount point of the file to project the token into.',
    )


class SourceModel1(BaseModel):
    configMap: Optional[ConfigMapModel29] = Field(
        None, description='information about the configMap data to project'
    )
    downwardAPI: Optional[DownwardAPIModel4] = Field(
        None, description='information about the downwardAPI data to project'
    )
    secret: Optional[SecretModel28] = Field(
        None, description='information about the secret data to project'
    )
    serviceAccountToken: Optional[ServiceAccountTokenModel1] = Field(
        None, description='information about the serviceAccountToken data to project'
    )


class ProjectedModel1(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    sources: Optional[List[SourceModel1]] = Field(
        None, description='list of volume projections'
    )


class QuobyteModel1(BaseModel):
    group: Optional[str] = Field(
        None, description='Group to map volume access to Default is no group'
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.',
    )
    registry: str = Field(
        ...,
        description='Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes',
    )
    tenant: Optional[str] = Field(
        None,
        description='Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin',
    )
    user: Optional[str] = Field(
        None, description='User to map volume access to Defaults to serivceaccount user'
    )
    volume: str = Field(
        ...,
        description='Volume is a string that references an already created Quobyte volume by name.',
    )


class SecretRefModel23(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class RbdModel1(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    image: str = Field(
        ...,
        description='The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    keyring: Optional[str] = Field(
        None,
        description='Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    monitors: List[str] = Field(
        ...,
        description='A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    pool: Optional[str] = Field(
        None,
        description='The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    secretRef: Optional[SecretRefModel23] = Field(
        None,
        description='SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    user: Optional[str] = Field(
        None,
        description='The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )


class SecretRefModel24(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class ScaleIOModel1(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".',
    )
    gateway: str = Field(
        ..., description='The host address of the ScaleIO API Gateway.'
    )
    protectionDomain: Optional[str] = Field(
        None,
        description='The name of the ScaleIO Protection Domain for the configured storage.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretRef: SecretRefModel24 = Field(
        ...,
        description='SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.',
    )
    sslEnabled: Optional[bool] = Field(
        None,
        description='Flag to enable/disable SSL communication with Gateway, default false',
    )
    storageMode: Optional[str] = Field(
        None,
        description='Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.',
    )
    storagePool: Optional[str] = Field(
        None,
        description='The ScaleIO Storage Pool associated with the protection domain.',
    )
    system: str = Field(
        ..., description='The name of the storage system as configured in ScaleIO.'
    )
    volumeName: Optional[str] = Field(
        None,
        description='The name of a volume already created in the ScaleIO system that is associated with this volume source.',
    )


class ItemModel16(BaseModel):
    key: str = Field(..., description='The key to project.')
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class SecretModel29(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    items: Optional[List[ItemModel16]] = Field(
        None,
        description="If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its keys must be defined'
    )
    secretName: Optional[str] = Field(
        None,
        description="Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
    )


class SecretRefModel25(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class StorageosModel1(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretRef: Optional[SecretRefModel25] = Field(
        None,
        description='SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.',
    )
    volumeNamespace: Optional[str] = Field(
        None,
        description='VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod\'s namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.',
    )


class VsphereVolumeModel1(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    storagePolicyID: Optional[str] = Field(
        None,
        description='Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.',
    )
    storagePolicyName: Optional[str] = Field(
        None, description='Storage Policy Based Management (SPBM) profile name.'
    )
    volumePath: str = Field(..., description='Path that identifies vSphere volume vmdk')


class VolumeModel1(BaseModel):
    awsElasticBlockStore: Optional[AwsElasticBlockStoreModel1] = Field(
        None,
        description="AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    )
    azureDisk: Optional[AzureDiskModel1] = Field(
        None,
        description='AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.',
    )
    azureFile: Optional[AzureFileModel1] = Field(
        None,
        description='AzureFile represents an Azure File Service mount on the host and bind mount to the pod.',
    )
    cephfs: Optional[CephfsModel1] = Field(
        None,
        description="CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
    )
    cinder: Optional[CinderModel1] = Field(
        None,
        description='Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    configMap: Optional[ConfigMapModel28] = Field(
        None,
        description='ConfigMap represents a configMap that should populate this volume',
    )
    csi: Optional[CsiModel1] = Field(
        None,
        description='CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).',
    )
    downwardAPI: Optional[DownwardAPIModel3] = Field(
        None,
        description='DownwardAPI represents downward API about the pod that should populate this volume',
    )
    emptyDir: Optional[EmptyDirModel4] = Field(
        None,
        description="EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    )
    ephemeral: Optional[EphemeralModel4] = Field(
        None,
        description="Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. \n Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). \n Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. \n Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. \n A pod can use both types of ephemeral volumes and persistent volumes at the same time.",
    )
    fc: Optional[FcModel1] = Field(
        None,
        description="FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
    )
    flexVolume: Optional[FlexVolumeModel1] = Field(
        None,
        description='FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.',
    )
    flocker: Optional[FlockerModel1] = Field(
        None,
        description="Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
    )
    gcePersistentDisk: Optional[GcePersistentDiskModel1] = Field(
        None,
        description="GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    )
    gitRepo: Optional[GitRepoModel1] = Field(
        None,
        description="GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
    )
    glusterfs: Optional[GlusterfsModel1] = Field(
        None,
        description="Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
    )
    hostPath: Optional[HostPathModel1] = Field(
        None,
        description='HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.',
    )
    iscsi: Optional[IscsiModel1] = Field(
        None,
        description="ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
    )
    name: str = Field(
        ...,
        description="Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    nfs: Optional[NfsModel1] = Field(
        None,
        description="NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    )
    persistentVolumeClaim: Optional[PersistentVolumeClaimModel1] = Field(
        None,
        description='PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
    )
    photonPersistentDisk: Optional[PhotonPersistentDiskModel1] = Field(
        None,
        description='PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine',
    )
    portworxVolume: Optional[PortworxVolumeModel1] = Field(
        None,
        description='PortworxVolume represents a portworx volume attached and mounted on kubelets host machine',
    )
    projected: Optional[ProjectedModel1] = Field(
        None,
        description='Items for all in one resources secrets, configmaps, and downward API',
    )
    quobyte: Optional[QuobyteModel1] = Field(
        None,
        description="Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
    )
    rbd: Optional[RbdModel1] = Field(
        None,
        description="RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
    )
    scaleIO: Optional[ScaleIOModel1] = Field(
        None,
        description='ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.',
    )
    secret: Optional[SecretModel29] = Field(
        None,
        description='Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret',
    )
    storageos: Optional[StorageosModel1] = Field(
        None,
        description='StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.',
    )
    vsphereVolume: Optional[VsphereVolumeModel1] = Field(
        None,
        description='VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine',
    )


class SpecModel14(BaseModel):
    affinity: Optional[AffinityModel1] = Field(
        None, description="If specified, the pod's scheduling constraints."
    )
    alertDropLabels: Optional[List[str]] = Field(
        None,
        description='AlertDropLabels configure the label names which should be dropped in ThanosRuler alerts. The replica label `thanos_ruler_replica` will always be dropped in alerts.',
    )
    alertQueryUrl: Optional[str] = Field(
        None,
        description="The external Query URL the Thanos Ruler will set in the 'Source' field of all alerts. Maps to the '--alert.query-url' CLI arg.",
    )
    alertRelabelConfigFile: Optional[str] = Field(
        None,
        description='AlertRelabelConfigFile specifies the path of the alert relabeling configuration file. When used alongside with AlertRelabelConfigs, alertRelabelConfigFile takes precedence.',
    )
    alertRelabelConfigs: Optional[AlertRelabelConfigs] = Field(
        None,
        description='AlertRelabelConfigs configures alert relabeling in ThanosRuler. Alert relabel configurations must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs Alternative to AlertRelabelConfigFile, and lower order priority.',
    )
    alertmanagersConfig: Optional[AlertmanagersConfig] = Field(
        None,
        description='Define configuration for connecting to alertmanager.  Only available with thanos v0.10.0 and higher.  Maps to the `alertmanagers.config` arg.',
    )
    alertmanagersUrl: Optional[List[str]] = Field(
        None,
        description='Define URLs to send alerts to Alertmanager.  For Thanos v0.10.0 and higher, AlertManagersConfig should be used instead.  Note: this field will be ignored if AlertManagersConfig is specified. Maps to the `alertmanagers.url` arg.',
    )
    containers: Optional[List[ContainerModel1]] = Field(
        None,
        description='Containers allows injecting additional containers or modifying operator generated containers. This can be used to allow adding an authentication proxy to a ThanosRuler pod or to change the behavior of an operator generated container. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `thanos-ruler` and `config-reloader`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.',
    )
    enforcedNamespaceLabel: Optional[str] = Field(
        None,
        description='EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert and metric that is user created. The label value will always be the namespace of the object that is being created.',
    )
    evaluationInterval: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(None, description='Interval between consecutive evaluations.')
    excludedFromEnforcement: Optional[List[ExcludedFromEnforcementItemModel]] = Field(
        None,
        description='List of references to PrometheusRule objects to be excluded from enforcing a namespace label of origin. Applies only if enforcedNamespaceLabel set to true.',
    )
    externalPrefix: Optional[str] = Field(
        None,
        description='The external URL the Thanos Ruler instances will be available under. This is necessary to generate correct URLs. This is necessary if Thanos Ruler is not served from root of a DNS name.',
    )
    grpcServerTlsConfig: Optional[GrpcServerTlsConfigModel] = Field(
        None,
        description="GRPCServerTLSConfig configures the gRPC server from which Thanos Querier reads recorded rule data. Note: Currently only the CAFile, CertFile, and KeyFile fields are supported. Maps to the '--grpc-server-tls-*' CLI args.",
    )
    hostAliases: Optional[List[HostAliaseModel1]] = Field(
        None, description="Pods' hostAliases configuration"
    )
    image: Optional[str] = Field(None, description='Thanos container image URL.')
    imagePullSecrets: Optional[List[ImagePullSecretModel1]] = Field(
        None,
        description='An optional list of references to secrets in the same namespace to use for pulling thanos images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod',
    )
    initContainers: Optional[List[InitContainerModel1]] = Field(
        None,
        description='InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the ThanosRuler configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description="Labels configure the external label pairs to ThanosRuler. A default replica label `thanos_ruler_replica` will be always added  as a label with the value of the pod's name and it will be dropped in the alerts.",
    )
    listenLocal: Optional[bool] = Field(
        None,
        description='ListenLocal makes the Thanos ruler listen on loopback, so that it does not bind against the Pod IP.',
    )
    logFormat: Optional[LogFormatModel2] = Field(
        None, description='Log format for ThanosRuler to be configured with.'
    )
    logLevel: Optional[LogLevelModel2] = Field(
        None, description='Log level for ThanosRuler to be configured with.'
    )
    minReadySeconds: Optional[int] = Field(
        None,
        description='Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field and requires enabling StatefulSetMinReadySeconds feature gate.',
    )
    nodeSelector: Optional[Dict[str, str]] = Field(
        None, description='Define which Nodes the Pods are scheduled on.'
    )
    objectStorageConfig: Optional[ObjectStorageConfigModel] = Field(
        None,
        description='ObjectStorageConfig configures object storage in Thanos. Alternative to ObjectStorageConfigFile, and lower order priority.',
    )
    objectStorageConfigFile: Optional[str] = Field(
        None,
        description='ObjectStorageConfigFile specifies the path of the object storage configuration file. When used alongside with ObjectStorageConfig, ObjectStorageConfigFile takes precedence.',
    )
    paused: Optional[bool] = Field(
        None,
        description='When a ThanosRuler deployment is paused, no actions except for deletion will be performed on the underlying objects.',
    )
    podMetadata: Optional[PodMetadataModel1] = Field(
        None,
        description='PodMetadata contains Labels and Annotations gets propagated to the thanos ruler pods.',
    )
    portName: Optional[str] = Field(
        None,
        description='Port name used for the pods and governing service. This defaults to web',
    )
    priorityClassName: Optional[str] = Field(
        None, description='Priority class assigned to the Pods'
    )
    prometheusRulesExcludedFromEnforce: Optional[
        List[PrometheusRulesExcludedFromEnforceItemModel]
    ] = Field(
        None,
        description='PrometheusRulesExcludedFromEnforce - list of Prometheus rules to be excluded from enforcing of adding namespace labels. Works only if enforcedNamespaceLabel set to true. Make sure both ruleNamespace and ruleName are set for each pair Deprecated: use excludedFromEnforcement instead.',
    )
    queryConfig: Optional[QueryConfig] = Field(
        None,
        description='Define configuration for connecting to thanos query instances. If this is defined, the QueryEndpoints field will be ignored. Maps to the `query.config` CLI argument. Only available with thanos v0.11.0 and higher.',
    )
    queryEndpoints: Optional[List[str]] = Field(
        None,
        description='QueryEndpoints defines Thanos querier endpoints from which to query metrics. Maps to the --query flag of thanos ruler.',
    )
    replicas: Optional[int] = Field(
        None, description='Number of thanos ruler instances to deploy.'
    )
    resources: Optional[ResourcesModel14] = Field(
        None,
        description='Resources defines the resource requirements for single Pods. If not provided, no requests/limits will be set',
    )
    retention: Optional[
        constr(
            regex=r'^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$'
        )
    ] = Field(
        None,
        description="Time duration ThanosRuler shall retain data for. Default is '24h', and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).",
    )
    routePrefix: Optional[str] = Field(
        None,
        description='The route prefix ThanosRuler registers HTTP handlers for. This allows thanos UI to be served on a sub-path.',
    )
    ruleNamespaceSelector: Optional[RuleNamespaceSelectorModel] = Field(
        None,
        description='Namespaces to be selected for Rules discovery. If unspecified, only the same namespace as the ThanosRuler object is in is used.',
    )
    ruleSelector: Optional[RuleSelectorModel] = Field(
        None,
        description='A label selector to select which PrometheusRules to mount for alerting and recording.',
    )
    securityContext: Optional[SecurityContextModel7] = Field(
        None,
        description='SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.',
    )
    serviceAccountName: Optional[str] = Field(
        None,
        description='ServiceAccountName is the name of the ServiceAccount to use to run the Thanos Ruler Pods.',
    )
    storage: Optional[StorageModel1] = Field(
        None, description='Storage spec to specify how storage shall be used.'
    )
    tolerations: Optional[List[TolerationModel1]] = Field(
        None, description="If specified, the pod's tolerations."
    )
    topologySpreadConstraints: Optional[List[TopologySpreadConstraintModel1]] = Field(
        None, description="If specified, the pod's topology spread constraints."
    )
    tracingConfig: Optional[TracingConfigModel] = Field(
        None,
        description='TracingConfig configures tracing in Thanos. This is an experimental feature, it may change in any upcoming release in a breaking way.',
    )
    volumes: Optional[List[VolumeModel1]] = Field(
        None,
        description='Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.',
    )


class StatusModel4(BaseModel):
    availableReplicas: int = Field(
        ...,
        description='Total number of available pods (ready for at least minReadySeconds) targeted by this ThanosRuler deployment.',
    )
    paused: bool = Field(
        ...,
        description='Represents whether any actions on the underlying managed objects are being performed. Only delete actions will be performed.',
    )
    replicas: int = Field(
        ...,
        description='Total number of non-terminated pods targeted by this ThanosRuler deployment (their labels match the selector).',
    )
    unavailableReplicas: int = Field(
        ...,
        description='Total number of unavailable pods targeted by this ThanosRuler deployment.',
    )
    updatedReplicas: int = Field(
        ...,
        description='Total number of non-terminated pods targeted by this ThanosRuler deployment that have the desired version spec.',
    )


class AlertmanagerModel(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel2 = Field(
        ...,
        description='Specification of the desired behavior of the Alertmanager cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status',
    )
    status: Optional[StatusModel] = Field(
        None,
        description='Most recent observed status of the Alertmanager cluster. Read-only. Not included when requesting from the apiserver, only from the Prometheus Operator API itself. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status',
    )


class AlertmanagerList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[AlertmanagerModel] = Field(
        ...,
        description='List of alertmanagers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class PodMonitor(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel3 = Field(
        ...,
        description='Specification of desired Pod selection for target discovery by Prometheus.',
    )


class PodMonitorList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[PodMonitor] = Field(
        ...,
        description='List of podmonitors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Probe(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel4 = Field(
        ...,
        description='Specification of desired Ingress selection for target discovery by Prometheus.',
    )


class ProbeList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Probe] = Field(
        ...,
        description='List of probes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Prometheus(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel8 = Field(
        ...,
        description='Specification of the desired behavior of the Prometheus cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status',
    )
    status: Optional[StatusModel2] = Field(
        None,
        description='Most recent observed status of the Prometheus cluster. Read-only. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status',
    )


class PrometheusList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Prometheus] = Field(
        ...,
        description='List of prometheuses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class PrometheusRule(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel9 = Field(
        ...,
        description='Specification of desired alerting rule definitions for Prometheus.',
    )


class PrometheusRuleList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[PrometheusRule] = Field(
        ...,
        description='List of prometheusrules. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class ServiceMonitor(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel10 = Field(
        ...,
        description='Specification of desired Service selection for target discovery by Prometheus.',
    )


class ServiceMonitorList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ServiceMonitor] = Field(
        ...,
        description='List of servicemonitors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class ThanosRuler(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel14 = Field(
        ...,
        description='Specification of the desired behavior of the ThanosRuler cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status',
    )
    status: Optional[StatusModel4] = Field(
        None,
        description='Most recent observed status of the ThanosRuler cluster. Read-only. Not included when requesting from the apiserver, only from the ThanosRuler Operator API itself. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status',
    )


class ThanosRulerList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ThanosRuler] = Field(
        ...,
        description='List of thanosrulers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
