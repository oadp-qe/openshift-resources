# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, conint, constr

from ....io.k8s.apimachinery.pkg.apis.meta import v1


class Toleration(BaseModel):
    effect: Optional[str] = Field(
        None,
        description='Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
    )
    key: Optional[str] = Field(
        None,
        description='Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
    )
    operator: Optional[str] = Field(
        None,
        description="Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
    )
    tolerationSeconds: Optional[int] = Field(
        None,
        description='TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
    )
    value: Optional[str] = Field(
        None,
        description='Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
    )


class GrpcPodConfig(BaseModel):
    nodeSelector: Optional[Dict[str, str]] = Field(
        None,
        description="NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.",
    )
    priorityClassName: Optional[str] = Field(
        None,
        description="If specified, indicates the pod's priority. If not specified, the pod priority will be default or zero if there is no default.",
    )
    tolerations: Optional[List[Toleration]] = Field(
        None, description="Tolerations are the catalog source's pod's tolerations."
    )


class Icon(BaseModel):
    base64data: str
    mediatype: str


class RegistryPoll(BaseModel):
    interval: Optional[str] = Field(
        None,
        description='Interval is used to determine the time interval between checks of the latest catalog source version. The catalog operator polls to see if a new version of the catalog source is available. If available, the latest image is pulled and gRPC traffic is directed to the latest catalog source.',
    )


class UpdateStrategy(BaseModel):
    registryPoll: Optional[RegistryPoll] = None


class Spec(BaseModel):
    address: Optional[str] = Field(
        None,
        description='Address is a host that OLM can use to connect to a pre-existing registry. Format: <registry-host or ip>:<port> Only used when SourceType = SourceTypeGrpc. Ignored when the Image field is set.',
    )
    configMap: Optional[str] = Field(
        None,
        description='ConfigMap is the name of the ConfigMap to be used to back a configmap-server registry. Only used when SourceType = SourceTypeConfigmap or SourceTypeInternal.',
    )
    description: Optional[str] = None
    displayName: Optional[str] = Field(None, description='Metadata')
    grpcPodConfig: Optional[GrpcPodConfig] = Field(
        None,
        description='GrpcPodConfig exposes different overrides for the pod spec of the CatalogSource Pod. Only used when SourceType = SourceTypeGrpc and Image is set.',
    )
    icon: Optional[Icon] = None
    image: Optional[str] = Field(
        None,
        description='Image is an operator-registry container image to instantiate a registry-server with. Only used when SourceType = SourceTypeGrpc. If present, the address field is ignored.',
    )
    priority: Optional[int] = Field(
        None,
        description='Priority field assigns a weight to the catalog source to prioritize them so that it can be consumed by the dependency resolver. Usage: Higher weight indicates that this catalog source is preferred over lower weighted catalog sources during dependency resolution. The range of the priority value can go from positive to negative in the range of int32. The default value to a catalog source with unassigned priority would be 0. The catalog source with the same priority values will be ranked lexicographically based on its name.',
    )
    publisher: Optional[str] = None
    secrets: Optional[List[str]] = Field(
        None,
        description='Secrets represent set of secrets that can be used to access the contents of the catalog. It is best to keep this list small, since each will need to be tried for every catalog entry.',
    )
    sourceType: str = Field(..., description='SourceType is the type of source')
    updateStrategy: Optional[UpdateStrategy] = Field(
        None,
        description='UpdateStrategy defines how updated catalog source images can be discovered Consists of an interval that defines polling duration and an embedded strategy type',
    )


class Status(Enum):
    True_ = 'True'
    False_ = 'False'
    Unknown = 'Unknown'


class Condition(BaseModel):
    lastTransitionTime: datetime = Field(
        ...,
        description='lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.',
    )
    message: constr(max_length=32768) = Field(
        ...,
        description='message is a human readable message indicating details about the transition. This may be an empty string.',
    )
    observedGeneration: Optional[conint(ge=0)] = Field(
        None,
        description='observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.',
    )
    reason: constr(
        regex=r'^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$', min_length=1, max_length=1024
    ) = Field(
        ...,
        description="reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
    )
    status: Status = Field(
        ..., description='status of the condition, one of True, False, Unknown.'
    )
    type: constr(
        regex=r'^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$',
        max_length=316,
    ) = Field(
        ...,
        description='type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)',
    )


class ConfigMapReference(BaseModel):
    lastUpdateTime: Optional[datetime] = None
    name: str
    namespace: str
    resourceVersion: Optional[str] = None
    uid: Optional[str] = Field(
        None,
        description="UID is a type that holds unique ID values, including UUIDs.  Because we don't ONLY use UUIDs, this is an alias to string.  Being a type captures intent and helps make sure that UIDs and names do not get conflated.",
    )


class ConnectionState(BaseModel):
    address: Optional[str] = None
    lastConnect: Optional[datetime] = None
    lastObservedState: str


class RegistryService(BaseModel):
    createdAt: Optional[datetime] = None
    port: Optional[str] = None
    protocol: Optional[str] = None
    serviceName: Optional[str] = None
    serviceNamespace: Optional[str] = None


class StatusModel(BaseModel):
    conditions: Optional[List[Condition]] = Field(
        None,
        description='Represents the state of a CatalogSource. Note that Message and Reason represent the original status information, which may be migrated to be conditions based in the future. Any new features introduced will use conditions.',
    )
    configMapReference: Optional[ConfigMapReference] = None
    connectionState: Optional[ConnectionState] = None
    latestImageRegistryPoll: Optional[datetime] = Field(
        None,
        description='The last time the CatalogSource image registry has been polled to ensure the image is up-to-date',
    )
    message: Optional[str] = Field(
        None,
        description='A human readable message indicating details about why the CatalogSource is in this condition.',
    )
    reason: Optional[str] = Field(
        None,
        description='Reason is the reason the CatalogSource was transitioned to its current state.',
    )
    registryService: Optional[RegistryService] = None


class ActionDescriptor(BaseModel):
    description: Optional[str] = None
    displayName: Optional[str] = None
    path: str
    value: Optional[str] = Field(
        None,
        description='RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.',
    )
    x_descriptors: Optional[List[str]] = Field(None, alias='x-descriptors')


class Resource(BaseModel):
    kind: str
    name: str
    version: str


class SpecDescriptor(BaseModel):
    description: Optional[str] = None
    displayName: Optional[str] = None
    path: str
    value: Optional[str] = Field(
        None,
        description='RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.',
    )
    x_descriptors: Optional[List[str]] = Field(None, alias='x-descriptors')


class StatusDescriptor(BaseModel):
    description: Optional[str] = None
    displayName: Optional[str] = None
    path: str
    value: Optional[str] = Field(
        None,
        description='RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.',
    )
    x_descriptors: Optional[List[str]] = Field(None, alias='x-descriptors')


class OwnedItem(BaseModel):
    actionDescriptors: Optional[List[ActionDescriptor]] = None
    containerPort: Optional[int] = None
    deploymentName: Optional[str] = None
    description: Optional[str] = None
    displayName: Optional[str] = None
    group: str
    kind: str
    name: str
    resources: Optional[List[Resource]] = None
    specDescriptors: Optional[List[SpecDescriptor]] = None
    statusDescriptors: Optional[List[StatusDescriptor]] = None
    version: str


class ActionDescriptorModel(BaseModel):
    description: Optional[str] = None
    displayName: Optional[str] = None
    path: str
    value: Optional[str] = Field(
        None,
        description='RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.',
    )
    x_descriptors: Optional[List[str]] = Field(None, alias='x-descriptors')


class ResourceModel(BaseModel):
    kind: str
    name: str
    version: str


class SpecDescriptorModel(BaseModel):
    description: Optional[str] = None
    displayName: Optional[str] = None
    path: str
    value: Optional[str] = Field(
        None,
        description='RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.',
    )
    x_descriptors: Optional[List[str]] = Field(None, alias='x-descriptors')


class StatusDescriptorModel(BaseModel):
    description: Optional[str] = None
    displayName: Optional[str] = None
    path: str
    value: Optional[str] = Field(
        None,
        description='RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.',
    )
    x_descriptors: Optional[List[str]] = Field(None, alias='x-descriptors')


class RequiredItem(BaseModel):
    actionDescriptors: Optional[List[ActionDescriptorModel]] = None
    containerPort: Optional[int] = None
    deploymentName: Optional[str] = None
    description: Optional[str] = None
    displayName: Optional[str] = None
    group: str
    kind: str
    name: str
    resources: Optional[List[ResourceModel]] = None
    specDescriptors: Optional[List[SpecDescriptorModel]] = None
    statusDescriptors: Optional[List[StatusDescriptorModel]] = None
    version: str


class Apiservicedefinitions(BaseModel):
    owned: Optional[List[OwnedItem]] = None
    required: Optional[List[RequiredItem]] = None


class Cleanup(BaseModel):
    enabled: bool


class ActionDescriptorModel1(BaseModel):
    description: Optional[str] = None
    displayName: Optional[str] = None
    path: str
    value: Optional[str] = Field(
        None,
        description='RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.',
    )
    x_descriptors: Optional[List[str]] = Field(None, alias='x-descriptors')


class ResourceModel1(BaseModel):
    kind: str
    name: str
    version: str


class SpecDescriptorModel1(BaseModel):
    description: Optional[str] = None
    displayName: Optional[str] = None
    path: str
    value: Optional[str] = Field(
        None,
        description='RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.',
    )
    x_descriptors: Optional[List[str]] = Field(None, alias='x-descriptors')


class StatusDescriptorModel1(BaseModel):
    description: Optional[str] = None
    displayName: Optional[str] = None
    path: str
    value: Optional[str] = Field(
        None,
        description='RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.',
    )
    x_descriptors: Optional[List[str]] = Field(None, alias='x-descriptors')


class OwnedItemModel(BaseModel):
    actionDescriptors: Optional[List[ActionDescriptorModel1]] = None
    description: Optional[str] = None
    displayName: Optional[str] = None
    kind: str
    name: str
    resources: Optional[List[ResourceModel1]] = None
    specDescriptors: Optional[List[SpecDescriptorModel1]] = None
    statusDescriptors: Optional[List[StatusDescriptorModel1]] = None
    version: str


class ActionDescriptorModel2(BaseModel):
    description: Optional[str] = None
    displayName: Optional[str] = None
    path: str
    value: Optional[str] = Field(
        None,
        description='RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.',
    )
    x_descriptors: Optional[List[str]] = Field(None, alias='x-descriptors')


class ResourceModel2(BaseModel):
    kind: str
    name: str
    version: str


class SpecDescriptorModel2(BaseModel):
    description: Optional[str] = None
    displayName: Optional[str] = None
    path: str
    value: Optional[str] = Field(
        None,
        description='RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.',
    )
    x_descriptors: Optional[List[str]] = Field(None, alias='x-descriptors')


class StatusDescriptorModel2(BaseModel):
    description: Optional[str] = None
    displayName: Optional[str] = None
    path: str
    value: Optional[str] = Field(
        None,
        description='RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.',
    )
    x_descriptors: Optional[List[str]] = Field(None, alias='x-descriptors')


class RequiredItemModel(BaseModel):
    actionDescriptors: Optional[List[ActionDescriptorModel2]] = None
    description: Optional[str] = None
    displayName: Optional[str] = None
    kind: str
    name: str
    resources: Optional[List[ResourceModel2]] = None
    specDescriptors: Optional[List[SpecDescriptorModel2]] = None
    statusDescriptors: Optional[List[StatusDescriptorModel2]] = None
    version: str


class Customresourcedefinitions(BaseModel):
    owned: Optional[List[OwnedItemModel]] = None
    required: Optional[List[RequiredItemModel]] = None


class IconItem(BaseModel):
    base64data: str
    mediatype: str


class Rule(BaseModel):
    apiGroups: Optional[List[str]] = Field(
        None,
        description='APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.',
    )
    nonResourceURLs: Optional[List[str]] = Field(
        None,
        description='NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.',
    )
    resourceNames: Optional[List[str]] = Field(
        None,
        description='ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.',
    )
    resources: Optional[List[str]] = Field(
        None,
        description="Resources is a list of resources this rule applies to. '*' represents all resources.",
    )
    verbs: List[str] = Field(
        ...,
        description="Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.",
    )


class ClusterPermission(BaseModel):
    rules: List[Rule]
    serviceAccountName: str


class MatchExpression(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class Selector(BaseModel):
    matchExpressions: Optional[List[MatchExpression]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class RollingUpdate(BaseModel):
    maxSurge: Optional[Any] = Field(
        None,
        description='The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.',
    )
    maxUnavailable: Optional[Any] = Field(
        None,
        description='The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.',
    )


class Strategy(BaseModel):
    rollingUpdate: Optional[RollingUpdate] = Field(
        None,
        description='Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.',
    )
    type: Optional[str] = Field(
        None,
        description='Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.',
    )


class MatchExpressionModel(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class MatchField(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class Preference(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel]] = Field(
        None, description="A list of node selector requirements by node's labels."
    )
    matchFields: Optional[List[MatchField]] = Field(
        None, description="A list of node selector requirements by node's fields."
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItem(BaseModel):
    preference: Preference = Field(
        ...,
        description='A node selector term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.',
    )


class MatchExpressionModel1(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class MatchFieldModel(BaseModel):
    key: str = Field(..., description='The label key that the selector applies to.')
    operator: str = Field(
        ...,
        description="Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.',
    )


class NodeSelectorTerm(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel1]] = Field(
        None, description="A list of node selector requirements by node's labels."
    )
    matchFields: Optional[List[MatchFieldModel]] = Field(
        None, description="A list of node selector requirements by node's fields."
    )


class RequiredDuringSchedulingIgnoredDuringExecution(BaseModel):
    nodeSelectorTerms: List[NodeSelectorTerm] = Field(
        ..., description='Required. A list of node selector terms. The terms are ORed.'
    )


class NodeAffinity(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItem]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        RequiredDuringSchedulingIgnoredDuringExecution
    ] = Field(
        None,
        description='If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.',
    )


class MatchExpressionModel2(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel2]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel3(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel3]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class PodAffinityTerm(BaseModel):
    labelSelector: Optional[LabelSelector] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelector] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace".',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItemModel(BaseModel):
    podAffinityTerm: PodAffinityTerm = Field(
        ...,
        description='Required. A pod affinity term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
    )


class MatchExpressionModel4(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel4]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel5(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel5]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class RequiredDuringSchedulingIgnoredDuringExecutionItem(BaseModel):
    labelSelector: Optional[LabelSelectorModel] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace".',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PodAffinity(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItemModel]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        List[RequiredDuringSchedulingIgnoredDuringExecutionItem]
    ] = Field(
        None,
        description='If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
    )


class MatchExpressionModel6(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel1(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel6]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel7(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel1(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel7]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class PodAffinityTermModel(BaseModel):
    labelSelector: Optional[LabelSelectorModel1] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel1] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace".',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PreferredDuringSchedulingIgnoredDuringExecutionItemModel1(BaseModel):
    podAffinityTerm: PodAffinityTermModel = Field(
        ...,
        description='Required. A pod affinity term, associated with the corresponding weight.',
    )
    weight: int = Field(
        ...,
        description='weight associated with matching the corresponding podAffinityTerm, in the range 1-100.',
    )


class MatchExpressionModel8(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel2(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel8]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel9(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class NamespaceSelectorModel2(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel9]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class RequiredDuringSchedulingIgnoredDuringExecutionItemModel(BaseModel):
    labelSelector: Optional[LabelSelectorModel2] = Field(
        None, description='A label query over a set of resources, in this case pods.'
    )
    namespaceSelector: Optional[NamespaceSelectorModel2] = Field(
        None,
        description='A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod\'s namespace". An empty selector ({}) matches all namespaces.',
    )
    namespaces: Optional[List[str]] = Field(
        None,
        description='namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod\'s namespace".',
    )
    topologyKey: str = Field(
        ...,
        description='This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.',
    )


class PodAntiAffinity(BaseModel):
    preferredDuringSchedulingIgnoredDuringExecution: Optional[
        List[PreferredDuringSchedulingIgnoredDuringExecutionItemModel1]
    ] = Field(
        None,
        description='The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.',
    )
    requiredDuringSchedulingIgnoredDuringExecution: Optional[
        List[RequiredDuringSchedulingIgnoredDuringExecutionItemModel]
    ] = Field(
        None,
        description='If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.',
    )


class Affinity(BaseModel):
    nodeAffinity: Optional[NodeAffinity] = Field(
        None, description='Describes node affinity scheduling rules for the pod.'
    )
    podAffinity: Optional[PodAffinity] = Field(
        None,
        description='Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).',
    )
    podAntiAffinity: Optional[PodAntiAffinity] = Field(
        None,
        description='Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).',
    )


class ConfigMapKeyRef(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class FieldRef(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRef(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class SecretKeyRef(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ValueFrom(BaseModel):
    configMapKeyRef: Optional[ConfigMapKeyRef] = Field(
        None, description='Selects a key of a ConfigMap.'
    )
    fieldRef: Optional[FieldRef] = Field(
        None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRef] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItem(BaseModel):
    name: str = Field(
        ..., description='Name of the environment variable. Must be a C_IDENTIFIER.'
    )
    value: Optional[str] = Field(
        None,
        description='Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
    )
    valueFrom: Optional[ValueFrom] = Field(
        None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class ConfigMapRef(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap must be defined'
    )


class SecretRef(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret must be defined'
    )


class EnvFromItem(BaseModel):
    configMapRef: Optional[ConfigMapRef] = Field(
        None, description='The ConfigMap to select from'
    )
    prefix: Optional[str] = Field(
        None,
        description='An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
    )
    secretRef: Optional[SecretRef] = Field(
        None, description='The Secret to select from'
    )


class Exec(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeader(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGet(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeader]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocket(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PostStart(BaseModel):
    exec: Optional[Exec] = Field(None, description='Exec specifies the action to take.')
    httpGet: Optional[HttpGet] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocket] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class ExecModel(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PreStop(BaseModel):
    exec: Optional[ExecModel] = Field(
        None, description='Exec specifies the action to take.'
    )
    httpGet: Optional[HttpGetModel] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class Lifecycle(BaseModel):
    postStart: Optional[PostStart] = Field(
        None,
        description='PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks',
    )
    preStop: Optional[PreStop] = Field(
        None,
        description="PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    )


class ExecModel1(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class Grpc(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel1(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel1(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel1]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel1(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class LivenessProbe(BaseModel):
    exec: Optional[ExecModel1] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[Grpc] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel1] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel1] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class Port(BaseModel):
    containerPort: int = Field(
        ...,
        description="Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
    )
    hostIP: Optional[str] = Field(
        None, description='What host IP to bind the external port to.'
    )
    hostPort: Optional[int] = Field(
        None,
        description='Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
    )
    name: Optional[str] = Field(
        None,
        description='If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
    )
    protocol: Optional[str] = Field(
        None,
        description='Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".',
    )


class ExecModel2(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel2(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel2(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel2]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel2(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class ReadinessProbe(BaseModel):
    exec: Optional[ExecModel2] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel2] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel2] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class Resources(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class Capabilities(BaseModel):
    add: Optional[List[str]] = Field(None, description='Added capabilities')
    drop: Optional[List[str]] = Field(None, description='Removed capabilities')


class SeLinuxOptions(BaseModel):
    level: Optional[str] = Field(
        None, description='Level is SELinux level label that applies to the container.'
    )
    role: Optional[str] = Field(
        None, description='Role is a SELinux role label that applies to the container.'
    )
    type: Optional[str] = Field(
        None, description='Type is a SELinux type label that applies to the container.'
    )
    user: Optional[str] = Field(
        None, description='User is a SELinux user label that applies to the container.'
    )


class SeccompProfile(BaseModel):
    localhostProfile: Optional[str] = Field(
        None,
        description='localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet\'s configured seccomp profile location. Must only be set if type is "Localhost".',
    )
    type: str = Field(
        ...,
        description='type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.',
    )


class WindowsOptions(BaseModel):
    gmsaCredentialSpec: Optional[str] = Field(
        None,
        description='GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
    )
    gmsaCredentialSpecName: Optional[str] = Field(
        None,
        description='GMSACredentialSpecName is the name of the GMSA credential spec to use.',
    )
    hostProcess: Optional[bool] = Field(
        None,
        description="HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
    )
    runAsUserName: Optional[str] = Field(
        None,
        description='The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )


class SecurityContext(BaseModel):
    allowPrivilegeEscalation: Optional[bool] = Field(
        None,
        description='AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.',
    )
    capabilities: Optional[Capabilities] = Field(
        None,
        description='The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.',
    )
    privileged: Optional[bool] = Field(
        None,
        description='Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.',
    )
    procMount: Optional[str] = Field(
        None,
        description='procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.',
    )
    readOnlyRootFilesystem: Optional[bool] = Field(
        None,
        description='Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsGroup: Optional[int] = Field(
        None,
        description='The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsNonRoot: Optional[bool] = Field(
        None,
        description='Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    runAsUser: Optional[int] = Field(
        None,
        description='The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seLinuxOptions: Optional[SeLinuxOptions] = Field(
        None,
        description='The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seccompProfile: Optional[SeccompProfile] = Field(
        None,
        description='The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.',
    )
    windowsOptions: Optional[WindowsOptions] = Field(
        None,
        description='The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.',
    )


class ExecModel3(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel1(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel3(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel3(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel3]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel3(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class StartupProbe(BaseModel):
    exec: Optional[ExecModel3] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel1] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel3] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel3] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class VolumeDevice(BaseModel):
    devicePath: str = Field(
        ...,
        description='devicePath is the path inside of the container that the device will be mapped to.',
    )
    name: str = Field(
        ...,
        description='name must match the name of a persistentVolumeClaim in the pod',
    )


class VolumeMount(BaseModel):
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted.  Must not contain ':'.",
    )
    mountPropagation: Optional[str] = Field(
        None,
        description='mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
    )
    name: str = Field(..., description='This must match the Name of a Volume.')
    readOnly: Optional[bool] = Field(
        None,
        description='Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
    )
    subPath: Optional[str] = Field(
        None,
        description='Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
    )
    subPathExpr: Optional[str] = Field(
        None,
        description='Expanded path within the volume from which the container\'s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container\'s environment. Defaults to "" (volume\'s root). SubPathExpr and SubPath are mutually exclusive.',
    )


class Container(BaseModel):
    args: Optional[List[str]] = Field(
        None,
        description='Arguments to the entrypoint. The container image\'s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    command: Optional[List[str]] = Field(
        None,
        description='Entrypoint array. Not executed within a shell. The container image\'s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    env: Optional[List[EnvItem]] = Field(
        None,
        description='List of environment variables to set in the container. Cannot be updated.',
    )
    envFrom: Optional[List[EnvFromItem]] = Field(
        None,
        description='List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
    )
    image: Optional[str] = Field(
        None,
        description='Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
    )
    imagePullPolicy: Optional[str] = Field(
        None,
        description='Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
    )
    lifecycle: Optional[Lifecycle] = Field(
        None,
        description='Actions that the management system should take in response to container lifecycle events. Cannot be updated.',
    )
    livenessProbe: Optional[LivenessProbe] = Field(
        None,
        description='Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    name: str = Field(
        ...,
        description='Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
    )
    ports: Optional[List[Port]] = Field(
        None,
        description='List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
    )
    readinessProbe: Optional[ReadinessProbe] = Field(
        None,
        description='Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    resources: Optional[Resources] = Field(
        None,
        description='Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    securityContext: Optional[SecurityContext] = Field(
        None,
        description='SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/',
    )
    startupProbe: Optional[StartupProbe] = Field(
        None,
        description="StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    stdin: Optional[bool] = Field(
        None,
        description='Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
    )
    stdinOnce: Optional[bool] = Field(
        None,
        description='Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
    )
    terminationMessagePath: Optional[str] = Field(
        None,
        description="Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
    )
    terminationMessagePolicy: Optional[str] = Field(
        None,
        description='Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
    )
    tty: Optional[bool] = Field(
        None,
        description="Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
    )
    volumeDevices: Optional[List[VolumeDevice]] = Field(
        None,
        description='volumeDevices is the list of block devices to be used by the container.',
    )
    volumeMounts: Optional[List[VolumeMount]] = Field(
        None,
        description="Pod volumes to mount into the container's filesystem. Cannot be updated.",
    )
    workingDir: Optional[str] = Field(
        None,
        description="Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
    )


class Option(BaseModel):
    name: Optional[str] = Field(None, description='Required.')
    value: Optional[str] = None


class DnsConfig(BaseModel):
    nameservers: Optional[List[str]] = Field(
        None,
        description='A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.',
    )
    options: Optional[List[Option]] = Field(
        None,
        description='A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.',
    )
    searches: Optional[List[str]] = Field(
        None,
        description='A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.',
    )


class ConfigMapKeyRefModel(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class FieldRefModel(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class SecretKeyRefModel(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ValueFromModel(BaseModel):
    configMapKeyRef: Optional[ConfigMapKeyRefModel] = Field(
        None, description='Selects a key of a ConfigMap.'
    )
    fieldRef: Optional[FieldRefModel] = Field(
        None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.',
    )
    secretKeyRef: Optional[SecretKeyRefModel] = Field(
        None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItemModel(BaseModel):
    name: str = Field(
        ..., description='Name of the environment variable. Must be a C_IDENTIFIER.'
    )
    value: Optional[str] = Field(
        None,
        description='Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
    )
    valueFrom: Optional[ValueFromModel] = Field(
        None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class ConfigMapRefModel(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap must be defined'
    )


class SecretRefModel(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret must be defined'
    )


class EnvFromItemModel(BaseModel):
    configMapRef: Optional[ConfigMapRefModel] = Field(
        None, description='The ConfigMap to select from'
    )
    prefix: Optional[str] = Field(
        None,
        description='An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
    )
    secretRef: Optional[SecretRefModel] = Field(
        None, description='The Secret to select from'
    )


class ExecModel4(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel4(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel4(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel4]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel4(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PostStartModel(BaseModel):
    exec: Optional[ExecModel4] = Field(
        None, description='Exec specifies the action to take.'
    )
    httpGet: Optional[HttpGetModel4] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel4] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class ExecModel5(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel5(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel5(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel5]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel5(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PreStopModel(BaseModel):
    exec: Optional[ExecModel5] = Field(
        None, description='Exec specifies the action to take.'
    )
    httpGet: Optional[HttpGetModel5] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel5] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class LifecycleModel(BaseModel):
    postStart: Optional[PostStartModel] = Field(
        None,
        description='PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks',
    )
    preStop: Optional[PreStopModel] = Field(
        None,
        description="PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    )


class ExecModel6(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel2(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel6(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel6(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel6]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel6(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class LivenessProbeModel(BaseModel):
    exec: Optional[ExecModel6] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel2] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel6] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel6] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class PortModel(BaseModel):
    containerPort: int = Field(
        ...,
        description="Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
    )
    hostIP: Optional[str] = Field(
        None, description='What host IP to bind the external port to.'
    )
    hostPort: Optional[int] = Field(
        None,
        description='Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
    )
    name: Optional[str] = Field(
        None,
        description='If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
    )
    protocol: Optional[str] = Field(
        None,
        description='Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".',
    )


class ExecModel7(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel3(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel7(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel7(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel7]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel7(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class ReadinessProbeModel(BaseModel):
    exec: Optional[ExecModel7] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel3] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel7] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel7] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class ResourcesModel(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class CapabilitiesModel(BaseModel):
    add: Optional[List[str]] = Field(None, description='Added capabilities')
    drop: Optional[List[str]] = Field(None, description='Removed capabilities')


class SeLinuxOptionsModel(BaseModel):
    level: Optional[str] = Field(
        None, description='Level is SELinux level label that applies to the container.'
    )
    role: Optional[str] = Field(
        None, description='Role is a SELinux role label that applies to the container.'
    )
    type: Optional[str] = Field(
        None, description='Type is a SELinux type label that applies to the container.'
    )
    user: Optional[str] = Field(
        None, description='User is a SELinux user label that applies to the container.'
    )


class SeccompProfileModel(BaseModel):
    localhostProfile: Optional[str] = Field(
        None,
        description='localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet\'s configured seccomp profile location. Must only be set if type is "Localhost".',
    )
    type: str = Field(
        ...,
        description='type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.',
    )


class WindowsOptionsModel(BaseModel):
    gmsaCredentialSpec: Optional[str] = Field(
        None,
        description='GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
    )
    gmsaCredentialSpecName: Optional[str] = Field(
        None,
        description='GMSACredentialSpecName is the name of the GMSA credential spec to use.',
    )
    hostProcess: Optional[bool] = Field(
        None,
        description="HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
    )
    runAsUserName: Optional[str] = Field(
        None,
        description='The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )


class SecurityContextModel(BaseModel):
    allowPrivilegeEscalation: Optional[bool] = Field(
        None,
        description='AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.',
    )
    capabilities: Optional[CapabilitiesModel] = Field(
        None,
        description='The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.',
    )
    privileged: Optional[bool] = Field(
        None,
        description='Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.',
    )
    procMount: Optional[str] = Field(
        None,
        description='procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.',
    )
    readOnlyRootFilesystem: Optional[bool] = Field(
        None,
        description='Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsGroup: Optional[int] = Field(
        None,
        description='The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsNonRoot: Optional[bool] = Field(
        None,
        description='Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    runAsUser: Optional[int] = Field(
        None,
        description='The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seLinuxOptions: Optional[SeLinuxOptionsModel] = Field(
        None,
        description='The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seccompProfile: Optional[SeccompProfileModel] = Field(
        None,
        description='The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.',
    )
    windowsOptions: Optional[WindowsOptionsModel] = Field(
        None,
        description='The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.',
    )


class ExecModel8(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel4(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel8(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel8(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel8]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel8(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class StartupProbeModel(BaseModel):
    exec: Optional[ExecModel8] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel4] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel8] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel8] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class VolumeDeviceModel(BaseModel):
    devicePath: str = Field(
        ...,
        description='devicePath is the path inside of the container that the device will be mapped to.',
    )
    name: str = Field(
        ...,
        description='name must match the name of a persistentVolumeClaim in the pod',
    )


class VolumeMountModel(BaseModel):
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted.  Must not contain ':'.",
    )
    mountPropagation: Optional[str] = Field(
        None,
        description='mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
    )
    name: str = Field(..., description='This must match the Name of a Volume.')
    readOnly: Optional[bool] = Field(
        None,
        description='Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
    )
    subPath: Optional[str] = Field(
        None,
        description='Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
    )
    subPathExpr: Optional[str] = Field(
        None,
        description='Expanded path within the volume from which the container\'s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container\'s environment. Defaults to "" (volume\'s root). SubPathExpr and SubPath are mutually exclusive.',
    )


class EphemeralContainer(BaseModel):
    args: Optional[List[str]] = Field(
        None,
        description='Arguments to the entrypoint. The image\'s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    command: Optional[List[str]] = Field(
        None,
        description='Entrypoint array. Not executed within a shell. The image\'s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    env: Optional[List[EnvItemModel]] = Field(
        None,
        description='List of environment variables to set in the container. Cannot be updated.',
    )
    envFrom: Optional[List[EnvFromItemModel]] = Field(
        None,
        description='List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
    )
    image: Optional[str] = Field(
        None,
        description='Container image name. More info: https://kubernetes.io/docs/concepts/containers/images',
    )
    imagePullPolicy: Optional[str] = Field(
        None,
        description='Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
    )
    lifecycle: Optional[LifecycleModel] = Field(
        None, description='Lifecycle is not allowed for ephemeral containers.'
    )
    livenessProbe: Optional[LivenessProbeModel] = Field(
        None, description='Probes are not allowed for ephemeral containers.'
    )
    name: str = Field(
        ...,
        description='Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.',
    )
    ports: Optional[List[PortModel]] = Field(
        None, description='Ports are not allowed for ephemeral containers.'
    )
    readinessProbe: Optional[ReadinessProbeModel] = Field(
        None, description='Probes are not allowed for ephemeral containers.'
    )
    resources: Optional[ResourcesModel] = Field(
        None,
        description='Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.',
    )
    securityContext: Optional[SecurityContextModel] = Field(
        None,
        description='Optional: SecurityContext defines the security options the ephemeral container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.',
    )
    startupProbe: Optional[StartupProbeModel] = Field(
        None, description='Probes are not allowed for ephemeral containers.'
    )
    stdin: Optional[bool] = Field(
        None,
        description='Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
    )
    stdinOnce: Optional[bool] = Field(
        None,
        description='Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
    )
    targetContainerName: Optional[str] = Field(
        None,
        description='If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec. \n The container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.',
    )
    terminationMessagePath: Optional[str] = Field(
        None,
        description="Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
    )
    terminationMessagePolicy: Optional[str] = Field(
        None,
        description='Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
    )
    tty: Optional[bool] = Field(
        None,
        description="Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
    )
    volumeDevices: Optional[List[VolumeDeviceModel]] = Field(
        None,
        description='volumeDevices is the list of block devices to be used by the container.',
    )
    volumeMounts: Optional[List[VolumeMountModel]] = Field(
        None,
        description="Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.",
    )
    workingDir: Optional[str] = Field(
        None,
        description="Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
    )


class HostAliase(BaseModel):
    hostnames: Optional[List[str]] = Field(
        None, description='Hostnames for the above IP address.'
    )
    ip: Optional[str] = Field(None, description='IP address of the host file entry.')


class ImagePullSecret(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class ConfigMapKeyRefModel1(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class FieldRefModel1(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel1(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class SecretKeyRefModel1(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ValueFromModel1(BaseModel):
    configMapKeyRef: Optional[ConfigMapKeyRefModel1] = Field(
        None, description='Selects a key of a ConfigMap.'
    )
    fieldRef: Optional[FieldRefModel1] = Field(
        None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel1] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.',
    )
    secretKeyRef: Optional[SecretKeyRefModel1] = Field(
        None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItemModel1(BaseModel):
    name: str = Field(
        ..., description='Name of the environment variable. Must be a C_IDENTIFIER.'
    )
    value: Optional[str] = Field(
        None,
        description='Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
    )
    valueFrom: Optional[ValueFromModel1] = Field(
        None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class ConfigMapRefModel1(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap must be defined'
    )


class SecretRefModel1(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret must be defined'
    )


class EnvFromItemModel1(BaseModel):
    configMapRef: Optional[ConfigMapRefModel1] = Field(
        None, description='The ConfigMap to select from'
    )
    prefix: Optional[str] = Field(
        None,
        description='An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
    )
    secretRef: Optional[SecretRefModel1] = Field(
        None, description='The Secret to select from'
    )


class ExecModel9(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel9(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel9(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel9]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel9(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PostStartModel1(BaseModel):
    exec: Optional[ExecModel9] = Field(
        None, description='Exec specifies the action to take.'
    )
    httpGet: Optional[HttpGetModel9] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel9] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class ExecModel10(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class HttpHeaderModel10(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel10(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel10]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel10(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class PreStopModel1(BaseModel):
    exec: Optional[ExecModel10] = Field(
        None, description='Exec specifies the action to take.'
    )
    httpGet: Optional[HttpGetModel10] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    tcpSocket: Optional[TcpSocketModel10] = Field(
        None,
        description='Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.',
    )


class LifecycleModel1(BaseModel):
    postStart: Optional[PostStartModel1] = Field(
        None,
        description='PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks',
    )
    preStop: Optional[PreStopModel1] = Field(
        None,
        description="PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
    )


class ExecModel11(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel5(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel11(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel11(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel11]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel11(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class LivenessProbeModel1(BaseModel):
    exec: Optional[ExecModel11] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel5] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel11] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel11] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class PortModel1(BaseModel):
    containerPort: int = Field(
        ...,
        description="Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
    )
    hostIP: Optional[str] = Field(
        None, description='What host IP to bind the external port to.'
    )
    hostPort: Optional[int] = Field(
        None,
        description='Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.',
    )
    name: Optional[str] = Field(
        None,
        description='If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.',
    )
    protocol: Optional[str] = Field(
        None,
        description='Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".',
    )


class ExecModel12(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel6(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel12(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel12(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel12]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel12(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class ReadinessProbeModel1(BaseModel):
    exec: Optional[ExecModel12] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel6] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel12] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel12] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class ResourcesModel1(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class CapabilitiesModel1(BaseModel):
    add: Optional[List[str]] = Field(None, description='Added capabilities')
    drop: Optional[List[str]] = Field(None, description='Removed capabilities')


class SeLinuxOptionsModel1(BaseModel):
    level: Optional[str] = Field(
        None, description='Level is SELinux level label that applies to the container.'
    )
    role: Optional[str] = Field(
        None, description='Role is a SELinux role label that applies to the container.'
    )
    type: Optional[str] = Field(
        None, description='Type is a SELinux type label that applies to the container.'
    )
    user: Optional[str] = Field(
        None, description='User is a SELinux user label that applies to the container.'
    )


class SeccompProfileModel1(BaseModel):
    localhostProfile: Optional[str] = Field(
        None,
        description='localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet\'s configured seccomp profile location. Must only be set if type is "Localhost".',
    )
    type: str = Field(
        ...,
        description='type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.',
    )


class WindowsOptionsModel1(BaseModel):
    gmsaCredentialSpec: Optional[str] = Field(
        None,
        description='GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
    )
    gmsaCredentialSpecName: Optional[str] = Field(
        None,
        description='GMSACredentialSpecName is the name of the GMSA credential spec to use.',
    )
    hostProcess: Optional[bool] = Field(
        None,
        description="HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
    )
    runAsUserName: Optional[str] = Field(
        None,
        description='The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )


class SecurityContextModel1(BaseModel):
    allowPrivilegeEscalation: Optional[bool] = Field(
        None,
        description='AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.',
    )
    capabilities: Optional[CapabilitiesModel1] = Field(
        None,
        description='The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.',
    )
    privileged: Optional[bool] = Field(
        None,
        description='Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.',
    )
    procMount: Optional[str] = Field(
        None,
        description='procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.',
    )
    readOnlyRootFilesystem: Optional[bool] = Field(
        None,
        description='Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsGroup: Optional[int] = Field(
        None,
        description='The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsNonRoot: Optional[bool] = Field(
        None,
        description='Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    runAsUser: Optional[int] = Field(
        None,
        description='The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seLinuxOptions: Optional[SeLinuxOptionsModel1] = Field(
        None,
        description='The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.',
    )
    seccompProfile: Optional[SeccompProfileModel1] = Field(
        None,
        description='The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.',
    )
    windowsOptions: Optional[WindowsOptionsModel1] = Field(
        None,
        description='The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.',
    )


class ExecModel13(BaseModel):
    command: Optional[List[str]] = Field(
        None,
        description="Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
    )


class GrpcModel7(BaseModel):
    port: int = Field(
        ...,
        description='Port number of the gRPC service. Number must be in the range 1 to 65535.',
    )
    service: Optional[str] = Field(
        None,
        description='Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.',
    )


class HttpHeaderModel13(BaseModel):
    name: str = Field(..., description='The header field name')
    value: str = Field(..., description='The header field value')


class HttpGetModel13(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.',
    )
    httpHeaders: Optional[List[HttpHeaderModel13]] = Field(
        None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(None, description='Path to access on the HTTP server.')
    port: Any = Field(
        ...,
        description='Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )
    scheme: Optional[str] = Field(
        None, description='Scheme to use for connecting to the host. Defaults to HTTP.'
    )


class TcpSocketModel13(BaseModel):
    host: Optional[str] = Field(
        None, description='Optional: Host name to connect to, defaults to the pod IP.'
    )
    port: Any = Field(
        ...,
        description='Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.',
    )


class StartupProbeModel1(BaseModel):
    exec: Optional[ExecModel13] = Field(
        None, description='Exec specifies the action to take.'
    )
    failureThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    grpc: Optional[GrpcModel7] = Field(
        None,
        description='GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.',
    )
    httpGet: Optional[HttpGetModel13] = Field(
        None, description='HTTPGet specifies the http request to perform.'
    )
    initialDelaySeconds: Optional[int] = Field(
        None,
        description='Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    periodSeconds: Optional[int] = Field(
        None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.',
    )
    successThreshold: Optional[int] = Field(
        None,
        description='Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.',
    )
    tcpSocket: Optional[TcpSocketModel13] = Field(
        None, description='TCPSocket specifies an action involving a TCP port.'
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description="Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
    )
    timeoutSeconds: Optional[int] = Field(
        None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )


class VolumeDeviceModel1(BaseModel):
    devicePath: str = Field(
        ...,
        description='devicePath is the path inside of the container that the device will be mapped to.',
    )
    name: str = Field(
        ...,
        description='name must match the name of a persistentVolumeClaim in the pod',
    )


class VolumeMountModel1(BaseModel):
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted.  Must not contain ':'.",
    )
    mountPropagation: Optional[str] = Field(
        None,
        description='mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
    )
    name: str = Field(..., description='This must match the Name of a Volume.')
    readOnly: Optional[bool] = Field(
        None,
        description='Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
    )
    subPath: Optional[str] = Field(
        None,
        description='Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
    )
    subPathExpr: Optional[str] = Field(
        None,
        description='Expanded path within the volume from which the container\'s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container\'s environment. Defaults to "" (volume\'s root). SubPathExpr and SubPath are mutually exclusive.',
    )


class InitContainer(BaseModel):
    args: Optional[List[str]] = Field(
        None,
        description='Arguments to the entrypoint. The container image\'s CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    command: Optional[List[str]] = Field(
        None,
        description='Entrypoint array. Not executed within a shell. The container image\'s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container\'s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell',
    )
    env: Optional[List[EnvItemModel1]] = Field(
        None,
        description='List of environment variables to set in the container. Cannot be updated.',
    )
    envFrom: Optional[List[EnvFromItemModel1]] = Field(
        None,
        description='List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.',
    )
    image: Optional[str] = Field(
        None,
        description='Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.',
    )
    imagePullPolicy: Optional[str] = Field(
        None,
        description='Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images',
    )
    lifecycle: Optional[LifecycleModel1] = Field(
        None,
        description='Actions that the management system should take in response to container lifecycle events. Cannot be updated.',
    )
    livenessProbe: Optional[LivenessProbeModel1] = Field(
        None,
        description='Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    name: str = Field(
        ...,
        description='Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.',
    )
    ports: Optional[List[PortModel1]] = Field(
        None,
        description='List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.',
    )
    readinessProbe: Optional[ReadinessProbeModel1] = Field(
        None,
        description='Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes',
    )
    resources: Optional[ResourcesModel1] = Field(
        None,
        description='Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    securityContext: Optional[SecurityContextModel1] = Field(
        None,
        description='SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/',
    )
    startupProbe: Optional[StartupProbeModel1] = Field(
        None,
        description="StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
    )
    stdin: Optional[bool] = Field(
        None,
        description='Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.',
    )
    stdinOnce: Optional[bool] = Field(
        None,
        description='Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false',
    )
    terminationMessagePath: Optional[str] = Field(
        None,
        description="Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
    )
    terminationMessagePolicy: Optional[str] = Field(
        None,
        description='Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.',
    )
    tty: Optional[bool] = Field(
        None,
        description="Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
    )
    volumeDevices: Optional[List[VolumeDeviceModel1]] = Field(
        None,
        description='volumeDevices is the list of block devices to be used by the container.',
    )
    volumeMounts: Optional[List[VolumeMountModel1]] = Field(
        None,
        description="Pod volumes to mount into the container's filesystem. Cannot be updated.",
    )
    workingDir: Optional[str] = Field(
        None,
        description="Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
    )


class Os(BaseModel):
    name: str = Field(
        ...,
        description='Name is the name of the operating system. The currently supported values are linux and windows. Additional value may be defined in future and can be one of: https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration Clients should expect to handle additional values and treat unrecognized values in this field as os: null',
    )


class ReadinessGate(BaseModel):
    conditionType: str = Field(
        ...,
        description="ConditionType refers to a condition in the pod's condition list with matching type.",
    )


class SeLinuxOptionsModel2(BaseModel):
    level: Optional[str] = Field(
        None, description='Level is SELinux level label that applies to the container.'
    )
    role: Optional[str] = Field(
        None, description='Role is a SELinux role label that applies to the container.'
    )
    type: Optional[str] = Field(
        None, description='Type is a SELinux type label that applies to the container.'
    )
    user: Optional[str] = Field(
        None, description='User is a SELinux user label that applies to the container.'
    )


class SeccompProfileModel2(BaseModel):
    localhostProfile: Optional[str] = Field(
        None,
        description='localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet\'s configured seccomp profile location. Must only be set if type is "Localhost".',
    )
    type: str = Field(
        ...,
        description='type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.',
    )


class Sysctl(BaseModel):
    name: str = Field(..., description='Name of a property to set')
    value: str = Field(..., description='Value of a property to set')


class WindowsOptionsModel2(BaseModel):
    gmsaCredentialSpec: Optional[str] = Field(
        None,
        description='GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.',
    )
    gmsaCredentialSpecName: Optional[str] = Field(
        None,
        description='GMSACredentialSpecName is the name of the GMSA credential spec to use.',
    )
    hostProcess: Optional[bool] = Field(
        None,
        description="HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
    )
    runAsUserName: Optional[str] = Field(
        None,
        description='The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )


class SecurityContextModel2(BaseModel):
    fsGroup: Optional[int] = Field(
        None,
        description="A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: \n 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- \n If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.",
    )
    fsGroupChangePolicy: Optional[str] = Field(
        None,
        description='fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsGroup: Optional[int] = Field(
        None,
        description='The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.',
    )
    runAsNonRoot: Optional[bool] = Field(
        None,
        description='Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.',
    )
    runAsUser: Optional[int] = Field(
        None,
        description='The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.',
    )
    seLinuxOptions: Optional[SeLinuxOptionsModel2] = Field(
        None,
        description='The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.',
    )
    seccompProfile: Optional[SeccompProfileModel2] = Field(
        None,
        description='The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.',
    )
    supplementalGroups: Optional[List[int]] = Field(
        None,
        description="A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.",
    )
    sysctls: Optional[List[Sysctl]] = Field(
        None,
        description='Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.',
    )
    windowsOptions: Optional[WindowsOptionsModel2] = Field(
        None,
        description="The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.",
    )


class TolerationModel(BaseModel):
    effect: Optional[str] = Field(
        None,
        description='Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
    )
    key: Optional[str] = Field(
        None,
        description='Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
    )
    operator: Optional[str] = Field(
        None,
        description="Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
    )
    tolerationSeconds: Optional[int] = Field(
        None,
        description='TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
    )
    value: Optional[str] = Field(
        None,
        description='Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
    )


class MatchExpressionModel10(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class LabelSelectorModel3(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel10]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class TopologySpreadConstraint(BaseModel):
    labelSelector: Optional[LabelSelectorModel3] = Field(
        None,
        description='LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.',
    )
    maxSkew: int = Field(
        ...,
        description="MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
    )
    minDomains: Optional[int] = Field(
        None,
        description='MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won\'t schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule. \n For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew. \n This is an alpha field and requires enabling MinDomainsInPodTopologySpread feature gate.',
    )
    topologyKey: str = Field(
        ...,
        description='TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes match the node selector. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It\'s a required field.',
    )
    whenUnsatisfiable: str = Field(
        ...,
        description='WhenUnsatisfiable indicates how to deal with a pod if it doesn\'t satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won\'t make it *more* imbalanced. It\'s a required field.',
    )


class AwsElasticBlockStore(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    partition: Optional[int] = Field(
        None,
        description='partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
    )
    volumeID: str = Field(
        ...,
        description='volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
    )


class AzureDisk(BaseModel):
    cachingMode: Optional[str] = Field(
        None,
        description='cachingMode is the Host Caching mode: None, Read Only, Read Write.',
    )
    diskName: str = Field(
        ..., description='diskName is the Name of the data disk in the blob storage'
    )
    diskURI: str = Field(
        ..., description='diskURI is the URI of data disk in the blob storage'
    )
    fsType: Optional[str] = Field(
        None,
        description='fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    kind: Optional[str] = Field(
        None,
        description='kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )


class AzureFile(BaseModel):
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretName: str = Field(
        ...,
        description='secretName is the  name of secret that contains Azure Storage Account Name and Key',
    )
    shareName: str = Field(..., description='shareName is the azure share Name')


class SecretRefModel2(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class Cephfs(BaseModel):
    monitors: List[str] = Field(
        ...,
        description='monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    path: Optional[str] = Field(
        None,
        description='path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    secretFile: Optional[str] = Field(
        None,
        description='secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    secretRef: Optional[SecretRefModel2] = Field(
        None,
        description='secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    user: Optional[str] = Field(
        None,
        description='user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )


class SecretRefModel3(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class Cinder(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    secretRef: Optional[SecretRefModel3] = Field(
        None,
        description='secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.',
    )
    volumeID: str = Field(
        ...,
        description='volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )


class Item(BaseModel):
    key: str = Field(..., description='key is the key to project.')
    mode: Optional[int] = Field(
        None,
        description='mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class ConfigMap(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    items: Optional[List[Item]] = Field(
        None,
        description="items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None,
        description='optional specify whether the ConfigMap or its keys must be defined',
    )


class NodePublishSecretRef(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class Csi(BaseModel):
    driver: str = Field(
        ...,
        description='driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.',
    )
    fsType: Optional[str] = Field(
        None,
        description='fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.',
    )
    nodePublishSecretRef: Optional[NodePublishSecretRef] = Field(
        None,
        description='nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).',
    )
    volumeAttributes: Optional[Dict[str, str]] = Field(
        None,
        description="volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
    )


class FieldRefModel2(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel2(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class ItemModel(BaseModel):
    fieldRef: Optional[FieldRefModel2] = Field(
        None,
        description='Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.',
    )
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel2] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.',
    )


class DownwardAPI(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    items: Optional[List[ItemModel]] = Field(
        None, description='Items is a list of downward API volume file'
    )


class EmptyDir(BaseModel):
    medium: Optional[str] = Field(
        None,
        description='medium represents what type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
    )
    sizeLimit: Optional[Any] = Field(
        None,
        description='sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir',
    )


class DataSource(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class DataSourceRef(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class ResourcesModel2(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class MatchExpressionModel11(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class SelectorModel(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel11]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class SpecModel(BaseModel):
    accessModes: Optional[List[str]] = Field(
        None,
        description='accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
    )
    dataSource: Optional[DataSource] = Field(
        None,
        description='dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.',
    )
    dataSourceRef: Optional[DataSourceRef] = Field(
        None,
        description='dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.',
    )
    resources: Optional[ResourcesModel2] = Field(
        None,
        description='resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources',
    )
    selector: Optional[SelectorModel] = Field(
        None,
        description='selector is a label query over volumes to consider for binding.',
    )
    storageClassName: Optional[str] = Field(
        None,
        description='storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1',
    )
    volumeMode: Optional[str] = Field(
        None,
        description='volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='volumeName is the binding reference to the PersistentVolume backing this claim.',
    )


class VolumeClaimTemplate(BaseModel):
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.',
    )
    spec: SpecModel = Field(
        ...,
        description='The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.',
    )


class Ephemeral(BaseModel):
    volumeClaimTemplate: Optional[VolumeClaimTemplate] = Field(
        None,
        description='Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). \n An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. \n This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. \n Required, must not be nil.',
    )


class Fc(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    lun: Optional[int] = Field(
        None, description='lun is Optional: FC target lun number'
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    targetWWNs: Optional[List[str]] = Field(
        None, description='targetWWNs is Optional: FC target worldwide names (WWNs)'
    )
    wwids: Optional[List[str]] = Field(
        None,
        description='wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.',
    )


class SecretRefModel4(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class FlexVolume(BaseModel):
    driver: str = Field(
        ..., description='driver is the name of the driver to use for this volume.'
    )
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
    )
    options: Optional[Dict[str, str]] = Field(
        None,
        description='options is Optional: this field holds extra command options if any.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretRef: Optional[SecretRefModel4] = Field(
        None,
        description='secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.',
    )


class Flocker(BaseModel):
    datasetName: Optional[str] = Field(
        None,
        description='datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated',
    )
    datasetUUID: Optional[str] = Field(
        None,
        description='datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset',
    )


class GcePersistentDisk(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    partition: Optional[int] = Field(
        None,
        description='partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )
    pdName: str = Field(
        ...,
        description='pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )


class GitRepo(BaseModel):
    directory: Optional[str] = Field(
        None,
        description="directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
    )
    repository: str = Field(..., description='repository is the URL')
    revision: Optional[str] = Field(
        None, description='revision is the commit hash for the specified revision.'
    )


class Glusterfs(BaseModel):
    endpoints: str = Field(
        ...,
        description='endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
    )
    path: str = Field(
        ...,
        description='path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
    )


class HostPath(BaseModel):
    path: str = Field(
        ...,
        description='path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
    )
    type: Optional[str] = Field(
        None,
        description='type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
    )


class SecretRefModel5(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class Iscsi(BaseModel):
    chapAuthDiscovery: Optional[bool] = Field(
        None,
        description='chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication',
    )
    chapAuthSession: Optional[bool] = Field(
        None,
        description='chapAuthSession defines whether support iSCSI Session CHAP authentication',
    )
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    initiatorName: Optional[str] = Field(
        None,
        description='initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.',
    )
    iqn: str = Field(..., description='iqn is the target iSCSI Qualified Name.')
    iscsiInterface: Optional[str] = Field(
        None,
        description="iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
    )
    lun: int = Field(..., description='lun represents iSCSI Target Lun number.')
    portals: Optional[List[str]] = Field(
        None,
        description='portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.',
    )
    secretRef: Optional[SecretRefModel5] = Field(
        None,
        description='secretRef is the CHAP Secret for iSCSI target and initiator authentication',
    )
    targetPortal: str = Field(
        ...,
        description='targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
    )


class Nfs(BaseModel):
    path: str = Field(
        ...,
        description='path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
    )
    server: str = Field(
        ...,
        description='server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
    )


class PersistentVolumeClaim(BaseModel):
    claimName: str = Field(
        ...,
        description='claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly Will force the ReadOnly setting in VolumeMounts. Default false.',
    )


class PhotonPersistentDisk(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    pdID: str = Field(
        ...,
        description='pdID is the ID that identifies Photon Controller persistent disk',
    )


class PortworxVolume(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    volumeID: str = Field(
        ..., description='volumeID uniquely identifies a Portworx volume'
    )


class ItemModel1(BaseModel):
    key: str = Field(..., description='key is the key to project.')
    mode: Optional[int] = Field(
        None,
        description='mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class ConfigMapModel(BaseModel):
    items: Optional[List[ItemModel1]] = Field(
        None,
        description="items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None,
        description='optional specify whether the ConfigMap or its keys must be defined',
    )


class FieldRefModel3(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel3(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class ItemModel2(BaseModel):
    fieldRef: Optional[FieldRefModel3] = Field(
        None,
        description='Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.',
    )
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel3] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.',
    )


class DownwardAPIModel(BaseModel):
    items: Optional[List[ItemModel2]] = Field(
        None, description='Items is a list of DownwardAPIVolume file'
    )


class ItemModel3(BaseModel):
    key: str = Field(..., description='key is the key to project.')
    mode: Optional[int] = Field(
        None,
        description='mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class Secret(BaseModel):
    items: Optional[List[ItemModel3]] = Field(
        None,
        description="items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None,
        description='optional field specify whether the Secret or its key must be defined',
    )


class ServiceAccountToken(BaseModel):
    audience: Optional[str] = Field(
        None,
        description='audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.',
    )
    expirationSeconds: Optional[int] = Field(
        None,
        description='expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.',
    )
    path: str = Field(
        ...,
        description='path is the path relative to the mount point of the file to project the token into.',
    )


class Source(BaseModel):
    configMap: Optional[ConfigMapModel] = Field(
        None, description='configMap information about the configMap data to project'
    )
    downwardAPI: Optional[DownwardAPIModel] = Field(
        None,
        description='downwardAPI information about the downwardAPI data to project',
    )
    secret: Optional[Secret] = Field(
        None, description='secret information about the secret data to project'
    )
    serviceAccountToken: Optional[ServiceAccountToken] = Field(
        None,
        description='serviceAccountToken is information about the serviceAccountToken data to project',
    )


class Projected(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    sources: Optional[List[Source]] = Field(
        None, description='sources is the list of volume projections'
    )


class Quobyte(BaseModel):
    group: Optional[str] = Field(
        None, description='group to map volume access to Default is no group'
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.',
    )
    registry: str = Field(
        ...,
        description='registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes',
    )
    tenant: Optional[str] = Field(
        None,
        description='tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin',
    )
    user: Optional[str] = Field(
        None, description='user to map volume access to Defaults to serivceaccount user'
    )
    volume: str = Field(
        ...,
        description='volume is a string that references an already created Quobyte volume by name.',
    )


class SecretRefModel6(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class Rbd(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    image: str = Field(
        ...,
        description='image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    keyring: Optional[str] = Field(
        None,
        description='keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    monitors: List[str] = Field(
        ...,
        description='monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    pool: Optional[str] = Field(
        None,
        description='pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    secretRef: Optional[SecretRefModel6] = Field(
        None,
        description='secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    user: Optional[str] = Field(
        None,
        description='user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )


class SecretRefModel7(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class ScaleIO(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".',
    )
    gateway: str = Field(
        ..., description='gateway is the host address of the ScaleIO API Gateway.'
    )
    protectionDomain: Optional[str] = Field(
        None,
        description='protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretRef: SecretRefModel7 = Field(
        ...,
        description='secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.',
    )
    sslEnabled: Optional[bool] = Field(
        None,
        description='sslEnabled Flag enable/disable SSL communication with Gateway, default false',
    )
    storageMode: Optional[str] = Field(
        None,
        description='storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.',
    )
    storagePool: Optional[str] = Field(
        None,
        description='storagePool is the ScaleIO Storage Pool associated with the protection domain.',
    )
    system: str = Field(
        ...,
        description='system is the name of the storage system as configured in ScaleIO.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.',
    )


class ItemModel4(BaseModel):
    key: str = Field(..., description='key is the key to project.')
    mode: Optional[int] = Field(
        None,
        description='mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class SecretModel(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    items: Optional[List[ItemModel4]] = Field(
        None,
        description="items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    optional: Optional[bool] = Field(
        None,
        description='optional field specify whether the Secret or its keys must be defined',
    )
    secretName: Optional[str] = Field(
        None,
        description="secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
    )


class SecretRefModel8(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class Storageos(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretRef: Optional[SecretRefModel8] = Field(
        None,
        description='secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.',
    )
    volumeNamespace: Optional[str] = Field(
        None,
        description='volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod\'s namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.',
    )


class VsphereVolume(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    storagePolicyID: Optional[str] = Field(
        None,
        description='storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.',
    )
    storagePolicyName: Optional[str] = Field(
        None,
        description='storagePolicyName is the storage Policy Based Management (SPBM) profile name.',
    )
    volumePath: str = Field(
        ..., description='volumePath is the path that identifies vSphere volume vmdk'
    )


class Volume(BaseModel):
    awsElasticBlockStore: Optional[AwsElasticBlockStore] = Field(
        None,
        description="awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    )
    azureDisk: Optional[AzureDisk] = Field(
        None,
        description='azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.',
    )
    azureFile: Optional[AzureFile] = Field(
        None,
        description='azureFile represents an Azure File Service mount on the host and bind mount to the pod.',
    )
    cephfs: Optional[Cephfs] = Field(
        None,
        description="cephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
    )
    cinder: Optional[Cinder] = Field(
        None,
        description='cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    configMap: Optional[ConfigMap] = Field(
        None,
        description='configMap represents a configMap that should populate this volume',
    )
    csi: Optional[Csi] = Field(
        None,
        description='csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).',
    )
    downwardAPI: Optional[DownwardAPI] = Field(
        None,
        description='downwardAPI represents downward API about the pod that should populate this volume',
    )
    emptyDir: Optional[EmptyDir] = Field(
        None,
        description="emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    )
    ephemeral: Optional[Ephemeral] = Field(
        None,
        description="ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. \n Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). \n Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. \n Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. \n A pod can use both types of ephemeral volumes and persistent volumes at the same time.",
    )
    fc: Optional[Fc] = Field(
        None,
        description="fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
    )
    flexVolume: Optional[FlexVolume] = Field(
        None,
        description='flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.',
    )
    flocker: Optional[Flocker] = Field(
        None,
        description="flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
    )
    gcePersistentDisk: Optional[GcePersistentDisk] = Field(
        None,
        description="gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    )
    gitRepo: Optional[GitRepo] = Field(
        None,
        description="gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
    )
    glusterfs: Optional[Glusterfs] = Field(
        None,
        description="glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
    )
    hostPath: Optional[HostPath] = Field(
        None,
        description='hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.',
    )
    iscsi: Optional[Iscsi] = Field(
        None,
        description="iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
    )
    name: str = Field(
        ...,
        description='name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    nfs: Optional[Nfs] = Field(
        None,
        description="nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    )
    persistentVolumeClaim: Optional[PersistentVolumeClaim] = Field(
        None,
        description='persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
    )
    photonPersistentDisk: Optional[PhotonPersistentDisk] = Field(
        None,
        description='photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine',
    )
    portworxVolume: Optional[PortworxVolume] = Field(
        None,
        description='portworxVolume represents a portworx volume attached and mounted on kubelets host machine',
    )
    projected: Optional[Projected] = Field(
        None,
        description='projected items for all in one resources secrets, configmaps, and downward API',
    )
    quobyte: Optional[Quobyte] = Field(
        None,
        description="quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
    )
    rbd: Optional[Rbd] = Field(
        None,
        description="rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
    )
    scaleIO: Optional[ScaleIO] = Field(
        None,
        description='scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.',
    )
    secret: Optional[SecretModel] = Field(
        None,
        description='secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret',
    )
    storageos: Optional[Storageos] = Field(
        None,
        description='storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.',
    )
    vsphereVolume: Optional[VsphereVolume] = Field(
        None,
        description='vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine',
    )


class SpecModel1(BaseModel):
    activeDeadlineSeconds: Optional[int] = Field(
        None,
        description='Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.',
    )
    affinity: Optional[Affinity] = Field(
        None, description="If specified, the pod's scheduling constraints"
    )
    automountServiceAccountToken: Optional[bool] = Field(
        None,
        description='AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.',
    )
    containers: List[Container] = Field(
        ...,
        description='List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.',
    )
    dnsConfig: Optional[DnsConfig] = Field(
        None,
        description='Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.',
    )
    dnsPolicy: Optional[str] = Field(
        None,
        description='Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are \'ClusterFirstWithHostNet\', \'ClusterFirst\', \'Default\' or \'None\'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to \'ClusterFirstWithHostNet\'.',
    )
    enableServiceLinks: Optional[bool] = Field(
        None,
        description="EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
    )
    ephemeralContainers: Optional[List[EphemeralContainer]] = Field(
        None,
        description="List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.",
    )
    hostAliases: Optional[List[HostAliase]] = Field(
        None,
        description="HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
    )
    hostIPC: Optional[bool] = Field(
        None, description="Use the host's ipc namespace. Optional: Default to false."
    )
    hostNetwork: Optional[bool] = Field(
        None,
        description="Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
    )
    hostPID: Optional[bool] = Field(
        None, description="Use the host's pid namespace. Optional: Default to false."
    )
    hostname: Optional[str] = Field(
        None,
        description="Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
    )
    imagePullSecrets: Optional[List[ImagePullSecret]] = Field(
        None,
        description='ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod',
    )
    initContainers: Optional[List[InitContainer]] = Field(
        None,
        description='List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/',
    )
    nodeName: Optional[str] = Field(
        None,
        description='NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.',
    )
    nodeSelector: Optional[Dict[str, str]] = Field(
        None,
        description="NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
    )
    os: Optional[Os] = Field(
        None,
        description='Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set. \n If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions \n If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup This is a beta field and requires the IdentifyPodOS feature',
    )
    overhead: Optional[Dict[str, Any]] = Field(
        None,
        description='Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md',
    )
    preemptionPolicy: Optional[str] = Field(
        None,
        description='PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.',
    )
    priority: Optional[int] = Field(
        None,
        description='The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.',
    )
    priorityClassName: Optional[str] = Field(
        None,
        description='If specified, indicates the pod\'s priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.',
    )
    readinessGates: Optional[List[ReadinessGate]] = Field(
        None,
        description='If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates',
    )
    restartPolicy: Optional[str] = Field(
        None,
        description='Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy',
    )
    runtimeClassName: Optional[str] = Field(
        None,
        description='RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class',
    )
    schedulerName: Optional[str] = Field(
        None,
        description='If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.',
    )
    securityContext: Optional[SecurityContextModel2] = Field(
        None,
        description='SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.',
    )
    serviceAccount: Optional[str] = Field(
        None,
        description='DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.',
    )
    serviceAccountName: Optional[str] = Field(
        None,
        description='ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/',
    )
    setHostnameAsFQDN: Optional[bool] = Field(
        None,
        description="If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\Tcpip\\\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.",
    )
    shareProcessNamespace: Optional[bool] = Field(
        None,
        description='Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.',
    )
    subdomain: Optional[str] = Field(
        None,
        description='If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.',
    )
    terminationGracePeriodSeconds: Optional[int] = Field(
        None,
        description='Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.',
    )
    tolerations: Optional[List[TolerationModel]] = Field(
        None, description="If specified, the pod's tolerations."
    )
    topologySpreadConstraints: Optional[List[TopologySpreadConstraint]] = Field(
        None,
        description='TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.',
    )
    volumes: Optional[List[Volume]] = Field(
        None,
        description='List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes',
    )


class Template(BaseModel):
    metadata: Optional[Any] = Field(
        None,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Optional[SpecModel1] = Field(
        None,
        description='Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status',
    )


class SpecModel2(BaseModel):
    minReadySeconds: Optional[int] = Field(
        None,
        description='Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)',
    )
    paused: Optional[bool] = Field(
        None, description='Indicates that the deployment is paused.'
    )
    progressDeadlineSeconds: Optional[int] = Field(
        None,
        description='The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.',
    )
    replicas: Optional[int] = Field(
        None,
        description='Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.',
    )
    revisionHistoryLimit: Optional[int] = Field(
        None,
        description='The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.',
    )
    selector: Selector = Field(
        ...,
        description="Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.",
    )
    strategy: Optional[Strategy] = Field(
        None,
        description='The deployment strategy to use to replace existing pods with new ones.',
    )
    template: Template = Field(
        ..., description='Template describes the pods that will be created.'
    )


class Deployment(BaseModel):
    label: Optional[Dict[str, str]] = Field(
        None, description='Set is a map of label:value. It implements Labels.'
    )
    name: str
    spec: SpecModel2 = Field(
        ...,
        description='DeploymentSpec is the specification of the desired behavior of the Deployment.',
    )


class RuleModel(BaseModel):
    apiGroups: Optional[List[str]] = Field(
        None,
        description='APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.',
    )
    nonResourceURLs: Optional[List[str]] = Field(
        None,
        description='NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.',
    )
    resourceNames: Optional[List[str]] = Field(
        None,
        description='ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.',
    )
    resources: Optional[List[str]] = Field(
        None,
        description="Resources is a list of resources this rule applies to. '*' represents all resources.",
    )
    verbs: List[str] = Field(
        ...,
        description="Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.",
    )


class Permission(BaseModel):
    rules: List[RuleModel]
    serviceAccountName: str


class SpecModel3(BaseModel):
    clusterPermissions: Optional[List[ClusterPermission]] = None
    deployments: List[Deployment]
    permissions: Optional[List[Permission]] = None


class Install(BaseModel):
    spec: Optional[SpecModel3] = Field(
        None,
        description='StrategyDetailsDeployment represents the parsed details of a Deployment InstallStrategy.',
    )
    strategy: str


class InstallMode(BaseModel):
    supported: bool
    type: str = Field(
        ...,
        description='InstallModeType is a supported type of install mode for CSV installation',
    )


class Link(BaseModel):
    name: Optional[str] = None
    url: Optional[str] = None


class Maintainer(BaseModel):
    email: Optional[str] = None
    name: Optional[str] = None


class NativeAPI(BaseModel):
    group: str
    kind: str
    version: str


class Provider(BaseModel):
    name: Optional[str] = None
    url: Optional[str] = None


class RelatedImage(BaseModel):
    image: str
    name: str


class MatchExpressionModel12(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class SelectorModel1(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel12]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class MatchExpressionModel13(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class ObjectSelector(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel13]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class RuleModel1(BaseModel):
    apiGroups: Optional[List[str]] = Field(
        None,
        description="APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.",
    )
    apiVersions: Optional[List[str]] = Field(
        None,
        description="APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.",
    )
    operations: Optional[List[str]] = Field(
        None,
        description="Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.",
    )
    resources: Optional[List[str]] = Field(
        None,
        description="Resources is a list of resources this rule applies to. \n For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources. \n If wildcard is present, the validation rule will ensure resources do not overlap with each other. \n Depending on the enclosing object, subresources might not be allowed. Required.",
    )
    scope: Optional[str] = Field(
        None,
        description='scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".',
    )


class Type(Enum):
    ValidatingAdmissionWebhook = 'ValidatingAdmissionWebhook'
    MutatingAdmissionWebhook = 'MutatingAdmissionWebhook'
    ConversionWebhook = 'ConversionWebhook'


class Webhookdefinition(BaseModel):
    admissionReviewVersions: List[str]
    containerPort: Optional[conint(ge=1, le=65535)] = None
    conversionCRDs: Optional[List[str]] = None
    deploymentName: Optional[str] = None
    failurePolicy: Optional[str] = Field(
        None,
        description='FailurePolicyType specifies a failure policy that defines how unrecognized errors from the admission endpoint are handled.',
    )
    generateName: str
    matchPolicy: Optional[str] = Field(
        None, description='MatchPolicyType specifies the type of match policy.'
    )
    objectSelector: Optional[ObjectSelector] = Field(
        None,
        description='A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.',
    )
    reinvocationPolicy: Optional[str] = Field(
        None,
        description='ReinvocationPolicyType specifies what type of policy the admission hook uses.',
    )
    rules: Optional[List[RuleModel1]] = None
    sideEffects: str = Field(
        ...,
        description='SideEffectClass specifies the types of side effects a webhook may have.',
    )
    targetPort: Optional[Any] = None
    timeoutSeconds: Optional[int] = None
    type: Type = Field(
        ...,
        description='WebhookAdmissionType is the type of admission webhooks supported by OLM',
    )
    webhookPath: Optional[str] = None


class SpecModel4(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description='Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.',
    )
    apiservicedefinitions: Optional[Apiservicedefinitions] = Field(
        None,
        description='APIServiceDefinitions declares all of the extension apis managed or required by an operator being ran by ClusterServiceVersion.',
    )
    cleanup: Optional[Cleanup] = Field(
        None,
        description='Cleanup specifies the cleanup behaviour when the CSV gets deleted',
    )
    customresourcedefinitions: Optional[Customresourcedefinitions] = Field(
        None,
        description='CustomResourceDefinitions declares all of the CRDs managed or required by an operator being ran by ClusterServiceVersion. \n If the CRD is present in the Owned list, it is implicitly required.',
    )
    description: Optional[str] = None
    displayName: str
    icon: Optional[List[IconItem]] = None
    install: Install = Field(
        ...,
        description='NamedInstallStrategy represents the block of an ClusterServiceVersion resource where the install strategy is specified.',
    )
    installModes: Optional[List[InstallMode]] = Field(
        None, description='InstallModes specify supported installation types'
    )
    keywords: Optional[List[str]] = None
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Map of string keys and values that can be used to organize and categorize (scope and select) objects.',
    )
    links: Optional[List[Link]] = None
    maintainers: Optional[List[Maintainer]] = None
    maturity: Optional[str] = None
    minKubeVersion: Optional[str] = None
    nativeAPIs: Optional[List[NativeAPI]] = None
    provider: Optional[Provider] = None
    relatedImages: Optional[List[RelatedImage]] = Field(
        None,
        description='List any related images, or other container images that your Operator might require to perform their functions. This list should also include operand images as well. All image references should be specified by digest (SHA) and not by tag. This field is only used during catalog creation and plays no part in cluster runtime.',
    )
    replaces: Optional[str] = Field(
        None,
        description='The name of a CSV this one replaces. Should match the `metadata.Name` field of the old CSV.',
    )
    selector: Optional[SelectorModel1] = Field(
        None, description='Label selector for related resources.'
    )
    skips: Optional[List[str]] = Field(
        None,
        description='The name(s) of one or more CSV(s) that should be skipped in the upgrade graph. Should match the `metadata.Name` field of the CSV that should be skipped. This field is only used during catalog creation and plays no part in cluster runtime.',
    )
    version: Optional[str] = None
    webhookdefinitions: Optional[List[Webhookdefinition]] = None


class Instance(BaseModel):
    name: str
    namespace: Optional[str] = Field(
        None, description='Namespace can be empty for cluster-scoped resources'
    )


class PendingDeletionItem(BaseModel):
    group: str
    instances: List[Instance]
    kind: str


class CleanupModel(BaseModel):
    pendingDeletion: Optional[List[PendingDeletionItem]] = Field(
        None,
        description='PendingDeletion is the list of custom resource objects that are pending deletion and blocked on finalizers. This indicates the progress of cleanup that is blocking CSV deletion or operator uninstall.',
    )


class ConditionModel(BaseModel):
    lastTransitionTime: Optional[datetime] = Field(
        None,
        description='Last time the status transitioned from one status to another.',
    )
    lastUpdateTime: Optional[datetime] = Field(
        None, description='Last time we updated the status'
    )
    message: Optional[str] = Field(
        None,
        description='A human readable message indicating details about why the ClusterServiceVersion is in this condition.',
    )
    phase: Optional[str] = Field(
        None, description='Condition of the ClusterServiceVersion'
    )
    reason: Optional[str] = Field(
        None,
        description="A brief CamelCase message indicating details about why the ClusterServiceVersion is in this state. e.g. 'RequirementsNotMet'",
    )


class Dependent(BaseModel):
    group: str
    kind: str
    message: Optional[str] = None
    status: str = Field(
        ...,
        description='StatusReason is a camelcased reason for the status of a RequirementStatus or DependentStatus',
    )
    uuid: Optional[str] = None
    version: str


class RequirementStatu(BaseModel):
    dependents: Optional[List[Dependent]] = None
    group: str
    kind: str
    message: str
    name: str
    status: str = Field(
        ...,
        description='StatusReason is a camelcased reason for the status of a RequirementStatus or DependentStatus',
    )
    uuid: Optional[str] = None
    version: str


class StatusModel1(BaseModel):
    certsLastUpdated: Optional[datetime] = Field(
        None, description='Last time the owned APIService certs were updated'
    )
    certsRotateAt: Optional[datetime] = Field(
        None, description='Time the owned APIService certs will rotate next'
    )
    cleanup: Optional[CleanupModel] = Field(
        None,
        description='CleanupStatus represents information about the status of cleanup while a CSV is pending deletion',
    )
    conditions: Optional[List[ConditionModel]] = Field(
        None, description='List of conditions, a history of state transitions'
    )
    lastTransitionTime: Optional[datetime] = Field(
        None,
        description='Last time the status transitioned from one status to another.',
    )
    lastUpdateTime: Optional[datetime] = Field(
        None, description='Last time we updated the status'
    )
    message: Optional[str] = Field(
        None,
        description='A human readable message indicating details about why the ClusterServiceVersion is in this condition.',
    )
    phase: Optional[str] = Field(
        None, description='Current condition of the ClusterServiceVersion'
    )
    reason: Optional[str] = Field(
        None,
        description="A brief CamelCase message indicating details about why the ClusterServiceVersion is in this state. e.g. 'RequirementsNotMet'",
    )
    requirementStatus: Optional[List[RequirementStatu]] = Field(
        None, description='The status of each requirement for this CSV'
    )


class SpecModel5(BaseModel):
    approval: str = Field(
        ...,
        description='Approval is the user approval policy for an InstallPlan. It must be one of "Automatic" or "Manual".',
    )
    approved: bool
    clusterServiceVersionNames: List[str]
    generation: Optional[int] = None
    source: Optional[str] = None
    sourceNamespace: Optional[str] = None


class AttenuatedServiceAccountRef(BaseModel):
    apiVersion: Optional[str] = Field(None, description='API version of the referent.')
    fieldPath: Optional[str] = Field(
        None,
        description='If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )
    resourceVersion: Optional[str] = Field(
        None,
        description='Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
    )
    uid: Optional[str] = Field(
        None,
        description='UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids',
    )


class CatalogSourceRef(BaseModel):
    apiVersion: Optional[str] = Field(None, description='API version of the referent.')
    fieldPath: Optional[str] = Field(
        None,
        description='If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )
    resourceVersion: Optional[str] = Field(
        None,
        description='Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
    )
    uid: Optional[str] = Field(
        None,
        description='UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids',
    )


class ConditionModel1(BaseModel):
    lastTransitionTime: Optional[datetime] = Field(
        None,
        description='Last time the condition transitioned from one status to another.',
    )
    lastUpdateTime: Optional[datetime] = Field(
        None, description='Last time the condition was probed.'
    )
    message: Optional[str] = Field(
        None,
        description='A human readable message indicating details about the transition.',
    )
    reason: Optional[str] = Field(
        None, description="The reason for the condition's last transition."
    )
    status: str = Field(
        ..., description='Status of the condition, one of True, False, Unknown.'
    )
    type: str = Field(..., description='Type of condition.')


class BundleLookup(BaseModel):
    catalogSourceRef: CatalogSourceRef = Field(
        ...,
        description='CatalogSourceRef is a reference to the CatalogSource the bundle path was resolved from.',
    )
    conditions: Optional[List[ConditionModel1]] = Field(
        None, description='Conditions represents the overall state of a BundleLookup.'
    )
    identifier: str = Field(
        ...,
        description='Identifier is the catalog-unique name of the operator (the name of the CSV for bundles that contain CSVs)',
    )
    path: str = Field(
        ...,
        description="Path refers to the location of a bundle to pull. It's typically an image reference.",
    )
    properties: Optional[str] = Field(
        None, description='The effective properties of the unpacked bundle.'
    )
    replaces: str = Field(
        ...,
        description='Replaces is the name of the bundle to replace with the one found at Path.',
    )


class ConditionModel2(BaseModel):
    lastTransitionTime: Optional[datetime] = None
    lastUpdateTime: Optional[datetime] = None
    message: Optional[str] = None
    reason: Optional[str] = Field(
        None,
        description='ConditionReason is a camelcased reason for the state transition.',
    )
    status: Optional[str] = None
    type: Optional[str] = Field(
        None,
        description='InstallPlanConditionType describes the state of an InstallPlan at a certain point as a whole.',
    )


class ResourceModel3(BaseModel):
    group: str
    kind: str
    manifest: Optional[str] = None
    name: str
    sourceName: str
    sourceNamespace: str
    version: str


class PlanItem(BaseModel):
    optional: Optional[bool] = None
    resolving: str
    resource: ResourceModel3 = Field(
        ...,
        description='StepResource represents the status of a resource to be tracked by an InstallPlan.',
    )
    status: str = Field(
        ...,
        description='StepStatus is the current status of a particular resource an in InstallPlan',
    )


class StatusModel2(BaseModel):
    attenuatedServiceAccountRef: Optional[AttenuatedServiceAccountRef] = Field(
        None,
        description='AttenuatedServiceAccountRef references the service account that is used to do scoped operator install.',
    )
    bundleLookups: Optional[List[BundleLookup]] = Field(
        None,
        description='BundleLookups is the set of in-progress requests to pull and unpackage bundle content to the cluster.',
    )
    catalogSources: List[str]
    conditions: Optional[List[ConditionModel2]] = None
    message: Optional[str] = Field(
        None,
        description='Message is a human-readable message containing detailed information that may be important to understanding why the plan has its current status.',
    )
    phase: str = Field(
        ...,
        description='InstallPlanPhase is the current status of a InstallPlan as a whole.',
    )
    plan: Optional[List[PlanItem]] = None
    startTime: Optional[datetime] = Field(
        None,
        description='StartTime is the time when the controller began applying the resources listed in the plan to the cluster.',
    )


class ConfigMapKeyRefModel2(BaseModel):
    key: str = Field(..., description='The key to select.')
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap or its key must be defined'
    )


class FieldRefModel4(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel4(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class SecretKeyRefModel2(BaseModel):
    key: str = Field(
        ...,
        description='The key of the secret to select from.  Must be a valid secret key.',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret or its key must be defined'
    )


class ValueFromModel2(BaseModel):
    configMapKeyRef: Optional[ConfigMapKeyRefModel2] = Field(
        None, description='Selects a key of a ConfigMap.'
    )
    fieldRef: Optional[FieldRefModel4] = Field(
        None,
        description="Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel4] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.',
    )
    secretKeyRef: Optional[SecretKeyRefModel2] = Field(
        None, description="Selects a key of a secret in the pod's namespace"
    )


class EnvItemModel2(BaseModel):
    name: str = Field(
        ..., description='Name of the environment variable. Must be a C_IDENTIFIER.'
    )
    value: Optional[str] = Field(
        None,
        description='Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".',
    )
    valueFrom: Optional[ValueFromModel2] = Field(
        None,
        description="Source for the environment variable's value. Cannot be used if value is not empty.",
    )


class ConfigMapRefModel2(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the ConfigMap must be defined'
    )


class SecretRefModel9(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None, description='Specify whether the Secret must be defined'
    )


class EnvFromItemModel2(BaseModel):
    configMapRef: Optional[ConfigMapRefModel2] = Field(
        None, description='The ConfigMap to select from'
    )
    prefix: Optional[str] = Field(
        None,
        description='An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.',
    )
    secretRef: Optional[SecretRefModel9] = Field(
        None, description='The Secret to select from'
    )


class ResourcesModel3(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class MatchExpressionModel14(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class SelectorModel2(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel14]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class TolerationModel1(BaseModel):
    effect: Optional[str] = Field(
        None,
        description='Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.',
    )
    key: Optional[str] = Field(
        None,
        description='Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.',
    )
    operator: Optional[str] = Field(
        None,
        description="Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
    )
    tolerationSeconds: Optional[int] = Field(
        None,
        description='TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.',
    )
    value: Optional[str] = Field(
        None,
        description='Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.',
    )


class VolumeMountModel2(BaseModel):
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted.  Must not contain ':'.",
    )
    mountPropagation: Optional[str] = Field(
        None,
        description='mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.',
    )
    name: str = Field(..., description='This must match the Name of a Volume.')
    readOnly: Optional[bool] = Field(
        None,
        description='Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.',
    )
    subPath: Optional[str] = Field(
        None,
        description='Path within the volume from which the container\'s volume should be mounted. Defaults to "" (volume\'s root).',
    )
    subPathExpr: Optional[str] = Field(
        None,
        description='Expanded path within the volume from which the container\'s volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container\'s environment. Defaults to "" (volume\'s root). SubPathExpr and SubPath are mutually exclusive.',
    )


class AwsElasticBlockStoreModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    partition: Optional[int] = Field(
        None,
        description='partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
    )
    volumeID: str = Field(
        ...,
        description='volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore',
    )


class AzureDiskModel(BaseModel):
    cachingMode: Optional[str] = Field(
        None,
        description='cachingMode is the Host Caching mode: None, Read Only, Read Write.',
    )
    diskName: str = Field(
        ..., description='diskName is the Name of the data disk in the blob storage'
    )
    diskURI: str = Field(
        ..., description='diskURI is the URI of data disk in the blob storage'
    )
    fsType: Optional[str] = Field(
        None,
        description='fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    kind: Optional[str] = Field(
        None,
        description='kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )


class AzureFileModel(BaseModel):
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretName: str = Field(
        ...,
        description='secretName is the  name of secret that contains Azure Storage Account Name and Key',
    )
    shareName: str = Field(..., description='shareName is the azure share Name')


class SecretRefModel10(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class CephfsModel(BaseModel):
    monitors: List[str] = Field(
        ...,
        description='monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    path: Optional[str] = Field(
        None,
        description='path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    secretFile: Optional[str] = Field(
        None,
        description='secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    secretRef: Optional[SecretRefModel10] = Field(
        None,
        description='secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )
    user: Optional[str] = Field(
        None,
        description='user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it',
    )


class SecretRefModel11(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class CinderModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    secretRef: Optional[SecretRefModel11] = Field(
        None,
        description='secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.',
    )
    volumeID: str = Field(
        ...,
        description='volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )


class ItemModel5(BaseModel):
    key: str = Field(..., description='key is the key to project.')
    mode: Optional[int] = Field(
        None,
        description='mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class ConfigMapModel1(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    items: Optional[List[ItemModel5]] = Field(
        None,
        description="items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None,
        description='optional specify whether the ConfigMap or its keys must be defined',
    )


class NodePublishSecretRefModel(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class CsiModel(BaseModel):
    driver: str = Field(
        ...,
        description='driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.',
    )
    fsType: Optional[str] = Field(
        None,
        description='fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.',
    )
    nodePublishSecretRef: Optional[NodePublishSecretRefModel] = Field(
        None,
        description='nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).',
    )
    volumeAttributes: Optional[Dict[str, str]] = Field(
        None,
        description="volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
    )


class FieldRefModel5(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel5(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class ItemModel6(BaseModel):
    fieldRef: Optional[FieldRefModel5] = Field(
        None,
        description='Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.',
    )
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel5] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.',
    )


class DownwardAPIModel1(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    items: Optional[List[ItemModel6]] = Field(
        None, description='Items is a list of downward API volume file'
    )


class EmptyDirModel(BaseModel):
    medium: Optional[str] = Field(
        None,
        description='medium represents what type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
    )
    sizeLimit: Optional[Any] = Field(
        None,
        description='sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir',
    )


class DataSourceModel(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class DataSourceRefModel(BaseModel):
    apiGroup: Optional[str] = Field(
        None,
        description='APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.',
    )
    kind: str = Field(..., description='Kind is the type of resource being referenced')
    name: str = Field(..., description='Name is the name of resource being referenced')


class ResourcesModel4(BaseModel):
    limits: Optional[Dict[str, Any]] = Field(
        None,
        description='Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )
    requests: Optional[Dict[str, Any]] = Field(
        None,
        description='Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/',
    )


class MatchExpressionModel15(BaseModel):
    key: str = Field(
        ..., description='key is the label key that the selector applies to.'
    )
    operator: str = Field(
        ...,
        description="operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
    )
    values: Optional[List[str]] = Field(
        None,
        description='values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.',
    )


class SelectorModel3(BaseModel):
    matchExpressions: Optional[List[MatchExpressionModel15]] = Field(
        None,
        description='matchExpressions is a list of label selector requirements. The requirements are ANDed.',
    )
    matchLabels: Optional[Dict[str, str]] = Field(
        None,
        description='matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.',
    )


class SpecModel6(BaseModel):
    accessModes: Optional[List[str]] = Field(
        None,
        description='accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1',
    )
    dataSource: Optional[DataSourceModel] = Field(
        None,
        description='dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.',
    )
    dataSourceRef: Optional[DataSourceRefModel] = Field(
        None,
        description='dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.',
    )
    resources: Optional[ResourcesModel4] = Field(
        None,
        description='resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources',
    )
    selector: Optional[SelectorModel3] = Field(
        None,
        description='selector is a label query over volumes to consider for binding.',
    )
    storageClassName: Optional[str] = Field(
        None,
        description='storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1',
    )
    volumeMode: Optional[str] = Field(
        None,
        description='volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='volumeName is the binding reference to the PersistentVolume backing this claim.',
    )


class VolumeClaimTemplateModel(BaseModel):
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.',
    )
    spec: SpecModel6 = Field(
        ...,
        description='The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.',
    )


class EphemeralModel(BaseModel):
    volumeClaimTemplate: Optional[VolumeClaimTemplateModel] = Field(
        None,
        description='Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). \n An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. \n This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. \n Required, must not be nil.',
    )


class FcModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    lun: Optional[int] = Field(
        None, description='lun is Optional: FC target lun number'
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    targetWWNs: Optional[List[str]] = Field(
        None, description='targetWWNs is Optional: FC target worldwide names (WWNs)'
    )
    wwids: Optional[List[str]] = Field(
        None,
        description='wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.',
    )


class SecretRefModel12(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class FlexVolumeModel(BaseModel):
    driver: str = Field(
        ..., description='driver is the name of the driver to use for this volume.'
    )
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.',
    )
    options: Optional[Dict[str, str]] = Field(
        None,
        description='options is Optional: this field holds extra command options if any.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretRef: Optional[SecretRefModel12] = Field(
        None,
        description='secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.',
    )


class FlockerModel(BaseModel):
    datasetName: Optional[str] = Field(
        None,
        description='datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated',
    )
    datasetUUID: Optional[str] = Field(
        None,
        description='datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset',
    )


class GcePersistentDiskModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    partition: Optional[int] = Field(
        None,
        description='partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )
    pdName: str = Field(
        ...,
        description='pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk',
    )


class GitRepoModel(BaseModel):
    directory: Optional[str] = Field(
        None,
        description="directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
    )
    repository: str = Field(..., description='repository is the URL')
    revision: Optional[str] = Field(
        None, description='revision is the commit hash for the specified revision.'
    )


class GlusterfsModel(BaseModel):
    endpoints: str = Field(
        ...,
        description='endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
    )
    path: str = Field(
        ...,
        description='path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod',
    )


class HostPathModel(BaseModel):
    path: str = Field(
        ...,
        description='path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
    )
    type: Optional[str] = Field(
        None,
        description='type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath',
    )


class SecretRefModel13(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class IscsiModel(BaseModel):
    chapAuthDiscovery: Optional[bool] = Field(
        None,
        description='chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication',
    )
    chapAuthSession: Optional[bool] = Field(
        None,
        description='chapAuthSession defines whether support iSCSI Session CHAP authentication',
    )
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    initiatorName: Optional[str] = Field(
        None,
        description='initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.',
    )
    iqn: str = Field(..., description='iqn is the target iSCSI Qualified Name.')
    iscsiInterface: Optional[str] = Field(
        None,
        description="iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
    )
    lun: int = Field(..., description='lun represents iSCSI Target Lun number.')
    portals: Optional[List[str]] = Field(
        None,
        description='portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.',
    )
    secretRef: Optional[SecretRefModel13] = Field(
        None,
        description='secretRef is the CHAP Secret for iSCSI target and initiator authentication',
    )
    targetPortal: str = Field(
        ...,
        description='targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).',
    )


class NfsModel(BaseModel):
    path: str = Field(
        ...,
        description='path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
    )
    server: str = Field(
        ...,
        description='server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs',
    )


class PersistentVolumeClaimModel(BaseModel):
    claimName: str = Field(
        ...,
        description='claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly Will force the ReadOnly setting in VolumeMounts. Default false.',
    )


class PhotonPersistentDiskModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    pdID: str = Field(
        ...,
        description='pdID is the ID that identifies Photon Controller persistent disk',
    )


class PortworxVolumeModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    volumeID: str = Field(
        ..., description='volumeID uniquely identifies a Portworx volume'
    )


class ItemModel7(BaseModel):
    key: str = Field(..., description='key is the key to project.')
    mode: Optional[int] = Field(
        None,
        description='mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class ConfigMapModel2(BaseModel):
    items: Optional[List[ItemModel7]] = Field(
        None,
        description="items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None,
        description='optional specify whether the ConfigMap or its keys must be defined',
    )


class FieldRefModel6(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='Version of the schema the FieldPath is written in terms of, defaults to "v1".',
    )
    fieldPath: str = Field(
        ..., description='Path of the field to select in the specified API version.'
    )


class ResourceFieldRefModel6(BaseModel):
    containerName: Optional[str] = Field(
        None, description='Container name: required for volumes, optional for env vars'
    )
    divisor: Optional[Any] = Field(
        None,
        description='Specifies the output format of the exposed resources, defaults to "1"',
    )
    resource: str = Field(..., description='Required: resource to select')


class ItemModel8(BaseModel):
    fieldRef: Optional[FieldRefModel6] = Field(
        None,
        description='Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.',
    )
    mode: Optional[int] = Field(
        None,
        description='Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
    )
    resourceFieldRef: Optional[ResourceFieldRefModel6] = Field(
        None,
        description='Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.',
    )


class DownwardAPIModel2(BaseModel):
    items: Optional[List[ItemModel8]] = Field(
        None, description='Items is a list of DownwardAPIVolume file'
    )


class ItemModel9(BaseModel):
    key: str = Field(..., description='key is the key to project.')
    mode: Optional[int] = Field(
        None,
        description='mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class SecretModel1(BaseModel):
    items: Optional[List[ItemModel9]] = Field(
        None,
        description="items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )
    optional: Optional[bool] = Field(
        None,
        description='optional field specify whether the Secret or its key must be defined',
    )


class ServiceAccountTokenModel(BaseModel):
    audience: Optional[str] = Field(
        None,
        description='audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.',
    )
    expirationSeconds: Optional[int] = Field(
        None,
        description='expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.',
    )
    path: str = Field(
        ...,
        description='path is the path relative to the mount point of the file to project the token into.',
    )


class SourceModel(BaseModel):
    configMap: Optional[ConfigMapModel2] = Field(
        None, description='configMap information about the configMap data to project'
    )
    downwardAPI: Optional[DownwardAPIModel2] = Field(
        None,
        description='downwardAPI information about the downwardAPI data to project',
    )
    secret: Optional[SecretModel1] = Field(
        None, description='secret information about the secret data to project'
    )
    serviceAccountToken: Optional[ServiceAccountTokenModel] = Field(
        None,
        description='serviceAccountToken is information about the serviceAccountToken data to project',
    )


class ProjectedModel(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    sources: Optional[List[SourceModel]] = Field(
        None, description='sources is the list of volume projections'
    )


class QuobyteModel(BaseModel):
    group: Optional[str] = Field(
        None, description='group to map volume access to Default is no group'
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.',
    )
    registry: str = Field(
        ...,
        description='registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes',
    )
    tenant: Optional[str] = Field(
        None,
        description='tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin',
    )
    user: Optional[str] = Field(
        None, description='user to map volume access to Defaults to serivceaccount user'
    )
    volume: str = Field(
        ...,
        description='volume is a string that references an already created Quobyte volume by name.',
    )


class SecretRefModel14(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class RbdModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine',
    )
    image: str = Field(
        ...,
        description='image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    keyring: Optional[str] = Field(
        None,
        description='keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    monitors: List[str] = Field(
        ...,
        description='monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    pool: Optional[str] = Field(
        None,
        description='pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    secretRef: Optional[SecretRefModel14] = Field(
        None,
        description='secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )
    user: Optional[str] = Field(
        None,
        description='user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it',
    )


class SecretRefModel15(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class ScaleIOModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".',
    )
    gateway: str = Field(
        ..., description='gateway is the host address of the ScaleIO API Gateway.'
    )
    protectionDomain: Optional[str] = Field(
        None,
        description='protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretRef: SecretRefModel15 = Field(
        ...,
        description='secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.',
    )
    sslEnabled: Optional[bool] = Field(
        None,
        description='sslEnabled Flag enable/disable SSL communication with Gateway, default false',
    )
    storageMode: Optional[str] = Field(
        None,
        description='storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.',
    )
    storagePool: Optional[str] = Field(
        None,
        description='storagePool is the ScaleIO Storage Pool associated with the protection domain.',
    )
    system: str = Field(
        ...,
        description='system is the name of the storage system as configured in ScaleIO.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.',
    )


class ItemModel10(BaseModel):
    key: str = Field(..., description='key is the key to project.')
    mode: Optional[int] = Field(
        None,
        description='mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    path: str = Field(
        ...,
        description="path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
    )


class SecretModel2(BaseModel):
    defaultMode: Optional[int] = Field(
        None,
        description='defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.',
    )
    items: Optional[List[ItemModel10]] = Field(
        None,
        description="items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
    )
    optional: Optional[bool] = Field(
        None,
        description='optional field specify whether the Secret or its keys must be defined',
    )
    secretName: Optional[str] = Field(
        None,
        description="secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
    )


class SecretRefModel16(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?',
    )


class StorageosModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    readOnly: Optional[bool] = Field(
        None,
        description='readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.',
    )
    secretRef: Optional[SecretRefModel16] = Field(
        None,
        description='secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.',
    )
    volumeName: Optional[str] = Field(
        None,
        description='volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.',
    )
    volumeNamespace: Optional[str] = Field(
        None,
        description='volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod\'s namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.',
    )


class VsphereVolumeModel(BaseModel):
    fsType: Optional[str] = Field(
        None,
        description='fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.',
    )
    storagePolicyID: Optional[str] = Field(
        None,
        description='storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.',
    )
    storagePolicyName: Optional[str] = Field(
        None,
        description='storagePolicyName is the storage Policy Based Management (SPBM) profile name.',
    )
    volumePath: str = Field(
        ..., description='volumePath is the path that identifies vSphere volume vmdk'
    )


class VolumeModel(BaseModel):
    awsElasticBlockStore: Optional[AwsElasticBlockStoreModel] = Field(
        None,
        description="awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
    )
    azureDisk: Optional[AzureDiskModel] = Field(
        None,
        description='azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.',
    )
    azureFile: Optional[AzureFileModel] = Field(
        None,
        description='azureFile represents an Azure File Service mount on the host and bind mount to the pod.',
    )
    cephfs: Optional[CephfsModel] = Field(
        None,
        description="cephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
    )
    cinder: Optional[CinderModel] = Field(
        None,
        description='cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md',
    )
    configMap: Optional[ConfigMapModel1] = Field(
        None,
        description='configMap represents a configMap that should populate this volume',
    )
    csi: Optional[CsiModel] = Field(
        None,
        description='csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).',
    )
    downwardAPI: Optional[DownwardAPIModel1] = Field(
        None,
        description='downwardAPI represents downward API about the pod that should populate this volume',
    )
    emptyDir: Optional[EmptyDirModel] = Field(
        None,
        description="emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
    )
    ephemeral: Optional[EphemeralModel] = Field(
        None,
        description="ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. \n Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). \n Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. \n Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. \n A pod can use both types of ephemeral volumes and persistent volumes at the same time.",
    )
    fc: Optional[FcModel] = Field(
        None,
        description="fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
    )
    flexVolume: Optional[FlexVolumeModel] = Field(
        None,
        description='flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.',
    )
    flocker: Optional[FlockerModel] = Field(
        None,
        description="flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
    )
    gcePersistentDisk: Optional[GcePersistentDiskModel] = Field(
        None,
        description="gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
    )
    gitRepo: Optional[GitRepoModel] = Field(
        None,
        description="gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
    )
    glusterfs: Optional[GlusterfsModel] = Field(
        None,
        description="glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
    )
    hostPath: Optional[HostPathModel] = Field(
        None,
        description='hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.',
    )
    iscsi: Optional[IscsiModel] = Field(
        None,
        description="iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
    )
    name: str = Field(
        ...,
        description='name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    nfs: Optional[NfsModel] = Field(
        None,
        description="nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
    )
    persistentVolumeClaim: Optional[PersistentVolumeClaimModel] = Field(
        None,
        description='persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims',
    )
    photonPersistentDisk: Optional[PhotonPersistentDiskModel] = Field(
        None,
        description='photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine',
    )
    portworxVolume: Optional[PortworxVolumeModel] = Field(
        None,
        description='portworxVolume represents a portworx volume attached and mounted on kubelets host machine',
    )
    projected: Optional[ProjectedModel] = Field(
        None,
        description='projected items for all in one resources secrets, configmaps, and downward API',
    )
    quobyte: Optional[QuobyteModel] = Field(
        None,
        description="quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
    )
    rbd: Optional[RbdModel] = Field(
        None,
        description="rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
    )
    scaleIO: Optional[ScaleIOModel] = Field(
        None,
        description='scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.',
    )
    secret: Optional[SecretModel2] = Field(
        None,
        description='secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret',
    )
    storageos: Optional[StorageosModel] = Field(
        None,
        description='storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.',
    )
    vsphereVolume: Optional[VsphereVolumeModel] = Field(
        None,
        description='vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine',
    )


class Config(BaseModel):
    env: Optional[List[EnvItemModel2]] = Field(
        None,
        description='Env is a list of environment variables to set in the container. Cannot be updated.',
    )
    envFrom: Optional[List[EnvFromItemModel2]] = Field(
        None,
        description='EnvFrom is a list of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Immutable.',
    )
    nodeSelector: Optional[Dict[str, str]] = Field(
        None,
        description="NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
    )
    resources: Optional[ResourcesModel3] = Field(
        None,
        description='Resources represents compute resources required by this container. Immutable. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/',
    )
    selector: Optional[SelectorModel2] = Field(
        None,
        description="Selector is the label selector for pods to be configured. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.",
    )
    tolerations: Optional[List[TolerationModel1]] = Field(
        None, description="Tolerations are the pod's tolerations."
    )
    volumeMounts: Optional[List[VolumeMountModel2]] = Field(
        None, description='List of VolumeMounts to set in the container.'
    )
    volumes: Optional[List[VolumeModel]] = Field(
        None, description='List of Volumes to set in the podSpec.'
    )


class SpecModel7(BaseModel):
    channel: Optional[str] = None
    config: Optional[Config] = Field(
        None,
        description='SubscriptionConfig contains configuration specified for a subscription.',
    )
    installPlanApproval: Optional[str] = Field(
        None,
        description='Approval is the user approval policy for an InstallPlan. It must be one of "Automatic" or "Manual".',
    )
    name: str
    source: str
    sourceNamespace: str
    startingCSV: Optional[str] = None


class CatalogSourceRefModel(BaseModel):
    apiVersion: Optional[str] = Field(None, description='API version of the referent.')
    fieldPath: Optional[str] = Field(
        None,
        description='If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )
    resourceVersion: Optional[str] = Field(
        None,
        description='Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
    )
    uid: Optional[str] = Field(
        None,
        description='UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids',
    )


class CatalogHealthItem(BaseModel):
    catalogSourceRef: CatalogSourceRefModel = Field(
        ..., description='CatalogSourceRef is a reference to a CatalogSource.'
    )
    healthy: bool = Field(
        ...,
        description='Healthy is true if the CatalogSource is healthy; false otherwise.',
    )
    lastUpdated: datetime = Field(
        ...,
        description='LastUpdated represents the last time that the CatalogSourceHealth changed',
    )


class ConditionModel3(BaseModel):
    lastHeartbeatTime: Optional[datetime] = Field(
        None,
        description='LastHeartbeatTime is the last time we got an update on a given condition',
    )
    lastTransitionTime: Optional[datetime] = Field(
        None,
        description='LastTransitionTime is the last time the condition transit from one status to another',
    )
    message: Optional[str] = Field(
        None,
        description='Message is a human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        None,
        description="Reason is a one-word CamelCase reason for the condition's last transition.",
    )
    status: str = Field(
        ...,
        description='Status is the status of the condition, one of True, False, Unknown.',
    )
    type: str = Field(..., description='Type is the type of Subscription condition.')


class InstallPlanRef(BaseModel):
    apiVersion: Optional[str] = Field(None, description='API version of the referent.')
    fieldPath: Optional[str] = Field(
        None,
        description='If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )
    resourceVersion: Optional[str] = Field(
        None,
        description='Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency',
    )
    uid: Optional[str] = Field(
        None,
        description='UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids',
    )


class Installplan(BaseModel):
    apiVersion: str
    kind: str
    name: str
    uuid: str = Field(
        ...,
        description="UID is a type that holds unique ID values, including UUIDs.  Because we don't ONLY use UUIDs, this is an alias to string.  Being a type captures intent and helps make sure that UIDs and names do not get conflated.",
    )


class StatusModel3(BaseModel):
    catalogHealth: Optional[List[CatalogHealthItem]] = Field(
        None,
        description="CatalogHealth contains the Subscription's view of its relevant CatalogSources' status. It is used to determine SubscriptionStatusConditions related to CatalogSources.",
    )
    conditions: Optional[List[ConditionModel3]] = Field(
        None,
        description="Conditions is a list of the latest available observations about a Subscription's current state.",
    )
    currentCSV: Optional[str] = Field(
        None, description='CurrentCSV is the CSV the Subscription is progressing to.'
    )
    installPlanGeneration: Optional[int] = Field(
        None,
        description='InstallPlanGeneration is the current generation of the installplan',
    )
    installPlanRef: Optional[InstallPlanRef] = Field(
        None,
        description="InstallPlanRef is a reference to the latest InstallPlan that contains the Subscription's current CSV.",
    )
    installedCSV: Optional[str] = Field(
        None,
        description='InstalledCSV is the CSV currently installed by the Subscription.',
    )
    installplan: Optional[Installplan] = Field(
        None,
        description='Install is a reference to the latest InstallPlan generated for the Subscription. DEPRECATED: InstallPlanRef',
    )
    lastUpdated: datetime = Field(
        ...,
        description='LastUpdated represents the last time that the Subscription status was updated.',
    )
    reason: Optional[str] = Field(
        None,
        description='Reason is the reason the Subscription was transitioned to its current state.',
    )
    state: Optional[str] = Field(
        None, description='State represents the current state of the Subscription'
    )


class CatalogSource(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: v1.ObjectMeta = Field(
        ...,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: Spec
    status: Optional[StatusModel] = None


class CatalogSourceList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[CatalogSource] = Field(
        ...,
        description='List of catalogsources. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class ClusterServiceVersion(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: v1.ObjectMeta = Field(
        ...,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel4 = Field(
        ...,
        description='ClusterServiceVersionSpec declarations tell OLM how to install an operator that can manage apps for a given version.',
    )
    status: Optional[StatusModel1] = Field(
        None,
        description='ClusterServiceVersionStatus represents information about the status of a CSV. Status may trail the actual state of a system.',
    )


class ClusterServiceVersionList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[ClusterServiceVersion] = Field(
        ...,
        description='List of clusterserviceversions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class InstallPlan(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: v1.ObjectMeta = Field(
        ...,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel5 = Field(
        ...,
        description='InstallPlanSpec defines a set of Application resources to be installed',
    )
    status: Optional[StatusModel2] = Field(
        None,
        description='InstallPlanStatus represents the information about the status of steps required to complete installation. \n Status may trail the actual state of a system.',
    )


class InstallPlanList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[InstallPlan] = Field(
        ...,
        description='List of installplans. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class Subscription(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: v1.ObjectMeta = Field(
        ...,
        description="Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
    )
    spec: SpecModel7 = Field(
        ..., description='SubscriptionSpec defines an Application that can be installed'
    )
    status: Optional[StatusModel3] = None


class SubscriptionList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Subscription] = Field(
        ...,
        description='List of subscriptions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = Field(
        None,
        description='Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
