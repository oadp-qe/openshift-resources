# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel, Field

from .........io.k8s.apimachinery.pkg.apis.meta import v1
from ......api.pkg.lib import version
from ......api.pkg.operators import v1alpha1


class AppLink(BaseModel):
    name: Optional[str] = None
    url: Optional[str] = None


class Icon(BaseModel):
    base64data: Optional[str] = None
    mediatype: Optional[str] = None


class Maintainer(BaseModel):
    email: Optional[str] = None
    name: Optional[str] = None


class PackageManifestSpec(BaseModel):
    pass


class CSVDescription(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    apiservicedefinitions: Optional[v1alpha1.APIServiceDefinitions] = None
    customresourcedefinitions: Optional[v1alpha1.CustomResourceDefinitions] = None
    description: Optional[str] = Field(
        None, description="LongDescription is the CSV's description"
    )
    displayName: Optional[str] = Field(
        None, description="DisplayName is the CSV's display name"
    )
    icon: Optional[List[Icon]] = Field(
        None, description="Icon is the CSV's base64 encoded icon"
    )
    installModes: Optional[List[v1alpha1.InstallMode]] = Field(
        None, description='InstallModes specify supported installation types'
    )
    keywords: Optional[List[str]] = None
    links: Optional[List[AppLink]] = None
    maintainers: Optional[List[Maintainer]] = None
    maturity: Optional[str] = None
    minKubeVersion: Optional[str] = Field(
        None, description='Minimum Kubernetes version for operator installation'
    )
    nativeApis: Optional[List[v1.GroupVersionKind]] = None
    provider: Optional[AppLink] = Field(
        None, description="Provider is the CSV's provider"
    )
    relatedImages: Optional[List[str]] = Field(
        None, description='List of related images'
    )
    version: Optional[version.OperatorVersion] = Field(
        None, description="Version is the CSV's semantic version"
    )


class PackageChannel(BaseModel):
    currentCSV: str = Field(
        ...,
        description='CurrentCSV defines a reference to the CSV holding the version of this package currently for the channel.',
    )
    currentCSVDesc: Optional[CSVDescription] = Field(
        None, description='CurrentCSVSpec holds the spec of the current CSV'
    )
    name: str = Field(
        ..., description='Name is the name of the channel, e.g. `alpha` or `stable`'
    )


class PackageManifestStatus(BaseModel):
    catalogSource: str = Field(
        ...,
        description='CatalogSource is the name of the CatalogSource this package belongs to',
    )
    catalogSourceDisplayName: str
    catalogSourceNamespace: str = Field(
        ...,
        description='CatalogSourceNamespace is the namespace of the owning CatalogSource',
    )
    catalogSourcePublisher: str
    channels: List[PackageChannel] = Field(
        ...,
        description='Channels are the declared channels for the package, ala `stable` or `alpha`.',
    )
    defaultChannel: str = Field(
        ...,
        description='DefaultChannel is, if specified, the name of the default channel for the package. The default channel will be installed if no other channel is explicitly given. If the package has a single channel, then that channel is implicitly the default.',
    )
    packageName: str = Field(
        ..., description='PackageName is the name of the overall package, ala `etcd`.'
    )
    provider: Optional[AppLink] = Field(
        None,
        description="Provider is the provider of the PackageManifest's default CSV",
    )


class PackageManifest(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMeta] = None
    spec: Optional[PackageManifestSpec] = None
    status: Optional[PackageManifestStatus] = None


class PackageManifestList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[PackageManifest]
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMeta] = None
