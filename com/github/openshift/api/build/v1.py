# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel, Field

from ......io.k8s.api.core import v1 as v1_1
from ......io.k8s.apimachinery.pkg.apis.meta import v1


class BinaryBuildSource(BaseModel):
    asFile: Optional[str] = Field(
        None,
        description='asFile indicates that the provided binary input should be considered a single file within the build input. For example, specifying "webapp.war" would place the provided binary as `/webapp.war` for the builder. If left empty, the Docker and Source build strategies assume this file is a zip, tar, or tar.gz file and extract it as the source. The custom strategy receives this binary as standard input. This filename may not contain slashes or be \'..\' or \'.\'.',
    )


class BuildLog(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )


class BuildPostCommitSpec(BaseModel):
    args: Optional[List[str]] = Field(
        None,
        description="args is a list of arguments that are provided to either Command, Script or the container image's default entrypoint. The arguments are placed immediately after the command to be run.",
    )
    command: Optional[List[str]] = Field(
        None,
        description="command is the command to run. It may not be specified with Script. This might be needed if the image doesn't have `/bin/sh`, or if you do not want to use a shell. In all other cases, using Script might be more convenient.",
    )
    script: Optional[str] = Field(
        None,
        description='script is a shell script to be run with `/bin/sh -ic`. It may not be specified with Command. Use Script when a shell script is appropriate to execute the post build hook, for example for running unit tests with `rake test`. If you need control over the image entrypoint, or if the image does not have `/bin/sh`, use Command and/or Args. The `-i` flag is needed to support CentOS and RHEL images that use Software Collections (SCL), in order to have the appropriate collections enabled in the shell. E.g., in the Ruby image, this is necessary to make `ruby`, `bundle` and other binaries available in the PATH.',
    )


class BuildStatusOutputTo(BaseModel):
    imageDigest: Optional[str] = Field(
        None,
        description="imageDigest is the digest of the built container image. The digest uniquely identifies the image in the registry to which it was pushed.\n\nPlease note that this field may not always be set even if the push completes successfully - e.g. when the registry returns no digest or returns it in a format that the builder doesn't understand.",
    )


class BuildVolumeMount(BaseModel):
    destinationPath: str = Field(
        ...,
        description="destinationPath is the path within the buildah runtime environment at which the volume should be mounted. The transient mount within the build image and the backing volume will both be mounted read only. Must be an absolute path, must not contain '..' or ':', and must not collide with a destination path generated by the builder process Paths that collide with those added by the build controller will result in a failed build with an error message detailing which path caused the error.",
    )


class GitBuildSource(BaseModel):
    httpProxy: Optional[str] = Field(
        None,
        description='httpProxy is a proxy used to reach the git repository over http',
    )
    httpsProxy: Optional[str] = Field(
        None,
        description='httpsProxy is a proxy used to reach the git repository over https',
    )
    noProxy: Optional[str] = Field(
        None,
        description='noProxy is the list of domains for which the proxy should not be used',
    )
    ref: Optional[str] = Field(None, description='ref is the branch/tag/ref to build.')
    uri: str = Field(
        ...,
        description='uri points to the source that will be built. The structure of the source will depend on the type of build to run',
    )


class ImageLabel(BaseModel):
    name: str = Field(
        ...,
        description='name defines the name of the label. It must have non-zero length.',
    )
    value: Optional[str] = Field(
        None, description='value defines the literal value of the label.'
    )


class ImageSourcePath(BaseModel):
    destinationDir: str = Field(
        ...,
        description='destinationDir is the relative directory within the build directory where files copied from the image are placed.',
    )
    sourcePath: str = Field(
        ...,
        description='sourcePath is the absolute path of the file or directory inside the image to copy to the build directory.  If the source path ends in /. then the content of the directory will be copied, but the directory itself will not be created at the destination.',
    )


class ImageStreamTagReference(BaseModel):
    name: Optional[str] = Field(
        None,
        description='name is the name of the ImageStreamTag for an ImageChangeTrigger',
    )
    namespace: Optional[str] = Field(
        None,
        description='namespace is the namespace where the ImageStreamTag for an ImageChangeTrigger is located',
    )


class SecretLocalReference(BaseModel):
    name: str = Field(
        ...,
        description='Name is the name of the resource in the same namespace being referenced',
    )


class SourceControlUser(BaseModel):
    email: Optional[str] = Field(None, description='email of the source control user')
    name: Optional[str] = Field(None, description='name of the source control user')


class SourceStrategyOptions(BaseModel):
    incremental: Optional[bool] = Field(
        None,
        description='incremental overrides the source-strategy incremental option in the build config',
    )


class WebHookTrigger(BaseModel):
    allowEnv: Optional[bool] = Field(
        None,
        description='allowEnv determines whether the webhook can set environment variables; can only be set to true for GenericWebHook.',
    )
    secret: Optional[str] = Field(
        None,
        description='secret used to validate requests. Deprecated: use SecretReference instead.',
    )
    secretReference: Optional[SecretLocalReference] = Field(
        None,
        description='secretReference is a reference to a secret in the same namespace, containing the value to be validated when the webhook is invoked. The secret being referenced must contain a key named "WebHookSecretKey", the value of which will be checked against the value supplied in the webhook invocation.',
    )


class BuildCondition(BaseModel):
    lastTransitionTime: Optional[v1.Time] = Field(
        None,
        description='The last time the condition transitioned from one status to another.',
    )
    lastUpdateTime: Optional[v1.Time] = Field(
        None, description='The last time this condition was updated.'
    )
    message: Optional[str] = Field(
        None,
        description='A human readable message indicating details about the transition.',
    )
    reason: Optional[str] = Field(
        None, description="The reason for the condition's last transition."
    )
    status: str = Field(
        ..., description='Status of the condition, one of True, False, Unknown.'
    )
    type: str = Field(..., description='Type of build condition.')


class BuildOutput(BaseModel):
    imageLabels: Optional[List[ImageLabel]] = Field(
        None,
        description='imageLabels define a list of labels that are applied to the resulting image. If there are multiple labels with the same name then the last one in the list is used.',
    )
    pushSecret: Optional[v1_1.LocalObjectReference] = Field(
        None,
        description='PushSecret is the name of a Secret that would be used for setting up the authentication for executing the Docker push to authentication enabled Docker Registry (or Docker Hub).',
    )
    to: Optional[v1_1.ObjectReference] = Field(
        None,
        description="to defines an optional location to push the output of this build to. Kind must be one of 'ImageStreamTag' or 'DockerImage'. This value will be used to look up a container image repository to push to. In the case of an ImageStreamTag, the ImageStreamTag will be looked for in the namespace of the build unless Namespace is specified.",
    )


class BuildStatusOutput(BaseModel):
    to: Optional[BuildStatusOutputTo] = Field(
        None,
        description='to describes the status of the built image being pushed to a registry.',
    )


class ConfigMapBuildSource(BaseModel):
    configMap: v1_1.LocalObjectReference = Field(
        ...,
        description='configMap is a reference to an existing configmap that you want to use in your build.',
    )
    destinationDir: Optional[str] = Field(
        None,
        description='destinationDir is the directory where the files from the configmap should be available for the build time. For the Source build strategy, these will be injected into a container where the assemble script runs. For the container image build strategy, these will be copied into the build directory, where the Dockerfile is located, so users can ADD or COPY them during container image build.',
    )


class GitSourceRevision(BaseModel):
    author: Optional[SourceControlUser] = Field(
        None, description='author is the author of a specific commit'
    )
    commit: Optional[str] = Field(
        None, description='commit is the commit hash identifying a specific commit'
    )
    committer: Optional[SourceControlUser] = Field(
        None, description='committer is the committer of a specific commit'
    )
    message: Optional[str] = Field(
        None, description='message is the description of a specific commit'
    )


class ImageChangeCause(BaseModel):
    fromRef: Optional[v1_1.ObjectReference] = Field(
        None,
        description='fromRef contains detailed information about an image that triggered a build.',
    )
    imageID: Optional[str] = Field(
        None, description='imageID is the ID of the image that triggered a new build.'
    )


class ImageChangeTrigger(BaseModel):
    from_: Optional[v1_1.ObjectReference] = Field(
        None,
        alias='from',
        description='from is a reference to an ImageStreamTag that will trigger a build when updated It is optional. If no From is specified, the From image from the build strategy will be used. Only one ImageChangeTrigger with an empty From reference is allowed in a build configuration.',
    )
    lastTriggeredImageID: Optional[str] = Field(
        None,
        description='lastTriggeredImageID is used internally by the ImageChangeController to save last used image ID for build This field is deprecated and will be removed in a future release. Deprecated',
    )
    paused: Optional[bool] = Field(
        None,
        description='paused is true if this trigger is temporarily disabled. Optional.',
    )


class ImageChangeTriggerStatus(BaseModel):
    from_: Optional[ImageStreamTagReference] = Field(
        None,
        alias='from',
        description='from is the ImageStreamTag that is the source of the trigger.',
    )
    lastTriggerTime: Optional[v1.Time] = Field(
        None,
        description='lastTriggerTime is the last time this particular ImageStreamTag triggered a Build to start. This field is only updated when this trigger specifically started a Build.',
    )
    lastTriggeredImageID: Optional[str] = Field(
        None,
        description='lastTriggeredImageID represents the sha/id of the ImageStreamTag when a Build for this BuildConfig was started. The lastTriggeredImageID is updated each time a Build for this BuildConfig is started, even if this ImageStreamTag is not the reason the Build is started.',
    )


class ImageSource(BaseModel):
    as_: Optional[List[str]] = Field(
        None,
        alias='as',
        description='A list of image names that this source will be used in place of during a multi-stage container image build. For instance, a Dockerfile that uses "COPY --from=nginx:latest" will first check for an image source that has "nginx:latest" in this field before attempting to pull directly. If the Dockerfile does not reference an image source it is ignored. This field and paths may both be set, in which case the contents will be used twice.',
    )
    from_: v1_1.ObjectReference = Field(
        ...,
        alias='from',
        description='from is a reference to an ImageStreamTag, ImageStreamImage, or DockerImage to copy source from.',
    )
    paths: Optional[List[ImageSourcePath]] = Field(
        None,
        description='paths is a list of source and destination paths to copy from the image. This content will be copied into the build context prior to starting the build. If no paths are set, the build context will not be altered.',
    )
    pullSecret: Optional[v1_1.LocalObjectReference] = Field(
        None,
        description='pullSecret is a reference to a secret to be used to pull the image from a registry If the image is pulled from the OpenShift registry, this field does not need to be set.',
    )


class SecretBuildSource(BaseModel):
    destinationDir: Optional[str] = Field(
        None,
        description='destinationDir is the directory where the files from the secret should be available for the build time. For the Source build strategy, these will be injected into a container where the assemble script runs. Later, when the script finishes, all files injected will be truncated to zero length. For the container image build strategy, these will be copied into the build directory, where the Dockerfile is located, so users can ADD or COPY them during container image build.',
    )
    secret: v1_1.LocalObjectReference = Field(
        ...,
        description='secret is a reference to an existing secret that you want to use in your build.',
    )


class SecretSpec(BaseModel):
    mountPath: str = Field(
        ..., description='mountPath is the path at which to mount the secret'
    )
    secretSource: v1_1.LocalObjectReference = Field(
        ..., description='secretSource is a reference to the secret'
    )


class SourceRevision(BaseModel):
    git: Optional[GitSourceRevision] = Field(
        None, description='Git contains information about git-based build source'
    )
    type: str = Field(
        ...,
        description="type of the build source, may be one of 'Source', 'Dockerfile', 'Binary', or 'Images'",
    )


class StepInfo(BaseModel):
    durationMilliseconds: Optional[int] = Field(
        None,
        description='durationMilliseconds identifies how long the step took to complete in milliseconds.',
    )
    name: Optional[str] = Field(
        None, description='name is a unique identifier for each build step.'
    )
    startTime: Optional[v1.Time] = Field(
        None,
        description='startTime is a timestamp representing the server time when this Step started. it is represented in RFC3339 form and is in UTC.',
    )


class BitbucketWebHookCause(BaseModel):
    revision: Optional[SourceRevision] = Field(
        None,
        description='Revision is the git source revision information of the trigger.',
    )
    secret: Optional[str] = Field(
        None,
        description='Secret is the obfuscated webhook secret that triggered a build.',
    )


class BuildConfigStatus(BaseModel):
    imageChangeTriggers: Optional[List[ImageChangeTriggerStatus]] = Field(
        None,
        description='ImageChangeTriggers captures the runtime state of any ImageChangeTrigger specified in the BuildConfigSpec, including the value reconciled by the OpenShift APIServer for the lastTriggeredImageID. There is a single entry in this array for each image change trigger in spec. Each trigger status references the ImageStreamTag that acts as the source of the trigger.',
    )
    lastVersion: int = Field(
        ...,
        description='lastVersion is used to inform about number of last triggered build.',
    )


class BuildSource(BaseModel):
    binary: Optional[BinaryBuildSource] = Field(
        None,
        description='binary builds accept a binary as their input. The binary is generally assumed to be a tar, gzipped tar, or zip file depending on the strategy. For container image builds, this is the build context and an optional Dockerfile may be specified to override any Dockerfile in the build context. For Source builds, this is assumed to be an archive as described above. For Source and container image builds, if binary.asFile is set the build will receive a directory with a single file. contextDir may be used when an archive is provided. Custom builds will receive this binary as input on STDIN.',
    )
    configMaps: Optional[List[ConfigMapBuildSource]] = Field(
        None,
        description='configMaps represents a list of configMaps and their destinations that will be used for the build.',
    )
    contextDir: Optional[str] = Field(
        None,
        description='contextDir specifies the sub-directory where the source code for the application exists. This allows to have buildable sources in directory other than root of repository.',
    )
    dockerfile: Optional[str] = Field(
        None,
        description='dockerfile is the raw contents of a Dockerfile which should be built. When this option is specified, the FROM may be modified based on your strategy base image and additional ENV stanzas from your strategy environment will be added after the FROM, but before the rest of your Dockerfile stanzas. The Dockerfile source type may be used with other options like git - in those cases the Git repo will have any innate Dockerfile replaced in the context dir.',
    )
    git: Optional[GitBuildSource] = Field(
        None, description='git contains optional information about git build source'
    )
    images: Optional[List[ImageSource]] = Field(
        None,
        description='images describes a set of images to be used to provide source for the build',
    )
    secrets: Optional[List[SecretBuildSource]] = Field(
        None,
        description='secrets represents a list of secrets and their destinations that will be used only for the build.',
    )
    sourceSecret: Optional[v1_1.LocalObjectReference] = Field(
        None,
        description="sourceSecret is the name of a Secret that would be used for setting up the authentication for cloning private repository. The secret contains valid credentials for remote repository, where the data's key represent the authentication method to be used and value is the base64 encoded credentials. Supported auth methods are: ssh-privatekey.",
    )
    type: Optional[str] = Field(None, description='type of build input to accept')


class BuildTriggerPolicy(BaseModel):
    bitbucket: Optional[WebHookTrigger] = Field(
        None,
        description='BitbucketWebHook contains the parameters for a Bitbucket webhook type of trigger',
    )
    generic: Optional[WebHookTrigger] = Field(
        None,
        description='generic contains the parameters for a Generic webhook type of trigger',
    )
    github: Optional[WebHookTrigger] = Field(
        None,
        description='github contains the parameters for a GitHub webhook type of trigger',
    )
    gitlab: Optional[WebHookTrigger] = Field(
        None,
        description='GitLabWebHook contains the parameters for a GitLab webhook type of trigger',
    )
    imageChange: Optional[ImageChangeTrigger] = Field(
        None,
        description='imageChange contains parameters for an ImageChange type of trigger',
    )
    type: str = Field(
        ...,
        description='type is the type of build trigger. Valid values:\n\n- GitHub GitHubWebHookBuildTriggerType represents a trigger that launches builds on GitHub webhook invocations\n\n- Generic GenericWebHookBuildTriggerType represents a trigger that launches builds on generic webhook invocations\n\n- GitLab GitLabWebHookBuildTriggerType represents a trigger that launches builds on GitLab webhook invocations\n\n- Bitbucket BitbucketWebHookBuildTriggerType represents a trigger that launches builds on Bitbucket webhook invocations\n\n- ImageChange ImageChangeBuildTriggerType represents a trigger that launches builds on availability of a new version of an image\n\n- ConfigChange ConfigChangeBuildTriggerType will trigger a build on an initial build config creation WARNING: In the future the behavior will change to trigger a build on any config change',
    )


class BuildVolumeSource(BaseModel):
    configMap: Optional[v1_1.ConfigMapVolumeSourceV2] = Field(
        None,
        description='configMap represents a ConfigMap that should populate this volume',
    )
    csi: Optional[v1_1.CSIVolumeSourceV2] = Field(
        None,
        description='csi represents ephemeral storage provided by external CSI drivers which support this capability',
    )
    secret: Optional[v1_1.SecretVolumeSourceV2] = Field(
        None,
        description='secret represents a Secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret',
    )
    type: str = Field(
        ...,
        description='type is the BuildVolumeSourceType for the volume source. Type must match the populated volume source. Valid types are: Secret, ConfigMap',
    )


class GenericWebHookCause(BaseModel):
    revision: Optional[SourceRevision] = Field(
        None,
        description='revision is an optional field that stores the git source revision information of the generic webhook trigger when it is available.',
    )
    secret: Optional[str] = Field(
        None,
        description='secret is the obfuscated webhook secret that triggered a build.',
    )


class GitHubWebHookCause(BaseModel):
    revision: Optional[SourceRevision] = Field(
        None, description='revision is the git revision information of the trigger.'
    )
    secret: Optional[str] = Field(
        None,
        description='secret is the obfuscated webhook secret that triggered a build.',
    )


class GitLabWebHookCause(BaseModel):
    revision: Optional[SourceRevision] = Field(
        None,
        description='Revision is the git source revision information of the trigger.',
    )
    secret: Optional[str] = Field(
        None,
        description='Secret is the obfuscated webhook secret that triggered a build.',
    )


class StageInfo(BaseModel):
    durationMilliseconds: Optional[int] = Field(
        None,
        description='durationMilliseconds identifies how long the stage took to complete in milliseconds. Note: the duration of a stage can exceed the sum of the duration of the steps within the stage as not all actions are accounted for in explicit build steps.',
    )
    name: Optional[str] = Field(
        None,
        description='name is a unique identifier for each build stage that occurs.',
    )
    startTime: Optional[v1.Time] = Field(
        None,
        description='startTime is a timestamp representing the server time when this Stage started. It is represented in RFC3339 form and is in UTC.',
    )
    steps: Optional[List[StepInfo]] = Field(
        None,
        description='steps contains details about each step that occurs during a build stage including start time and duration in milliseconds.',
    )


class BuildStatus(BaseModel):
    cancelled: Optional[bool] = Field(
        None,
        description='cancelled describes if a cancel event was triggered for the build.',
    )
    completionTimestamp: Optional[v1.Time] = Field(
        None,
        description='completionTimestamp is a timestamp representing the server time when this Build was finished, whether that build failed or succeeded.  It reflects the time at which the Pod running the Build terminated. It is represented in RFC3339 form and is in UTC.',
    )
    conditions: Optional[List[BuildCondition]] = Field(
        None,
        description="Conditions represents the latest available observations of a build's current state.",
    )
    config: Optional[v1_1.ObjectReference] = Field(
        None,
        description='config is an ObjectReference to the BuildConfig this Build is based on.',
    )
    duration: Optional[int] = Field(
        None,
        description='duration contains time.Duration object describing build time.',
    )
    logSnippet: Optional[str] = Field(
        None,
        description='logSnippet is the last few lines of the build log.  This value is only set for builds that failed.',
    )
    message: Optional[str] = Field(
        None,
        description='message is a human-readable message indicating details about why the build has this status.',
    )
    output: Optional[BuildStatusOutput] = Field(
        None, description='output describes the container image the build has produced.'
    )
    outputDockerImageReference: Optional[str] = Field(
        None,
        description='outputDockerImageReference contains a reference to the container image that will be built by this build. Its value is computed from Build.Spec.Output.To, and should include the registry address, so that it can be used to push and pull the image.',
    )
    phase: str = Field(
        ...,
        description='phase is the point in the build lifecycle. Possible values are "New", "Pending", "Running", "Complete", "Failed", "Error", and "Cancelled".',
    )
    reason: Optional[str] = Field(
        None,
        description='reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.',
    )
    stages: Optional[List[StageInfo]] = Field(
        None,
        description='stages contains details about each stage that occurs during the build including start time, duration (in milliseconds), and the steps that occured within each stage.',
    )
    startTimestamp: Optional[v1.Time] = Field(
        None,
        description='startTimestamp is a timestamp representing the server time when this Build started running in a Pod. It is represented in RFC3339 form and is in UTC.',
    )


class BuildTriggerCause(BaseModel):
    bitbucketWebHook: Optional[BitbucketWebHookCause] = Field(
        None,
        description='BitbucketWebHook represents data for a Bitbucket webhook that fired a specific build.',
    )
    genericWebHook: Optional[GenericWebHookCause] = Field(
        None,
        description='genericWebHook holds data about a builds generic webhook trigger.',
    )
    githubWebHook: Optional[GitHubWebHookCause] = Field(
        None,
        description='gitHubWebHook represents data for a GitHub webhook that fired a specific build.',
    )
    gitlabWebHook: Optional[GitLabWebHookCause] = Field(
        None,
        description='GitLabWebHook represents data for a GitLab webhook that fired a specific build.',
    )
    imageChangeBuild: Optional[ImageChangeCause] = Field(
        None,
        description='imageChangeBuild stores information about an imagechange event that triggered a new build.',
    )
    message: Optional[str] = Field(
        None,
        description='message is used to store a human readable message for why the build was triggered. E.g.: "Manually triggered by user", "Configuration change",etc.',
    )


class BuildVolume(BaseModel):
    mounts: List[BuildVolumeMount] = Field(
        ...,
        description='mounts represents the location of the volume in the image build container',
    )
    name: str = Field(
        ...,
        description='name is a unique identifier for this BuildVolume. It must conform to the Kubernetes DNS label standard and be unique within the pod. Names that collide with those added by the build controller will result in a failed build with an error message detailing which name caused the error. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    source: BuildVolumeSource = Field(
        ...,
        description='source represents the location and type of the mounted volume.',
    )


class CustomBuildStrategy(BaseModel):
    buildAPIVersion: Optional[str] = Field(
        None,
        description='buildAPIVersion is the requested API version for the Build object serialized and passed to the custom builder',
    )
    env: Optional[List[v1_1.EnvVar]] = Field(
        None,
        description='env contains additional environment variables you want to pass into a builder container.',
    )
    exposeDockerSocket: Optional[bool] = Field(
        None,
        description='exposeDockerSocket will allow running Docker commands (and build container images) from inside the container.',
    )
    forcePull: Optional[bool] = Field(
        None,
        description='forcePull describes if the controller should configure the build pod to always pull the images for the builder or only pull if it is not present locally',
    )
    from_: v1_1.ObjectReference = Field(
        ...,
        alias='from',
        description='from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the container image should be pulled',
    )
    pullSecret: Optional[v1_1.LocalObjectReference] = Field(
        None,
        description='pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries',
    )
    secrets: Optional[List[SecretSpec]] = Field(
        None,
        description='secrets is a list of additional secrets that will be included in the build pod',
    )


class DockerBuildStrategy(BaseModel):
    buildArgs: Optional[List[v1_1.EnvVar]] = Field(
        None,
        description="buildArgs contains build arguments that will be resolved in the Dockerfile.  See https://docs.docker.com/engine/reference/builder/#/arg for more details. NOTE: Only the 'name' and 'value' fields are supported. Any settings on the 'valueFrom' field are ignored.",
    )
    dockerfilePath: Optional[str] = Field(
        None,
        description='dockerfilePath is the path of the Dockerfile that will be used to build the container image, relative to the root of the context (contextDir). Defaults to `Dockerfile` if unset.',
    )
    env: Optional[List[v1_1.EnvVar]] = Field(
        None,
        description='env contains additional environment variables you want to pass into a builder container.',
    )
    forcePull: Optional[bool] = Field(
        None,
        description='forcePull describes if the builder should pull the images from registry prior to building.',
    )
    from_: Optional[v1_1.ObjectReference] = Field(
        None,
        alias='from',
        description='from is a reference to an DockerImage, ImageStreamTag, or ImageStreamImage which overrides the FROM image in the Dockerfile for the build. If the Dockerfile uses multi-stage builds, this will replace the image in the last FROM directive of the file.',
    )
    imageOptimizationPolicy: Optional[str] = Field(
        None,
        description="imageOptimizationPolicy describes what optimizations the system can use when building images to reduce the final size or time spent building the image. The default policy is 'None' which means the final build image will be equivalent to an image created by the container image build API. The experimental policy 'SkipLayers' will avoid commiting new layers in between each image step, and will fail if the Dockerfile cannot provide compatibility with the 'None' policy. An additional experimental policy 'SkipLayersAndWarn' is the same as 'SkipLayers' but simply warns if compatibility cannot be preserved.",
    )
    noCache: Optional[bool] = Field(
        None,
        description='noCache if set to true indicates that the container image build must be executed with the --no-cache=true flag',
    )
    pullSecret: Optional[v1_1.LocalObjectReference] = Field(
        None,
        description='pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries',
    )
    volumes: Optional[List[BuildVolume]] = Field(
        None,
        description='volumes is a list of input volumes that can be mounted into the builds runtime environment. Only a subset of Kubernetes Volume sources are supported by builds. More info: https://kubernetes.io/docs/concepts/storage/volumes',
    )


class DockerStrategyOptions(BaseModel):
    buildArgs: Optional[List[v1_1.EnvVar]] = Field(
        None,
        description='Args contains any build arguments that are to be passed to Docker.  See https://docs.docker.com/engine/reference/builder/#/arg for more details',
    )
    noCache: Optional[bool] = Field(
        None,
        description='noCache overrides the docker-strategy noCache option in the build config',
    )


class JenkinsPipelineBuildStrategy(BaseModel):
    env: Optional[List[v1_1.EnvVar]] = Field(
        None,
        description='env contains additional environment variables you want to pass into a build pipeline.',
    )
    jenkinsfile: Optional[str] = Field(
        None,
        description='Jenkinsfile defines the optional raw contents of a Jenkinsfile which defines a Jenkins pipeline build.',
    )
    jenkinsfilePath: Optional[str] = Field(
        None,
        description='JenkinsfilePath is the optional path of the Jenkinsfile that will be used to configure the pipeline relative to the root of the context (contextDir). If both JenkinsfilePath & Jenkinsfile are both not specified, this defaults to Jenkinsfile in the root of the specified contextDir.',
    )


class SourceBuildStrategy(BaseModel):
    env: Optional[List[v1_1.EnvVar]] = Field(
        None,
        description='env contains additional environment variables you want to pass into a builder container.',
    )
    forcePull: Optional[bool] = Field(
        None,
        description='forcePull describes if the builder should pull the images from registry prior to building.',
    )
    from_: v1_1.ObjectReference = Field(
        ...,
        alias='from',
        description='from is reference to an DockerImage, ImageStreamTag, or ImageStreamImage from which the container image should be pulled',
    )
    incremental: Optional[bool] = Field(
        None,
        description='incremental flag forces the Source build to do incremental builds if true.',
    )
    pullSecret: Optional[v1_1.LocalObjectReference] = Field(
        None,
        description='pullSecret is the name of a Secret that would be used for setting up the authentication for pulling the container images from the private Docker registries',
    )
    scripts: Optional[str] = Field(
        None, description='scripts is the location of Source scripts'
    )
    volumes: Optional[List[BuildVolume]] = Field(
        None,
        description='volumes is a list of input volumes that can be mounted into the builds runtime environment. Only a subset of Kubernetes Volume sources are supported by builds. More info: https://kubernetes.io/docs/concepts/storage/volumes',
    )


class BuildRequest(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    binary: Optional[BinaryBuildSource] = Field(
        None,
        description='binary indicates a request to build from a binary provided to the builder',
    )
    dockerStrategyOptions: Optional[DockerStrategyOptions] = Field(
        None,
        description='DockerStrategyOptions contains additional docker-strategy specific options for the build',
    )
    env: Optional[List[v1_1.EnvVar]] = Field(
        None,
        description='env contains additional environment variables you want to pass into a builder container.',
    )
    from_: Optional[v1_1.ObjectReference] = Field(
        None,
        alias='from',
        description='from is the reference to the ImageStreamTag that triggered the build.',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    lastVersion: Optional[int] = Field(
        None,
        description="lastVersion (optional) is the LastVersion of the BuildConfig that was used to generate the build. If the BuildConfig in the generator doesn't match, a build will not be generated.",
    )
    metadata: Optional[v1.ObjectMetaV2] = None
    revision: Optional[SourceRevision] = Field(
        None,
        description='revision is the information from the source for a specific repo snapshot.',
    )
    sourceStrategyOptions: Optional[SourceStrategyOptions] = Field(
        None,
        description='SourceStrategyOptions contains additional source-strategy specific options for the build',
    )
    triggeredBy: Optional[List[BuildTriggerCause]] = Field(
        None,
        description='triggeredBy describes which triggers started the most recent update to the build configuration and contains information about those triggers.',
    )
    triggeredByImage: Optional[v1_1.ObjectReference] = Field(
        None, description='triggeredByImage is the Image that triggered this build.'
    )


class BuildStrategy(BaseModel):
    customStrategy: Optional[CustomBuildStrategy] = Field(
        None,
        description='customStrategy holds the parameters to the Custom build strategy',
    )
    dockerStrategy: Optional[DockerBuildStrategy] = Field(
        None,
        description='dockerStrategy holds the parameters to the container image build strategy.',
    )
    jenkinsPipelineStrategy: Optional[JenkinsPipelineBuildStrategy] = Field(
        None,
        description='JenkinsPipelineStrategy holds the parameters to the Jenkins Pipeline build strategy. Deprecated: use OpenShift Pipelines',
    )
    sourceStrategy: Optional[SourceBuildStrategy] = Field(
        None,
        description='sourceStrategy holds the parameters to the Source build strategy.',
    )
    type: Optional[str] = Field(None, description='type is the kind of build strategy.')


class BuildConfigSpec(BaseModel):
    completionDeadlineSeconds: Optional[int] = Field(
        None,
        description='completionDeadlineSeconds is an optional duration in seconds, counted from the time when a build pod gets scheduled in the system, that the build may be active on a node before the system actively tries to terminate the build; value must be positive integer',
    )
    failedBuildsHistoryLimit: Optional[int] = Field(
        None,
        description='failedBuildsHistoryLimit is the number of old failed builds to retain. When a BuildConfig is created, the 5 most recent failed builds are retained unless this value is set. If removed after the BuildConfig has been created, all failed builds are retained.',
    )
    mountTrustedCA: Optional[bool] = Field(
        None,
        description="mountTrustedCA bind mounts the cluster's trusted certificate authorities, as defined in the cluster's proxy configuration, into the build. This lets processes within a build trust components signed by custom PKI certificate authorities, such as private artifact repositories and HTTPS proxies.\n\nWhen this field is set to true, the contents of `/etc/pki/ca-trust` within the build are managed by the build container, and any changes to this directory or its subdirectories (for example - within a Dockerfile `RUN` instruction) are not persisted in the build's output image.",
    )
    nodeSelector: Optional[Dict[str, str]] = Field(
        None,
        description='nodeSelector is a selector which must be true for the build pod to fit on a node If nil, it can be overridden by default build nodeselector values for the cluster. If set to an empty map or a map with any values, default build nodeselector values are ignored.',
    )
    output: Optional[BuildOutput] = Field(
        None,
        description='output describes the container image the Strategy should produce.',
    )
    postCommit: Optional[BuildPostCommitSpec] = Field(
        None,
        description='postCommit is a build hook executed after the build output image is committed, before it is pushed to a registry.',
    )
    resources: Optional[v1_1.ResourceRequirements] = Field(
        None,
        description='resources computes resource requirements to execute the build.',
    )
    revision: Optional[SourceRevision] = Field(
        None,
        description='revision is the information from the source for a specific repo snapshot. This is optional.',
    )
    runPolicy: Optional[str] = Field(
        None,
        description='RunPolicy describes how the new build created from this build configuration will be scheduled for execution. This is optional, if not specified we default to "Serial".',
    )
    serviceAccount: Optional[str] = Field(
        None,
        description='serviceAccount is the name of the ServiceAccount to use to run the pod created by this build. The pod will be allowed to use secrets referenced by the ServiceAccount',
    )
    source: Optional[BuildSource] = Field(
        None, description='source describes the SCM in use.'
    )
    strategy: BuildStrategy = Field(
        ..., description='strategy defines how to perform a build.'
    )
    successfulBuildsHistoryLimit: Optional[int] = Field(
        None,
        description='successfulBuildsHistoryLimit is the number of old successful builds to retain. When a BuildConfig is created, the 5 most recent successful builds are retained unless this value is set. If removed after the BuildConfig has been created, all successful builds are retained.',
    )
    triggers: Optional[List[BuildTriggerPolicy]] = Field(
        None,
        description='triggers determine how new Builds can be launched from a BuildConfig. If no triggers are defined, a new build can only occur as a result of an explicit client build creation.',
    )


class BuildSpec(BaseModel):
    completionDeadlineSeconds: Optional[int] = Field(
        None,
        description='completionDeadlineSeconds is an optional duration in seconds, counted from the time when a build pod gets scheduled in the system, that the build may be active on a node before the system actively tries to terminate the build; value must be positive integer',
    )
    mountTrustedCA: Optional[bool] = Field(
        None,
        description="mountTrustedCA bind mounts the cluster's trusted certificate authorities, as defined in the cluster's proxy configuration, into the build. This lets processes within a build trust components signed by custom PKI certificate authorities, such as private artifact repositories and HTTPS proxies.\n\nWhen this field is set to true, the contents of `/etc/pki/ca-trust` within the build are managed by the build container, and any changes to this directory or its subdirectories (for example - within a Dockerfile `RUN` instruction) are not persisted in the build's output image.",
    )
    nodeSelector: Optional[Dict[str, str]] = Field(
        None,
        description='nodeSelector is a selector which must be true for the build pod to fit on a node If nil, it can be overridden by default build nodeselector values for the cluster. If set to an empty map or a map with any values, default build nodeselector values are ignored.',
    )
    output: Optional[BuildOutput] = Field(
        None,
        description='output describes the container image the Strategy should produce.',
    )
    postCommit: Optional[BuildPostCommitSpec] = Field(
        None,
        description='postCommit is a build hook executed after the build output image is committed, before it is pushed to a registry.',
    )
    resources: Optional[v1_1.ResourceRequirements] = Field(
        None,
        description='resources computes resource requirements to execute the build.',
    )
    revision: Optional[SourceRevision] = Field(
        None,
        description='revision is the information from the source for a specific repo snapshot. This is optional.',
    )
    serviceAccount: Optional[str] = Field(
        None,
        description='serviceAccount is the name of the ServiceAccount to use to run the pod created by this build. The pod will be allowed to use secrets referenced by the ServiceAccount',
    )
    source: Optional[BuildSource] = Field(
        None, description='source describes the SCM in use.'
    )
    strategy: BuildStrategy = Field(
        ..., description='strategy defines how to perform a build.'
    )
    triggeredBy: Optional[List[BuildTriggerCause]] = Field(
        None,
        description='triggeredBy describes which triggers started the most recent update to the build configuration and contains information about those triggers.',
    )


class Build(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = None
    spec: Optional[BuildSpec] = Field(
        None, description='spec is all the inputs used to execute the build.'
    )
    status: Optional[BuildStatus] = Field(
        None, description='status is the current status of the build.'
    )


class BuildConfig(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = None
    spec: BuildConfigSpec = Field(
        ...,
        description='spec holds all the input necessary to produce a new build, and the conditions when to trigger them.',
    )
    status: Optional[BuildConfigStatus] = Field(
        None, description='status holds any relevant information about a build config'
    )


class BuildConfigList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[BuildConfig] = Field(
        ..., description='items is a list of build configs'
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMetaV2] = None


class BuildList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Build] = Field(..., description='items is a list of builds')
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMetaV2] = None
