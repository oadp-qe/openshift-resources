# generated by datamodel-codegen:
#   filename:  k8s_swagger.json
#   timestamp: 2022-10-29T09:10:36+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field

from ......io.k8s.apimachinery.pkg.apis.meta import v1
from ......io.k8s.apimachinery.pkg.util import intstr


class RouteTargetReference(BaseModel):
    kind: str = Field(
        ...,
        description="The kind of target that the route is referring to. Currently, only 'Service' is allowed",
    )
    name: str = Field(
        ...,
        description='name of the service/target that is being referred to. e.g. name of the service',
    )
    weight: Optional[int] = Field(
        None,
        description="weight as an integer between 0 and 256, default 100, that specifies the target's relative weight against other target reference objects. 0 suppresses requests to this backend.",
    )


class TLSConfig(BaseModel):
    caCertificate: Optional[str] = Field(
        None,
        description='caCertificate provides the cert authority certificate contents',
    )
    certificate: Optional[str] = Field(
        None,
        description='certificate provides certificate contents. This should be a single serving certificate, not a certificate chain. Do not include a CA certificate.',
    )
    destinationCACertificate: Optional[str] = Field(
        None,
        description='destinationCACertificate provides the contents of the ca certificate of the final destination.  When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.',
    )
    insecureEdgeTerminationPolicy: Optional[str] = Field(
        None,
        description='insecureEdgeTerminationPolicy indicates the desired behavior for insecure connections to a route. While each router may make its own decisions on which ports to expose, this is normally port 80.\n\n* Allow - traffic is sent to the server on the insecure port (default) * Disable - no traffic is allowed on the insecure port. * Redirect - clients are redirected to the secure port.',
    )
    key: Optional[str] = Field(None, description='key provides key file contents')
    termination: str = Field(
        ...,
        description='termination indicates termination type.\n\n* edge - TLS termination is done by the router and http is used to communicate with the backend (default) * passthrough - Traffic is sent straight to the destination without the router providing TLS termination * reencrypt - TLS termination is done by the router and https is used to communicate with the backend',
    )


class RouteIngressCondition(BaseModel):
    lastTransitionTime: Optional[v1.Time] = Field(
        None, description='RFC 3339 date and time when this condition last transitioned'
    )
    message: Optional[str] = Field(
        None,
        description='Human readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        None,
        description="(brief) reason for the condition's last transition, and is usually a machine and human readable constant",
    )
    status: str = Field(
        ...,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: str = Field(
        ..., description='Type is the type of the condition. Currently only Admitted.'
    )


class RoutePort(BaseModel):
    targetPort: intstr.IntOrString = Field(
        ...,
        description='The target port on pods selected by the service this route points to. If this is a string, it will be looked up as a named port in the target endpoints port list. Required',
    )


class RouteSpec(BaseModel):
    alternateBackends: Optional[List[RouteTargetReference]] = Field(
        None,
        description='alternateBackends allows up to 3 additional backends to be assigned to the route. Only the Service kind is allowed, and it will be defaulted to Service. Use the weight field in RouteTargetReference object to specify relative preference.',
    )
    host: Optional[str] = Field(
        None,
        description='host is an alias/DNS that points to the service. Optional. If not specified a route name will typically be automatically chosen. Must follow DNS952 subdomain conventions.',
    )
    path: Optional[str] = Field(
        None,
        description='path that the router watches for, to route traffic for to the service. Optional',
    )
    port: Optional[RoutePort] = Field(
        None,
        description='If specified, the port to be used by the router. Most routers will use all endpoints exposed by the service by default - set this value to instruct routers which port to use.',
    )
    subdomain: Optional[str] = Field(
        None,
        description="subdomain is a DNS subdomain that is requested within the ingress controller's domain (as a subdomain). If host is set this field is ignored. An ingress controller may choose to ignore this suggested name, in which case the controller will report the assigned name in the status.ingress array or refuse to admit the route. If this value is set and the server does not support this field host will be populated automatically. Otherwise host is left empty. The field may have multiple parts separated by a dot, but not all ingress controllers may honor the request. This field may not be changed after creation except by a user with the update routes/custom-host permission.\n\nExample: subdomain `frontend` automatically receives the router subdomain `apps.mycluster.com` to have a full hostname `frontend.apps.mycluster.com`.",
    )
    tls: Optional[TLSConfig] = Field(
        None,
        description='The tls field provides the ability to configure certificates and termination for the route.',
    )
    to: RouteTargetReference = Field(
        ...,
        description='to is an object the route should use as the primary backend. Only the Service kind is allowed, and it will be defaulted to Service. If the weight field (0-256 default 100) is set to zero, no traffic will be sent to this backend.',
    )
    wildcardPolicy: Optional[str] = Field(
        None,
        description="Wildcard policy if any for the route. Currently only 'Subdomain' or 'None' is allowed.",
    )


class RouteIngress(BaseModel):
    conditions: Optional[List[RouteIngressCondition]] = Field(
        None, description='Conditions is the state of the route, may be empty.'
    )
    host: Optional[str] = Field(
        None,
        description='Host is the host string under which the route is exposed; this value is required',
    )
    routerCanonicalHostname: Optional[str] = Field(
        None,
        description='CanonicalHostname is the external host name for the router that can be used as a CNAME for the host requested for this route. This value is optional and may not be set in all cases.',
    )
    routerName: Optional[str] = Field(
        None,
        description='Name is a name chosen by the router to identify itself; this value is required',
    )
    wildcardPolicy: Optional[str] = Field(
        None,
        description='Wildcard policy is the wildcard policy that was allowed where this route is exposed.',
    )


class RouteStatus(BaseModel):
    ingress: Optional[List[RouteIngress]] = Field(
        None,
        description='ingress describes the places where the route may be exposed. The list of ingress points may contain duplicate Host or RouterName values. Routes are considered live once they are `Ready`',
    )


class Route(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ObjectMetaV2] = None
    spec: RouteSpec = Field(..., description='spec is the desired state of the route')
    status: Optional[RouteStatus] = Field(
        None, description='status is the current state of the route'
    )


class RouteList(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    items: List[Route] = Field(..., description='items is a list of routes')
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[v1.ListMetaV2] = None
